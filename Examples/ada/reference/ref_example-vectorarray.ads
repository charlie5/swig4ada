-- This file is generated by SWIG. Do *not* modify by
--hand.
with ref_example.Vector;
with Interfaces.C;
with Interfaces.C;
package ref_example.VectorArray is

   type Item is record
      null;
   end record;

   type Items is
     array (Interfaces.C.size_t range <>)
            of aliased ref_example.VectorArray.Item;

   type View is access all ref_example.VectorArray.Item;

   function construct return  ref_example.VectorArray.Item;

   function construct
     (maxsize : Interfaces.C.int)
      return    ref_example.VectorArray.Item;

   procedure destruct (Self : in ref_example.VectorArray.Item);

   function size
     (Self : in ref_example.VectorArray.Item)
      return Interfaces.C.int;

   function get
     (Self  : in ref_example.VectorArray.Item;
      index : Interfaces.C.int)
      return  access ref_example.Vector.Item;

   procedure set
     (Self  : in ref_example.VectorArray.Item;
      index : Interfaces.C.int;
      a     : access ref_example.Vector.Item);

private

   function construct_v1 return  ref_example.VectorArray.Item;

   function construct return  ref_example.VectorArray.Item renames
     construct_v1;

   pragma Import (Cpp, construct_v1, "gnat_new_VectorArray__SWIG_0");

   function construct_v2
     (maxsize : Interfaces.C.int)
      return    ref_example.VectorArray.Item;

   function construct
     (maxsize : Interfaces.C.int)
      return    ref_example.VectorArray.Item renames construct_v2;

   pragma Import (Cpp, construct_v2, "gnat_new_VectorArray__SWIG_1");
   pragma Cpp_Destructor (Entity => Destruct);

   pragma Import (Cpp, destruct, "_ZN11VectorArrayD1Ev");
   pragma Import (C, size, "Ada_VectorArray_size");
   pragma Import (C, get, "Ada_VectorArray_get");
   pragma Import (C, set, "Ada_VectorArray_set");

end ref_example.VectorArray;
