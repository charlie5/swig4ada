-- This file is generated by SWIG. Please do *not* modify by hand.
--
with interfaces.c;
with interfaces.C;
with System;
private with system.Address_To_Access_Conversions;



package class_example.Shape is

   -- Item
   -- 

type Item is  abstract tagged limited
      record
         x : aliased interfaces.c.double;
         y : aliased interfaces.c.double;
      end record;








   procedure move (Self : in out class_example.Shape.Item'Class;
dx : in interfaces.c.double;
dy : in interfaces.c.double);

   function  area (Self : access class_example.Shape.Item) return interfaces.c.double is abstract;

   function  perimeter (Self : access class_example.Shape.Item) return interfaces.c.double is abstract;





   -- Pointer
   -- 
   type Pointer is access all class_example.Shape.Item;

   -- Pointers
   -- 
   type Pointers is array (interfaces.C.Size_t range <>) of aliased class_example.Shape.Pointer;



   -- Pointer_Pointer
   -- 
   type Pointer_Pointer is access all class_example.Shape.Pointer;







private



   pragma Import (CPP, Entity => Item);





   pragma Import (CPP, move, "Ada_Shape_move");
   pragma Import (CPP, area);
   pragma Import (CPP, perimeter);


   package conversions is new System.Address_To_Access_Conversions (Item);




end class_example.Shape;
