-- This file is generated by SWIG. Please do *not* modify by hand.
--
with class_example.Shape;
with interfaces.c;
with interfaces.C;
with System;
private with system.Address_To_Access_Conversions;



package class_example.Circle is

   -- Item
   -- 

type Item is new Shape.item with
      record
         radius : aliased interfaces.c.double;
      end record;



   -- Items
   -- 
   type Items is array (interfaces.C.Size_t range <>) of aliased class_example.Circle.Item;






   function  construct  return class_example.Circle.Item'Class;

   function  area (Self : access class_example.Circle.Item) return interfaces.c.double;

   function  perimeter (Self : access class_example.Circle.Item) return interfaces.c.double;





   -- Pointer
   -- 
   type Pointer is access all class_example.Circle.Item;

   -- Pointers
   -- 
   type Pointers is array (interfaces.C.Size_t range <>) of aliased class_example.Circle.Pointer;



   -- Pointer_Pointer
   -- 
   type Pointer_Pointer is access all class_example.Circle.Pointer;







private



   pragma Import (CPP, Entity => Item);





   pragma cpp_Constructor (construct, "Ada_new_Circle");
   pragma Import (CPP, area, "Ada_Circle_area");
   pragma Import (CPP, perimeter, "Ada_Circle_perimeter");


   package conversions is new System.Address_To_Access_Conversions (Item);




end class_example.Circle;
