-- This file is generated by SWIG. Please do *not* modify by hand.
--
with Interfaces.C;
with swigg.Pointers;
with Interfaces.C.Pointers;
with Interfaces.C.Strings;
with System;
with System;
private with System.Address_To_Access_Conversions;
package swigg.Dispatcher is

   -- AccessMode
   --
   type AccessMode is (PUBLIC, a_PRIVATE, a_PROTECTED);

   for AccessMode use (PUBLIC => 0, a_PRIVATE => 1, a_PROTECTED => 2);

   pragma Convention (C, AccessMode);

   type AccessMode_array is
     array
       (Interfaces.C.size_t range <>) of aliased swigg.Dispatcher.AccessMode;

   -- Item
   --

   type Item is tagged limited record
      cplus_mode : aliased swigg.Dispatcher.AccessMode;
   end record;

   -- Items
   --
   type Items is
     array (Interfaces.C.size_t range <>) of aliased swigg.Dispatcher.Item;

   function emit_one
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function emit_children
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function defaultHandler
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function top
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function applyDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function clearDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function constantDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function extendDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function fragmentDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function importDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function includeDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function insertDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function moduleDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function nativeDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function pragmaDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function typemapDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function typemapitemDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function typemapcopyDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function typesDirective
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function cDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function externDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function enumDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function enumvalueDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function enumforwardDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classforwardDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function constructorDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function destructorDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function accessDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function usingDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function namespaceDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function templateDeclaration
     (Self : in swigg.Dispatcher.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   -- Pointer
   --
   type Pointer is access all swigg.Dispatcher.Item;

   -- Pointers
   --
   type Pointers is
     array (Interfaces.C.size_t range <>) of aliased swigg.Dispatcher.Pointer;

   -- Pointer_Pointer
   --
   type Pointer_Pointer is access all swigg.Dispatcher.Pointer;

   -- AccessMode_Pointer
   --
   type AccessMode_Pointer is access all swigg.Dispatcher.AccessMode;

   -- AccessMode_Pointers
   --
   type AccessMode_Pointers is
     array
       (Interfaces.C
          .size_t range <>) of aliased swigg.Dispatcher.AccessMode_Pointer;

   -- AccessMode_Pointer_Pointer
   --
   type AccessMode_Pointer_Pointer is
     access all swigg.Dispatcher.AccessMode_Pointer;

private

--     pragma Cpp_Class (Entity => Item);
   pragma Import (Cpp, Entity => Item);

   pragma Import (Cpp, emit_one, "Ada_Dispatcher_emit_one");
   pragma Import (Cpp, emit_children, "Ada_Dispatcher_emit_children");
   pragma Import (Cpp, defaultHandler, "Ada_Dispatcher_defaultHandler");
   pragma Import (Cpp, top, "Ada_Dispatcher_top");
   pragma Import (Cpp, applyDirective, "Ada_Dispatcher_applyDirective");
   pragma Import (Cpp, clearDirective, "Ada_Dispatcher_clearDirective");
   pragma Import (Cpp, constantDirective, "Ada_Dispatcher_constantDirective");
   pragma Import (Cpp, extendDirective, "Ada_Dispatcher_extendDirective");
   pragma Import (Cpp, fragmentDirective, "Ada_Dispatcher_fragmentDirective");
   pragma Import (Cpp, importDirective, "Ada_Dispatcher_importDirective");
   pragma Import (Cpp, includeDirective, "Ada_Dispatcher_includeDirective");
   pragma Import (Cpp, insertDirective, "Ada_Dispatcher_insertDirective");
   pragma Import (Cpp, moduleDirective, "Ada_Dispatcher_moduleDirective");
   pragma Import (Cpp, nativeDirective, "Ada_Dispatcher_nativeDirective");
   pragma Import (Cpp, pragmaDirective, "Ada_Dispatcher_pragmaDirective");
   pragma Import (Cpp, typemapDirective, "Ada_Dispatcher_typemapDirective");
   pragma Import
     (Cpp,
      typemapitemDirective,
      "Ada_Dispatcher_typemapitemDirective");
   pragma Import
     (Cpp,
      typemapcopyDirective,
      "Ada_Dispatcher_typemapcopyDirective");
   pragma Import (Cpp, typesDirective, "Ada_Dispatcher_typesDirective");
   pragma Import (Cpp, cDeclaration, "Ada_Dispatcher_cDeclaration");
   pragma Import (Cpp, externDeclaration, "Ada_Dispatcher_externDeclaration");
   pragma Import (Cpp, enumDeclaration, "Ada_Dispatcher_enumDeclaration");
   pragma Import
     (Cpp,
      enumvalueDeclaration,
      "Ada_Dispatcher_enumvalueDeclaration");
   pragma Import
     (Cpp,
      enumforwardDeclaration,
      "Ada_Dispatcher_enumforwardDeclaration");
   pragma Import (Cpp, classDeclaration, "Ada_Dispatcher_classDeclaration");
   pragma Import
     (Cpp,
      classforwardDeclaration,
      "Ada_Dispatcher_classforwardDeclaration");
   pragma Import
     (Cpp,
      constructorDeclaration,
      "Ada_Dispatcher_constructorDeclaration");
   pragma Import
     (Cpp,
      destructorDeclaration,
      "Ada_Dispatcher_destructorDeclaration");
   pragma Import (Cpp, accessDeclaration, "Ada_Dispatcher_accessDeclaration");
   pragma Import (Cpp, usingDeclaration, "Ada_Dispatcher_usingDeclaration");
   pragma Import
     (Cpp,
      namespaceDeclaration,
      "Ada_Dispatcher_namespaceDeclaration");
   pragma Import
     (Cpp,
      templateDeclaration,
      "Ada_Dispatcher_templateDeclaration");

   package conversions is new System.Address_To_Access_Conversions (Item);

end swigg.Dispatcher;
