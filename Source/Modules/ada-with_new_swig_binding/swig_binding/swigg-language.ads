-- This file is generated by SWIG. Please do *not* modify by hand.
--
with Interfaces.C;
with Swig.Pointers;
with Swig;
with swigg.Pointers;
with swigg.Dispatcher;
with Interfaces.C.Pointers;
with Interfaces.C.Strings;
with System;
with System;
private with System.Address_To_Access_Conversions;
package swigg.Language is

   -- Item
   --

   type Item is new Dispatcher.Item with record
      none_comparison                       : access swigg.String;
      director_ctor_code                    : access swigg.String;
      director_prot_ctor_code               : access swigg.String;
      director_multiple_inheritance         : aliased Interfaces.C.int;
      director_language                     : aliased Interfaces.C.int;
      symbols                               : access swigg.Hash;
      classtypes                            : access swigg.Hash;
      enumtypes                             : access swigg.Hash;
      overloading                           : aliased Interfaces.C.int;
      protected_and_private_Members_allowed : aliased Swig.bool;
      multiinput                            : aliased Interfaces.C.int;
      cplus_runtime                         : aliased Interfaces.C.int;
      directors                             : aliased Interfaces.C.int;
   end record;

   -- Items
   --
   type Items is
     array (Interfaces.C.size_t range <>) of aliased swigg.Language.Item;

   function construct return swigg.Language.Item'Class;

   function emit_one
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   procedure main
     (Self : in out swigg.Language.Item;
      argc : in     Interfaces.C.int;
      argv : in     Swig.Pointers.chars_ptr_Pointer);

   function top
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function applyDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function clearDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function constantDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function extendDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function fragmentDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function importDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function includeDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function insertDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function moduleDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function nativeDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function pragmaDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function typemapDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function typemapcopyDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function typesDirective
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function cDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function externDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function enumDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function enumvalueDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function enumforwardDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classforwardDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function constructorDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function destructorDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function accessDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function namespaceDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function usingDeclaration
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function functionHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function globalfunctionHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function memberfunctionHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function staticmemberfunctionHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function callbackfunctionHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function variableHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function globalvariableHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function membervariableHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function staticmembervariableHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function memberconstantHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function constructorHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function copyconstructorHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function destructorHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function typedefHandler
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function constantWrapper
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function variableWrapper
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function functionWrapper
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function nativeWrapper
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classDirector
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classDirectorInit
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classDirectorEnd
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function unrollVirtualMethods
     (Self               : in swigg.Language.Item;
      n                  : in swigg.Pointers.Node_Pointer;
      parent             : in swigg.Pointers.Node_Pointer;
      vm                 : in swigg.Pointers.List_Pointer;
      default_director   : in Interfaces.C.int;
      virtual_destructor : in Swig.Pointers.int_Pointer;
      protectedbase      : in Interfaces.C.int) return Interfaces.C.int;

   function unrollVirtualMethods
     (Self               : in swigg.Language.Item;
      n                  : in swigg.Pointers.Node_Pointer;
      parent             : in swigg.Pointers.Node_Pointer;
      vm                 : in swigg.Pointers.List_Pointer;
      default_director   : in Interfaces.C.int;
      virtual_destructor : in Swig.Pointers.int_Pointer)
      return Interfaces.C.int;

   function classDirectorConstructor
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classDirectorDefaultConstructor
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classDirectorMethod
     (Self   : in swigg.Language.Item;
      n      : in swigg.Pointers.Node_Pointer;
      parent : in swigg.Pointers.Node_Pointer;
      super  : in swigg.Pointers.String_Pointer) return Interfaces.C.int;

   function classDirectorConstructors
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classDirectorDestructor
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classDirectorMethods
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function classDirectorDisown
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function validIdentifier
     (Self : in swigg.Language.Item;
      s    : in swigg.Pointers.String_Pointer) return Interfaces.C.int;

   function addSymbol
     (Self : in swigg.Language.Item;
      s    : in swigg.Pointers.String_Pointer;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function symbolLookup
     (Self : in swigg.Language.Item;
      s    : in swigg.Pointers.String_Pointer) return access swigg.Node;

   function classLookup
     (Self : in swigg.Language.Item;
      s    : in swigg.Pointers.SwigType_Pointer) return access swigg.Node;

   function enumLookup
     (Self : in swigg.Language.Item;
      s    : in swigg.Pointers.SwigType_Pointer) return access swigg.Node;

   function abstractClassTest
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function is_assignable
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function runtimeCode
     (Self : in swigg.Language.Item) return access swigg.String;

   function defaultExternalRuntimeFilename
     (Self : in swigg.Language.Item) return access swigg.String;

   procedure enable_cplus_runtime_mode (Self : in out swigg.Language.Item);

   function cplus_runtime_mode
     (Self : in swigg.Language.Item) return Interfaces.C.int;

   procedure allow_protected_and_private_Members
     (Self : in out swigg.Language.Item);

   procedure allow_directors
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int);

   procedure allow_directors (Self : in out swigg.Language.Item);

   function directorsEnabled
     (Self : in swigg.Language.Item) return Interfaces.C.int;

   procedure allow_dirprot
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int);

   procedure allow_dirprot (Self : in out swigg.Language.Item);

   procedure allow_allprotected
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int);

   procedure allow_allprotected (Self : in out swigg.Language.Item);

   function dirprot_mode
     (Self : in swigg.Language.Item) return Interfaces.C.int;

   function need_nonpublic_ctor
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   function need_nonpublic_member
     (Self : in swigg.Language.Item;
      n    : in swigg.Pointers.Node_Pointer) return Interfaces.C.int;

   procedure setSubclassInstanceCheck
     (Self : in out swigg.Language.Item;
      s    : in     swigg.Pointers.String_Pointer);

   procedure setOverloadResolutionTemplates
     (Self : in out swigg.Language.Item;
      argc : in     swigg.Pointers.String_Pointer;
      argv : in     swigg.Pointers.String_Pointer);

   procedure allow_multiple_input
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int);

   procedure allow_multiple_input (Self : in out swigg.Language.Item);

   procedure allow_overloading
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int);

   procedure allow_overloading (Self : in out swigg.Language.Item);

   function is_wrapping_class
     (Self : in swigg.Language.Item) return Interfaces.C.int;

   function getCurrentClass
     (Self : in swigg.Language.Item) return access swigg.Node;

   function getClassName
     (Self : in swigg.Language.Item) return access swigg.String;

   function getClassHash
     (Self : in swigg.Language.Item) return access swigg.Hash;

   function getClassPrefix
     (Self : in swigg.Language.Item) return access swigg.String;

   function getClassType
     (Self : in swigg.Language.Item) return access swigg.String;

   function is_smart_pointer
     (Self : in swigg.Language.Item) return Interfaces.C.int;

   function extraDirectorProtectedCPPMethodsRequired
     (Self : in swigg.Language.Item) return Swig.bool;

   -- Pointer
   --
   type Pointer is access all swigg.Language.Item;

   -- Pointers
   --
   type Pointers is
     array (Interfaces.C.size_t range <>) of aliased swigg.Language.Pointer;

   -- Pointer_Pointer
   --
   type Pointer_Pointer is access all swigg.Language.Pointer;

private

   pragma Import (Cpp,  Entity => Item);

   pragma Cpp_Constructor (construct, "Ada_new_Language");
   pragma Import (Cpp, emit_one, "Ada_Language_emit_one");
   pragma Import (Cpp, main, "Ada_Language_main");
   pragma Import (Cpp, top, "Ada_Language_top");
   pragma Import (Cpp, applyDirective, "Ada_Language_applyDirective");
   pragma Import (Cpp, clearDirective, "Ada_Language_clearDirective");
   pragma Import (Cpp, constantDirective, "Ada_Language_constantDirective");
   pragma Import (Cpp, extendDirective, "Ada_Language_extendDirective");
   pragma Import (Cpp, fragmentDirective, "Ada_Language_fragmentDirective");
   pragma Import (Cpp, importDirective, "Ada_Language_importDirective");
   pragma Import (Cpp, includeDirective, "Ada_Language_includeDirective");
   pragma Import (Cpp, insertDirective, "Ada_Language_insertDirective");
   pragma Import (Cpp, moduleDirective, "Ada_Language_moduleDirective");
   pragma Import (Cpp, nativeDirective, "Ada_Language_nativeDirective");
   pragma Import (Cpp, pragmaDirective, "Ada_Language_pragmaDirective");
   pragma Import (Cpp, typemapDirective, "Ada_Language_typemapDirective");
   pragma Import
     (Cpp,
      typemapcopyDirective,
      "Ada_Language_typemapcopyDirective");
   pragma Import (Cpp, typesDirective, "Ada_Language_typesDirective");
   pragma Import (Cpp, cDeclaration, "Ada_Language_cDeclaration");
   pragma Import (Cpp, externDeclaration, "Ada_Language_externDeclaration");
   pragma Import (Cpp, enumDeclaration, "Ada_Language_enumDeclaration");
   pragma Import
     (Cpp,
      enumvalueDeclaration,
      "Ada_Language_enumvalueDeclaration");
   pragma Import
     (Cpp,
      enumforwardDeclaration,
      "Ada_Language_enumforwardDeclaration");
   pragma Import (Cpp, classDeclaration, "Ada_Language_classDeclaration");
   pragma Import
     (Cpp,
      classforwardDeclaration,
      "Ada_Language_classforwardDeclaration");
   pragma Import
     (Cpp,
      constructorDeclaration,
      "Ada_Language_constructorDeclaration");
   pragma Import
     (Cpp,
      destructorDeclaration,
      "Ada_Language_destructorDeclaration");
   pragma Import (Cpp, accessDeclaration, "Ada_Language_accessDeclaration");
   pragma Import
     (Cpp,
      namespaceDeclaration,
      "Ada_Language_namespaceDeclaration");
   pragma Import (Cpp, usingDeclaration, "Ada_Language_usingDeclaration");
   pragma Import (Cpp, functionHandler, "Ada_Language_functionHandler");
   pragma Import
     (Cpp,
      globalfunctionHandler,
      "Ada_Language_globalfunctionHandler");
   pragma Import
     (Cpp,
      memberfunctionHandler,
      "Ada_Language_memberfunctionHandler");
   pragma Import
     (Cpp,
      staticmemberfunctionHandler,
      "Ada_Language_staticmemberfunctionHandler");
   pragma Import
     (Cpp,
      callbackfunctionHandler,
      "Ada_Language_callbackfunctionHandler");
   pragma Import (Cpp, variableHandler, "Ada_Language_variableHandler");
   pragma Import
     (Cpp,
      globalvariableHandler,
      "Ada_Language_globalvariableHandler");
   pragma Import
     (Cpp,
      membervariableHandler,
      "Ada_Language_membervariableHandler");
   pragma Import
     (Cpp,
      staticmembervariableHandler,
      "Ada_Language_staticmembervariableHandler");
   pragma Import
     (Cpp,
      memberconstantHandler,
      "Ada_Language_memberconstantHandler");
   pragma Import (Cpp, constructorHandler, "Ada_Language_constructorHandler");
   pragma Import
     (Cpp,
      copyconstructorHandler,
      "Ada_Language_copyconstructorHandler");
   pragma Import (Cpp, destructorHandler, "Ada_Language_destructorHandler");
   pragma Import (Cpp, classHandler, "Ada_Language_classHandler");
   pragma Import (Cpp, typedefHandler, "Ada_Language_typedefHandler");
   pragma Import (Cpp, constantWrapper, "Ada_Language_constantWrapper");
   pragma Import (Cpp, variableWrapper, "Ada_Language_variableWrapper");
   pragma Import (Cpp, functionWrapper, "Ada_Language_functionWrapper");
   pragma Import (Cpp, nativeWrapper, "Ada_Language_nativeWrapper");
   pragma Import (Cpp, classDirector, "Ada_Language_classDirector");
   pragma Import (Cpp, classDirectorInit, "Ada_Language_classDirectorInit");
   pragma Import (Cpp, classDirectorEnd, "Ada_Language_classDirectorEnd");

   function unrollVirtualMethods_v1
     (Self               : in swigg.Language.Item;
      n                  : in swigg.Pointers.Node_Pointer;
      parent             : in swigg.Pointers.Node_Pointer;
      vm                 : in swigg.Pointers.List_Pointer;
      default_director   : in Interfaces.C.int;
      virtual_destructor : in Swig.Pointers.int_Pointer;
      protectedbase      : in Interfaces.C.int) return Interfaces.C.int;

   function unrollVirtualMethods
     (Self               : in swigg.Language.Item;
      n                  : in swigg.Pointers.Node_Pointer;
      parent             : in swigg.Pointers.Node_Pointer;
      vm                 : in swigg.Pointers.List_Pointer;
      default_director   : in Interfaces.C.int;
      virtual_destructor : in Swig.Pointers.int_Pointer;
      protectedbase      : in Interfaces.C.int) return Interfaces.C.int renames
     unrollVirtualMethods_v1;

   pragma Import
     (Cpp,
      unrollVirtualMethods_v1,
      "Ada_Language_unrollVirtualMethods__SWIG_0");

   function unrollVirtualMethods_v2
     (Self               : in swigg.Language.Item;
      n                  : in swigg.Pointers.Node_Pointer;
      parent             : in swigg.Pointers.Node_Pointer;
      vm                 : in swigg.Pointers.List_Pointer;
      default_director   : in Interfaces.C.int;
      virtual_destructor : in Swig.Pointers.int_Pointer)
      return Interfaces.C.int;

   function unrollVirtualMethods
     (Self               : in swigg.Language.Item;
      n                  : in swigg.Pointers.Node_Pointer;
      parent             : in swigg.Pointers.Node_Pointer;
      vm                 : in swigg.Pointers.List_Pointer;
      default_director   : in Interfaces.C.int;
      virtual_destructor : in Swig.Pointers.int_Pointer)
      return Interfaces.C.int renames
     unrollVirtualMethods_v2;

   pragma Import
     (Cpp,
      unrollVirtualMethods_v2,
      "Ada_Language_unrollVirtualMethods__SWIG_1");
   pragma Import
     (Cpp,
      classDirectorConstructor,
      "Ada_Language_classDirectorConstructor");
   pragma Import
     (Cpp,
      classDirectorDefaultConstructor,
      "Ada_Language_classDirectorDefaultConstructor");
   pragma Import
     (Cpp,
      classDirectorMethod,
      "Ada_Language_classDirectorMethod");
   pragma Import
     (Cpp,
      classDirectorConstructors,
      "Ada_Language_classDirectorConstructors");
   pragma Import
     (Cpp,
      classDirectorDestructor,
      "Ada_Language_classDirectorDestructor");
   pragma Import
     (Cpp,
      classDirectorMethods,
      "Ada_Language_classDirectorMethods");
   pragma Import
     (Cpp,
      classDirectorDisown,
      "Ada_Language_classDirectorDisown");
   pragma Import (Cpp, validIdentifier, "Ada_Language_validIdentifier");
   pragma Import (Cpp, addSymbol, "Ada_Language_addSymbol");
   pragma Import (Cpp, symbolLookup, "Ada_Language_symbolLookup");
   pragma Import (Cpp, classLookup, "Ada_Language_classLookup");
   pragma Import (Cpp, enumLookup, "Ada_Language_enumLookup");
   pragma Import (Cpp, abstractClassTest, "Ada_Language_abstractClassTest");
   pragma Import (Cpp, is_assignable, "Ada_Language_is_assignable");
   pragma Import (Cpp, runtimeCode, "Ada_Language_runtimeCode");
   pragma Import
     (Cpp,
      defaultExternalRuntimeFilename,
      "Ada_Language_defaultExternalRuntimeFilename");
   pragma Import
     (Cpp,
      enable_cplus_runtime_mode,
      "Ada_Language_enable_cplus_runtime_mode");
   pragma Import (Cpp, cplus_runtime_mode, "Ada_Language_cplus_runtime_mode");
   pragma Import
     (Cpp,
      allow_protected_and_private_Members,
      "Ada_Language_allow_protected_and_private_Members");

   procedure allow_directors_v1
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int);

   procedure allow_directors
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int) renames
     allow_directors_v1;

   pragma Import
     (Cpp,
      allow_directors_v1,
      "Ada_Language_allow_directors__SWIG_0");

   procedure allow_directors_v2 (Self : in out swigg.Language.Item);

   procedure allow_directors
     (Self : in out swigg.Language.Item) renames
     allow_directors_v2;

   pragma Import
     (Cpp,
      allow_directors_v2,
      "Ada_Language_allow_directors__SWIG_1");
   pragma Import (Cpp, directorsEnabled, "Ada_Language_directorsEnabled");

   procedure allow_dirprot_v1
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int);

   procedure allow_dirprot
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int) renames
     allow_dirprot_v1;

   pragma Import (Cpp, allow_dirprot_v1, "Ada_Language_allow_dirprot__SWIG_0");

   procedure allow_dirprot_v2 (Self : in out swigg.Language.Item);

   procedure allow_dirprot
     (Self : in out swigg.Language.Item) renames
     allow_dirprot_v2;

   pragma Import (Cpp, allow_dirprot_v2, "Ada_Language_allow_dirprot__SWIG_1");

   procedure allow_allprotected_v1
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int);

   procedure allow_allprotected
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int) renames
     allow_allprotected_v1;

   pragma Import
     (Cpp,
      allow_allprotected_v1,
      "Ada_Language_allow_allprotected__SWIG_0");

   procedure allow_allprotected_v2 (Self : in out swigg.Language.Item);

   procedure allow_allprotected
     (Self : in out swigg.Language.Item) renames
     allow_allprotected_v2;

   pragma Import
     (Cpp,
      allow_allprotected_v2,
      "Ada_Language_allow_allprotected__SWIG_1");
   pragma Import (Cpp, dirprot_mode, "Ada_Language_dirprot_mode");
   pragma Import
     (Cpp,
      need_nonpublic_ctor,
      "Ada_Language_need_nonpublic_ctor");
   pragma Import
     (Cpp,
      need_nonpublic_member,
      "Ada_Language_need_nonpublic_member");
   pragma Import
     (Cpp,
      setSubclassInstanceCheck,
      "Ada_Language_setSubclassInstanceCheck");
   pragma Import
     (Cpp,
      setOverloadResolutionTemplates,
      "Ada_Language_setOverloadResolutionTemplates");

   procedure allow_multiple_input_v1
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int);

   procedure allow_multiple_input
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int) renames
     allow_multiple_input_v1;

   pragma Import
     (Cpp,
      allow_multiple_input_v1,
      "Ada_Language_allow_multiple_input__SWIG_0");

   procedure allow_multiple_input_v2 (Self : in out swigg.Language.Item);

   procedure allow_multiple_input
     (Self : in out swigg.Language.Item) renames
     allow_multiple_input_v2;

   pragma Import
     (Cpp,
      allow_multiple_input_v2,
      "Ada_Language_allow_multiple_input__SWIG_1");

   procedure allow_overloading_v1
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int);

   procedure allow_overloading
     (Self : in out swigg.Language.Item;
      val  : in     Interfaces.C.int) renames
     allow_overloading_v1;

   pragma Import
     (Cpp,
      allow_overloading_v1,
      "Ada_Language_allow_overloading__SWIG_0");

   procedure allow_overloading_v2 (Self : in out swigg.Language.Item);

   procedure allow_overloading
     (Self : in out swigg.Language.Item) renames
     allow_overloading_v2;

   pragma Import
     (Cpp,
      allow_overloading_v2,
      "Ada_Language_allow_overloading__SWIG_1");
   pragma Import (Cpp, is_wrapping_class, "Ada_Language_is_wrapping_class");
   pragma Import (Cpp, getCurrentClass, "Ada_Language_getCurrentClass");
   pragma Import (Cpp, getClassName, "Ada_Language_getClassName");
   pragma Import (Cpp, getClassHash, "Ada_Language_getClassHash");
   pragma Import (Cpp, getClassPrefix, "Ada_Language_getClassPrefix");
   pragma Import (Cpp, getClassType, "Ada_Language_getClassType");
   pragma Import (Cpp, is_smart_pointer, "Ada_Language_is_smart_pointer");
   pragma Import
     (Cpp,
      extraDirectorProtectedCPPMethodsRequired,
      "Ada_Language_extraDirectorProtectedCPPMethodsRequired");

   package conversions is new System.Address_To_Access_Conversions (Item);

end swigg.Language;
