/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#if defined(_WIN32) || defined(__CYGWIN32__)
#  define DllExport   __declspec( dllexport )
#  define SWIGSTDCALL __stdcall
#else
#  define DllExport  
#  define SWIGSTDCALL
#endif 

#ifdef __cplusplus
#  include <new>
#endif





#define protected public
#define private   public

#include "swigconfig.h"
#include "swigwarn.h"

#include "swig.h"
#include "preprocessor.h"

#include "swigtree.h"
#include "swigopt.h"
#include "swigmod.h"
#include "swigfile.h"


  
  void
  exit_with_Fail()
  {
    SWIG_exit (EXIT_FAILURE);
  }


  void
  do_base_top (Language*    Self,
               Node*        node)
  {
    Self->Language::top (node);
  }


#undef protected
#undef private
#ifdef __cplusplus 
extern "C" {
#endif
DllExport void SWIGSTDCALL Ada_delete_Dispatcher (
  void * jarg1
  )
{
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  
  arg1 = (Dispatcher *)jarg1; 
  
  delete arg1;
  
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_emit_one (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::emit_one(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_emit_children (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::emit_children(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_defaultHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::defaultHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_top (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->top(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_applyDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::applyDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_clearDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::clearDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_constantDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::constantDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_extendDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::extendDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_fragmentDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::fragmentDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_importDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::importDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_includeDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::includeDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_insertDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::insertDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_moduleDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::moduleDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_nativeDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::nativeDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_pragmaDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::pragmaDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_typemapDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::typemapDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_typemapitemDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::typemapitemDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_typemapcopyDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::typemapcopyDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_typesDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::typesDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_cDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::cDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_externDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::externDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_enumDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::enumDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_enumvalueDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::enumvalueDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_enumforwardDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::enumforwardDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_classDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::classDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_classforwardDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::classforwardDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_constructorDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::constructorDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_destructorDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::destructorDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_accessDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::accessDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_usingDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::usingDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_namespaceDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::namespaceDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Dispatcher_templateDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Dispatcher::templateDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_new_Language (
  )
{
  void * jresult ;
  Language *result = 0 ;
  
  result = (Language *)new Language();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_delete_Language (
  void * jarg1
  )
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  
  delete arg1;
  
  
}



DllExport int SWIGSTDCALL Ada_Language_emit_one (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::emit_one(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_Language_main (
  void * jarg1
  ,
  
  int jarg2
  ,
  
  void * jarg3
  )
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  char **arg3 ;
  
  arg1 = (Language *)jarg1; 
  
  
  arg2 = (int) jarg2; 
  
  
  arg3      = (char **) jarg3; 
  
  (arg1)->Language::main(arg2,arg3);
  
  
}



DllExport int SWIGSTDCALL Ada_Language_top (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::top(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_applyDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::applyDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_clearDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::clearDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_constantDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::constantDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_extendDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::extendDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_fragmentDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::fragmentDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_importDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::importDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_includeDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::includeDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_insertDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::insertDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_moduleDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::moduleDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_nativeDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::nativeDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_pragmaDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::pragmaDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_typemapDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::typemapDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_typemapcopyDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::typemapcopyDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_typesDirective (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::typesDirective(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_cDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::cDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_externDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::externDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_enumDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::enumDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_enumvalueDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::enumvalueDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_enumforwardDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::enumforwardDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classforwardDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classforwardDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_constructorDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::constructorDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_destructorDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::destructorDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_accessDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::accessDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_namespaceDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::namespaceDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_usingDeclaration (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::usingDeclaration(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_functionHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::functionHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_globalfunctionHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::globalfunctionHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_memberfunctionHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::memberfunctionHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_staticmemberfunctionHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::staticmemberfunctionHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_callbackfunctionHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::callbackfunctionHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_variableHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::variableHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_globalvariableHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::globalvariableHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_membervariableHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::membervariableHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_staticmembervariableHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::staticmembervariableHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_memberconstantHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::memberconstantHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_constructorHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::constructorHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_copyconstructorHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::copyconstructorHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_destructorHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::destructorHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_typedefHandler (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::typedefHandler(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_constantWrapper (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::constantWrapper(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_variableWrapper (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::variableWrapper(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_functionWrapper (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::functionWrapper(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_nativeWrapper (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::nativeWrapper(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classDirector (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classDirector(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classDirectorInit (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classDirectorInit(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classDirectorEnd (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classDirectorEnd(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_unrollVirtualMethods__SWIG_0 (
  void * jarg1
  ,
  
  void* jarg2
  ,
  
  void* jarg3
  ,
  
  void* jarg4
  ,
  
  int jarg5
  ,
  
  int* jarg6
  ,
  
  int jarg7
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *arg3 = (Node *) 0 ;
  List *arg4 = (List *) 0 ;
  int arg5 ;
  int *arg6 = 0 ;
  int arg7 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  arg3 = (Node *)jarg3; 
  
  arg4 = (List *)jarg4; 
  
  
  arg5 = (int) jarg5; 
  
  
  
  arg6 = (int *)jarg6;
  
  
  
  arg7 = (int) jarg7; 
  
  
  result = (int)(arg1)->Language::unrollVirtualMethods(arg2,arg3,arg4,arg5,*arg6,arg7);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_unrollVirtualMethods__SWIG_1 (
  void * jarg1
  ,
  
  void* jarg2
  ,
  
  void* jarg3
  ,
  
  void* jarg4
  ,
  
  int jarg5
  ,
  
  int* jarg6
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *arg3 = (Node *) 0 ;
  List *arg4 = (List *) 0 ;
  int arg5 ;
  int *arg6 = 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  arg3 = (Node *)jarg3; 
  
  arg4 = (List *)jarg4; 
  
  
  arg5 = (int) jarg5; 
  
  
  
  arg6 = (int *)jarg6;
  
  
  result = (int)(arg1)->Language::unrollVirtualMethods(arg2,arg3,arg4,arg5,*arg6);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classDirectorConstructor (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classDirectorConstructor(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classDirectorDefaultConstructor (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classDirectorDefaultConstructor(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classDirectorMethod (
  void * jarg1
  ,
  
  void* jarg2
  ,
  
  void* jarg3
  ,
  
  void* jarg4
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *arg3 = (Node *) 0 ;
  String *arg4 = (String *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  arg3 = (Node *)jarg3; 
  
  arg4 = (String *)jarg4; 
  
  result = (int)(arg1)->Language::classDirectorMethod(arg2,arg3,arg4);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classDirectorConstructors (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classDirectorConstructors(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classDirectorDestructor (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classDirectorDestructor(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classDirectorMethods (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classDirectorMethods(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_classDirectorDisown (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::classDirectorDisown(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_validIdentifier (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (String *)jarg2; 
  
  result = (int)(arg1)->Language::validIdentifier(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_addSymbol (
  void * jarg1
  ,
  
  void* jarg2
  ,
  
  void* jarg3
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  Node *arg3 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (String *)jarg2; 
  
  arg3 = (Node *)jarg3; 
  
  result = (int)(arg1)->Language::addSymbol((String const *)arg2,(Node const *)arg3);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Language_symbolLookup (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  void* jresult ;
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (String *)jarg2; 
  
  result = (Node *)(arg1)->Language::symbolLookup(arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Language_classLookup (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  void* jresult ;
  Language *arg1 = (Language *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (SwigType *)jarg2; 
  
  result = (Node *)(arg1)->Language::classLookup(arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Language_enumLookup (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  void* jresult ;
  Language *arg1 = (Language *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (SwigType *)jarg2; 
  
  result = (Node *)(arg1)->Language::enumLookup(arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_abstractClassTest (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::abstractClassTest(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_is_assignable (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::is_assignable(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Language_runtimeCode (
  void * jarg1
  )
{
  void* jresult ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  
  result = (String *)(arg1)->Language::runtimeCode();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Language_defaultExternalRuntimeFilename (
  void * jarg1
  )
{
  void* jresult ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  
  result = (String *)(arg1)->Language::defaultExternalRuntimeFilename();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_Language_enable_cplus_runtime_mode (
  void * jarg1
  )
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  
  (arg1)->Language::enable_cplus_runtime_mode();
  
  
}



DllExport int SWIGSTDCALL Ada_Language_cplus_runtime_mode (
  void * jarg1
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  result = (int)(arg1)->Language::cplus_runtime_mode();
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_Language_allow_protected_and_private_Members (
  void * jarg1
  )
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  
  (arg1)->Language::allow_protected_and_private_Members();
  
  
}



DllExport void SWIGSTDCALL Ada_Language_allow_directors__SWIG_0 (
  void * jarg1
  ,
  
  int jarg2
  )
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  
  arg2 = (int) jarg2; 
  
  
  (arg1)->Language::allow_directors(arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_Language_allow_directors__SWIG_1 (
  void * jarg1
  )
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  
  (arg1)->Language::allow_directors();
  
  
}



DllExport int SWIGSTDCALL Ada_Language_directorsEnabled (
  void * jarg1
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  result = (int)((Language const *)arg1)->Language::directorsEnabled();
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_Language_allow_dirprot__SWIG_0 (
  void * jarg1
  ,
  
  int jarg2
  )
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  
  arg2 = (int) jarg2; 
  
  
  (arg1)->Language::allow_dirprot(arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_Language_allow_dirprot__SWIG_1 (
  void * jarg1
  )
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  
  (arg1)->Language::allow_dirprot();
  
  
}



DllExport void SWIGSTDCALL Ada_Language_allow_allprotected__SWIG_0 (
  void * jarg1
  ,
  
  int jarg2
  )
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  
  arg2 = (int) jarg2; 
  
  
  (arg1)->Language::allow_allprotected(arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_Language_allow_allprotected__SWIG_1 (
  void * jarg1
  )
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  
  (arg1)->Language::allow_allprotected();
  
  
}



DllExport int SWIGSTDCALL Ada_Language_dirprot_mode (
  void * jarg1
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  result = (int)((Language const *)arg1)->Language::dirprot_mode();
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_need_nonpublic_ctor (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::need_nonpublic_ctor(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_need_nonpublic_member (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)(arg1)->Language::need_nonpublic_member(arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_Language_setSubclassInstanceCheck (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (String *)jarg2; 
  
  (arg1)->Language::setSubclassInstanceCheck(arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_Language_setOverloadResolutionTemplates (
  void * jarg1
  ,
  
  void* jarg2
  ,
  
  void* jarg3
  )
{
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (String *)jarg2; 
  
  arg3 = (String *)jarg3; 
  
  (arg1)->Language::setOverloadResolutionTemplates(arg2,arg3);
  
  
}



DllExport void SWIGSTDCALL Ada_Language_allow_multiple_input__SWIG_0 (
  void * jarg1
  ,
  
  int jarg2
  )
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  
  arg2 = (int) jarg2; 
  
  
  (arg1)->Language::allow_multiple_input(arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_Language_allow_multiple_input__SWIG_1 (
  void * jarg1
  )
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  
  (arg1)->Language::allow_multiple_input();
  
  
}



DllExport void SWIGSTDCALL Ada_Language_allow_overloading__SWIG_0 (
  void * jarg1
  ,
  
  int jarg2
  )
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  
  arg2 = (int) jarg2; 
  
  
  (arg1)->Language::allow_overloading(arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_Language_allow_overloading__SWIG_1 (
  void * jarg1
  )
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  
  (arg1)->Language::allow_overloading();
  
  
}



DllExport int SWIGSTDCALL Ada_Language_is_wrapping_class (
  void * jarg1
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  result = (int)(arg1)->Language::is_wrapping_class();
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Language_getCurrentClass (
  void * jarg1
  )
{
  void* jresult ;
  Language *arg1 = (Language *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  
  result = (Node *)((Language const *)arg1)->Language::getCurrentClass();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Language_getClassName (
  void * jarg1
  )
{
  void* jresult ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  
  result = (String *)((Language const *)arg1)->Language::getClassName();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Language_getClassHash (
  void * jarg1
  )
{
  void* jresult ;
  Language *arg1 = (Language *) 0 ;
  Hash *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  
  result = (Hash *)((Language const *)arg1)->Language::getClassHash();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Language_getClassPrefix (
  void * jarg1
  )
{
  void* jresult ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  
  result = (String *)((Language const *)arg1)->Language::getClassPrefix();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Language_getClassType (
  void * jarg1
  )
{
  void* jresult ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  
  result = (String *)((Language const *)arg1)->Language::getClassType();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Language_is_smart_pointer (
  void * jarg1
  )
{
  int jresult ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  
  result = (int)((Language const *)arg1)->Language::is_smart_pointer();
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport unsigned int SWIGSTDCALL Ada_Language_extraDirectorProtectedCPPMethodsRequired (
  void * jarg1
  )
{
  unsigned int jresult ;
  Language *arg1 = (Language *) 0 ;
  bool result;
  
  arg1 = (Language *)jarg1; 
  
  result = (bool)((Language const *)arg1)->Language::extraDirectorProtectedCPPMethodsRequired();
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Lang_CurrentClass (
  )
{
  void* jresult ;
  Node *result = 0 ;
  
  result = (Node *)Lang_CurrentClass();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Lang_ClassName (
  )
{
  void* jresult ;
  String *result = 0 ;
  
  result = (String *)Lang_ClassName();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Lang_AddExtern (
  )
{
  int jresult ;
  int result;
  
  result = (int)Lang_AddExtern();
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_Lang_ForceExtern (
  )
{
  int jresult ;
  int result;
  
  result = (int)Lang_ForceExtern();
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Lang_first_nontemplate (
  void* jarg1
  )
{
  void* jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  
  result = (Node *)Lang_first_nontemplate(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_SWIG_main (
  int jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  )
{
  int jresult ;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  Language *arg3 = (Language *) 0 ;
  int result;
  
  
  arg1 = (int) jarg1; 
  
  
  arg2 = (char **)jarg2; 
  
  arg3 = (Language *)jarg3; 
  
  result = (int)SWIG_main(arg1,arg2,arg3);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_emit_parameter_variables (
  void* jarg1
  ,
  
  void * jarg2
  )
{
  ParmList *arg1 = (ParmList *) 0 ;
  Wrapper *arg2 = (Wrapper *) 0 ;
  
  arg1 = (ParmList *)jarg1; 
  
  arg2 = (Wrapper *)jarg2; 
  
  emit_parameter_variables(arg1,arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_emit_return_variable (
  void* jarg1
  ,
  
  void* jarg2
  ,
  
  void * jarg3
  )
{
  Node *arg1 = (Node *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  Wrapper *arg3 = (Wrapper *) 0 ;
  
  arg1 = (Node *)jarg1; 
  
  arg2 = (SwigType *)jarg2; 
  
  arg3 = (Wrapper *)jarg3; 
  
  emit_return_variable(arg1,arg2,arg3);
  
  
}



DllExport void SWIGSTDCALL Ada_SWIG_exit (
  int jarg1
  )
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  
  SWIG_exit(arg1);
  
  
}



DllExport void SWIGSTDCALL Ada_SWIG_config_file (
  void* jarg1
  )
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  
  SWIG_config_file((void const *)arg1);
  
  
}



DllExport void* SWIGSTDCALL Ada_SWIG_output_directory (
  )
{
  void* jresult ;
  String *result = 0 ;
  
  result = (String *)SWIG_output_directory();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_SWIG_config_cppext (
  char * jarg1
  )
{
  char *arg1 = (char *) 0 ;
  
  arg1 = jarg1; 
  
  SWIG_config_cppext((char const *)arg1);
  
  
}



DllExport void SWIGSTDCALL Ada_SWIG_library_directory (
  char * jarg1
  )
{
  char *arg1 = (char *) 0 ;
  
  arg1 = jarg1; 
  
  SWIG_library_directory((char const *)arg1);
  
  
}



DllExport int SWIGSTDCALL Ada_emit_num_arguments (
  void* jarg1
  )
{
  int jresult ;
  ParmList *arg1 = (ParmList *) 0 ;
  int result;
  
  arg1 = (ParmList *)jarg1; 
  
  result = (int)emit_num_arguments(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_emit_num_required (
  void* jarg1
  )
{
  int jresult ;
  ParmList *arg1 = (ParmList *) 0 ;
  int result;
  
  arg1 = (ParmList *)jarg1; 
  
  result = (int)emit_num_required(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_emit_isvarargs (
  void* jarg1
  )
{
  int jresult ;
  ParmList *arg1 = (ParmList *) 0 ;
  int result;
  
  arg1 = (ParmList *)jarg1; 
  
  result = (int)emit_isvarargs(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_emit_attach_parmmaps (
  void* jarg1
  ,
  
  void * jarg2
  )
{
  ParmList *arg1 = (ParmList *) 0 ;
  Wrapper *arg2 = (Wrapper *) 0 ;
  
  arg1 = (ParmList *)jarg1; 
  
  arg2 = (Wrapper *)jarg2; 
  
  emit_attach_parmmaps(arg1,arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_emit_mark_varargs (
  void* jarg1
  )
{
  ParmList *arg1 = (ParmList *) 0 ;
  
  arg1 = (ParmList *)jarg1; 
  
  emit_mark_varargs(arg1);
  
  
}



DllExport void* SWIGSTDCALL Ada_emit_action (
  void* jarg1
  )
{
  void* jresult ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  
  result = (String *)emit_action(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_emit_action_code (
  void* jarg1
  ,
  
  void* jarg2
  ,
  
  void* jarg3
  )
{
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  
  arg2 = (String *)jarg2; 
  
  arg3 = (String *)jarg3; 
  
  result = (int)emit_action_code(arg1,arg2,arg3);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_Swig_overload_check (
  void* jarg1
  )
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  
  Swig_overload_check(arg1);
  
  
}



DllExport void* SWIGSTDCALL Ada_Swig_overload_dispatch (
  void* jarg1
  ,
  
  void* jarg2
  ,
  
  int* jarg3
  )
{
  void* jresult ;
  Node *arg1 = (Node *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  int *arg3 = (int *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  
  arg2 = (String_or_char *)jarg2; 
  
  
  arg3 = (int *) jarg3;
  
  
  result = (String *)Swig_overload_dispatch(arg1,(void const *)arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Swig_overload_dispatch_cast (
  void* jarg1
  ,
  
  void* jarg2
  ,
  
  int* jarg3
  )
{
  void* jresult ;
  Node *arg1 = (Node *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  int *arg3 = (int *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  
  arg2 = (String_or_char *)jarg2; 
  
  
  arg3 = (int *) jarg3;
  
  
  result = (String *)Swig_overload_dispatch_cast(arg1,(void const *)arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Swig_overload_dispatch_fast (
  void* jarg1
  ,
  
  void* jarg2
  ,
  
  int* jarg3
  )
{
  void* jresult ;
  Node *arg1 = (Node *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  int *arg3 = (int *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  
  arg2 = (String_or_char *)jarg2; 
  
  
  arg3 = (int *) jarg3;
  
  
  result = (String *)Swig_overload_dispatch_fast(arg1,(void const *)arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_cplus_value_type (
  void* jarg1
  )
{
  void* jresult ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  
  result = (SwigType *)cplus_value_type(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Swig_csuperclass_call (
  void* jarg1
  ,
  
  void* jarg2
  ,
  
  void* jarg3
  )
{
  void* jresult ;
  String *arg1 = (String *) 0 ;
  String *arg2 = (String *) 0 ;
  ParmList *arg3 = (ParmList *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  
  arg2 = (String *)jarg2; 
  
  arg3 = (ParmList *)jarg3; 
  
  result = (String *)Swig_csuperclass_call(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Swig_class_declaration (
  void* jarg1
  ,
  
  void* jarg2
  )
{
  void* jresult ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  
  arg2 = (String *)jarg2; 
  
  result = (String *)Swig_class_declaration(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Swig_class_name (
  void* jarg1
  )
{
  void* jresult ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  
  result = (String *)Swig_class_name(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Swig_method_call (
  void* jarg1
  ,
  
  void* jarg2
  )
{
  void* jresult ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  
  arg2 = (ParmList *)jarg2; 
  
  result = (String *)Swig_method_call(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Swig_method_decl (
  void* jarg1
  ,
  
  void* jarg2
  ,
  
  void* jarg3
  ,
  
  void* jarg4
  ,
  
  int jarg5
  ,
  
  int jarg6
  )
{
  void* jresult ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  List *arg4 = (List *) 0 ;
  int arg5 ;
  int arg6 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  
  arg2 = (SwigType *)jarg2; 
  
  arg3 = (String_or_char *)jarg3; 
  
  arg4 = (List *)jarg4; 
  
  
  arg5 = (int) jarg5; 
  
  
  
  arg6 = (int) jarg6; 
  
  
  result = (String *)Swig_method_decl(arg1,arg2,(void const *)arg3,arg4,arg5,arg6);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void* SWIGSTDCALL Ada_Swig_director_declaration (
  void* jarg1
  )
{
  void* jresult ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  
  result = (String *)Swig_director_declaration(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_Swig_director_emit_dynamic_cast (
  void* jarg1
  ,
  
  void * jarg2
  )
{
  Node *arg1 = (Node *) 0 ;
  Wrapper *arg2 = (Wrapper *) 0 ;
  
  arg1 = (Node *)jarg1; 
  
  arg2 = (Wrapper *)jarg2; 
  
  Swig_director_emit_dynamic_cast(arg1,arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_SWIG_typemap_lang (
  char * jarg1
  )
{
  char *arg1 = (char *) 0 ;
  
  arg1 = jarg1; 
  
  SWIG_typemap_lang((char const *)arg1);
  
  
}



DllExport int SWIGSTDCALL Ada_is_public (
  void* jarg1
  )
{
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  
  result = (int)is_public(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_is_private (
  void* jarg1
  )
{
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  
  result = (int)is_private(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_is_protected (
  void* jarg1
  )
{
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  
  result = (int)is_protected(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_is_member_director__SWIG_0 (
  void* jarg1
  ,
  
  void* jarg2
  )
{
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  result = (int)is_member_director(arg1,arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_is_member_director__SWIG_1 (
  void* jarg1
  )
{
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  
  result = (int)is_member_director(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_is_non_virtual_protected_access (
  void* jarg1
  )
{
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  
  result = (int)is_non_virtual_protected_access(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_use_naturalvar_mode (
  void* jarg1
  )
{
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  
  result = (int)use_naturalvar_mode(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_Wrapper_virtual_elimination_mode_set (
  int jarg1
  )
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  
  Wrapper_virtual_elimination_mode_set(arg1);
  
  
}



DllExport void SWIGSTDCALL Ada_Wrapper_fast_dispatch_mode_set (
  int jarg1
  )
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  
  Wrapper_fast_dispatch_mode_set(arg1);
  
  
}



DllExport void SWIGSTDCALL Ada_Wrapper_cast_dispatch_mode_set (
  int jarg1
  )
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  
  Wrapper_cast_dispatch_mode_set(arg1);
  
  
}



DllExport void SWIGSTDCALL Ada_Wrapper_naturalvar_mode_set (
  int jarg1
  )
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  
  Wrapper_naturalvar_mode_set(arg1);
  
  
}



DllExport void SWIGSTDCALL Ada_clean_overloaded (
  void* jarg1
  )
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  
  clean_overloaded(arg1);
  
  
}



DllExport void SWIGSTDCALL Ada_Swig_contracts (
  void* jarg1
  )
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  
  Swig_contracts(arg1);
  
  
}



DllExport void SWIGSTDCALL Ada_Swig_contract_mode_set (
  int jarg1
  )
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  
  Swig_contract_mode_set(arg1);
  
  
}



DllExport int SWIGSTDCALL Ada_Swig_contract_mode_get (
  )
{
  int jresult ;
  int result;
  
  result = (int)Swig_contract_mode_get();
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_Swig_browser (
  void* jarg1
  ,
  
  int jarg2
  )
{
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  
  
  arg2 = (int) jarg2; 
  
  
  Swig_browser(arg1,arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_Swig_default_allocators (
  void* jarg1
  )
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  
  Swig_default_allocators(arg1);
  
  
}



DllExport void SWIGSTDCALL Ada_Swig_process_types (
  void* jarg1
  )
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  
  Swig_process_types(arg1);
  
  
}



DllExport void SWIGSTDCALL Ada_exit_with_Fail (
  )
{
  exit_with_Fail();
  
  
}



DllExport void SWIGSTDCALL Ada_do_base_top (
  void * jarg1
  ,
  
  void* jarg2
  )
{
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (Node *)jarg2; 
  
  do_base_top(arg1,arg2);
  
  
}



#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif
extern Language    gnat_new_Language()
{
  return Language();
}


#ifdef __cplusplus
}
#endif

