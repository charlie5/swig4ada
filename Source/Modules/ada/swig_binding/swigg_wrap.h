/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_swigg_module_WRAP_H_
#define SWIG_swigg_module_WRAP_H_

class SwigDirector_Dispatcher : public Dispatcher, public Swig::Director {

public:
    void swig_connect_director (void*    ada_Self, bool swig_mem_own, bool weak_global);
    SwigDirector_Dispatcher();
    virtual int moduleDirective(Node *n);
    virtual int insertDirective(Node *n);
    virtual int includeDirective(Node *n);
    virtual int importDirective(Node *n);
    virtual int fragmentDirective(Node *n);
    virtual int extendDirective(Node *n);
    virtual int constantDirective(Node *n);
    virtual int clearDirective(Node *n);
    virtual int applyDirective(Node *n);
    virtual int top(Node *n);
    virtual int defaultHandler(Node *n);
    virtual int emit_children(Node *n);
    virtual int emit_one(Node *n);
    virtual int nativeDirective(Node *n);
    virtual int pragmaDirective(Node *n);
    virtual int typemapDirective(Node *n);
    virtual int typemapitemDirective(Node *n);
    virtual int typemapcopyDirective(Node *n);
    virtual int typesDirective(Node *n);
    virtual int cDeclaration(Node *n);
    virtual int externDeclaration(Node *n);
    virtual int enumDeclaration(Node *n);
    virtual int enumvalueDeclaration(Node *n);
    virtual int enumforwardDeclaration(Node *n);
    virtual int classDeclaration(Node *n);
    virtual int classforwardDeclaration(Node *n);
    virtual int constructorDeclaration(Node *n);
    virtual int destructorDeclaration(Node *n);
    virtual int accessDeclaration(Node *n);
    virtual int usingDeclaration(Node *n);
    virtual int namespaceDeclaration(Node *n);
    virtual int templateDeclaration(Node *n);
    virtual ~SwigDirector_Dispatcher();
public:
    bool swig_overrides(int n) {
      return (n < 32 ? swig_override[n] : false);
    }
protected:
    bool swig_override[32];
};

class SwigDirector_Language : public Language, public Swig::Director {

public:
    void swig_connect_director (void*    ada_Self, bool swig_mem_own, bool weak_global);
    SwigDirector_Language();
    virtual String *defaultExternalRuntimeFilename();
    virtual int addSymbol(String const *s, Node const *n);
    virtual bool extraDirectorProtectedCPPMethodsRequired() const;
    virtual ~SwigDirector_Language();
    virtual void main(int argc, char *argv[]);
    virtual int unrollVirtualMethods(Node *n, Node *parent, List *vm, int default_director, int &virtual_destructor);
    virtual int unrollVirtualMethods(Node *n, Node *parent, List *vm, int default_director, int &virtual_destructor, int protectedbase = 0);
    virtual String *runtimeCode();
    virtual int is_assignable(Node *n);
    virtual int abstractClassTest(Node *n);
    virtual Node *enumLookup(SwigType *s);
    virtual Node *classLookup(SwigType *s);
    virtual Node *symbolLookup(String *s);
    virtual int validIdentifier(String *s);
    virtual int classDirectorDisown(Node *n);
    virtual int classDirectorMethods(Node *n);
    virtual int classDirectorDestructor(Node *n);
    virtual int classDirectorConstructors(Node *n);
    virtual int classDirectorMethod(Node *n, Node *parent, String *super);
    virtual int classDirectorDefaultConstructor(Node *n);
    virtual int classDirectorConstructor(Node *n);
    virtual int classDirectorEnd(Node *n);
    virtual int classDirectorInit(Node *n);
    virtual int classDirector(Node *n);
    virtual int nativeWrapper(Node *n);
    virtual int functionWrapper(Node *n);
    virtual int variableWrapper(Node *n);
    virtual int constantWrapper(Node *n);
    virtual int typedefHandler(Node *n);
    virtual int classHandler(Node *n);
    virtual int destructorHandler(Node *n);
    virtual int copyconstructorHandler(Node *n);
    virtual int constructorHandler(Node *n);
    virtual int memberconstantHandler(Node *n);
    virtual int staticmembervariableHandler(Node *n);
    virtual int membervariableHandler(Node *n);
    virtual int globalvariableHandler(Node *n);
    virtual int variableHandler(Node *n);
    virtual int callbackfunctionHandler(Node *n);
    virtual int staticmemberfunctionHandler(Node *n);
    virtual int memberfunctionHandler(Node *n);
    virtual int globalfunctionHandler(Node *n);
    virtual int functionHandler(Node *n);
    virtual int usingDeclaration(Node *n);
    virtual int namespaceDeclaration(Node *n);
    virtual int accessDeclaration(Node *n);
    virtual int destructorDeclaration(Node *n);
    virtual int constructorDeclaration(Node *n);
    virtual int classforwardDeclaration(Node *n);
    virtual int classDeclaration(Node *n);
    virtual int enumforwardDeclaration(Node *n);
    virtual int enumvalueDeclaration(Node *n);
    virtual int enumDeclaration(Node *n);
    virtual int externDeclaration(Node *n);
    virtual int cDeclaration(Node *n);
    virtual int typesDirective(Node *n);
    virtual int typemapcopyDirective(Node *n);
    virtual int typemapDirective(Node *n);
    virtual int pragmaDirective(Node *n);
    virtual int nativeDirective(Node *n);
    virtual int moduleDirective(Node *n);
    virtual int insertDirective(Node *n);
    virtual int includeDirective(Node *n);
    virtual int importDirective(Node *n);
    virtual int fragmentDirective(Node *n);
    virtual int extendDirective(Node *n);
    virtual int constantDirective(Node *n);
    virtual int clearDirective(Node *n);
    virtual int applyDirective(Node *n);
    virtual int top(Node *n);
    virtual int defaultHandler(Node *n);
    virtual int emit_children(Node *n);
    virtual int typemapitemDirective(Node *n);
    virtual int templateDeclaration(Node *n);
    virtual int emit_one(Node *n);
public:
    bool swig_overrides(int n) {
      return (n < 74 ? swig_override[n] : false);
    }
protected:
    bool swig_override[74];
};


#endif
