/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#if defined(_WIN32) || defined(__CYGWIN32__)
#  define DllExport   __declspec( dllexport )
#  define SWIGSTDCALL __stdcall
#else
#  define DllExport  
#  define SWIGSTDCALL
#endif 



/* Support for throwing Ada exceptions from C/C++ */

typedef enum 
{
  SWIG_AdaException,
  SWIG_AdaOutOfMemoryException,
  SWIG_AdaIndexOutOfRangeException,
  SWIG_AdaDivideByZeroException,
  SWIG_AdaArgumentOutOfRangeException,
  SWIG_AdaNullReferenceException
} SWIG_AdaExceptionCodes;


typedef void (SWIGSTDCALL* SWIG_AdaExceptionCallback_t)(const char *);


typedef struct 
{
  SWIG_AdaExceptionCodes code;
  SWIG_AdaExceptionCallback_t callback;
} 
  SWIG_AdaExceptions_t;


static 
SWIG_AdaExceptions_t 
SWIG_ada_exceptions[] = 
{
  { SWIG_AdaException, NULL },
  { SWIG_AdaOutOfMemoryException, NULL },
  { SWIG_AdaIndexOutOfRangeException, NULL },
  { SWIG_AdaDivideByZeroException, NULL },
  { SWIG_AdaArgumentOutOfRangeException, NULL },
  { SWIG_AdaNullReferenceException, NULL } 
};


static 
void 
SWIG_AdaThrowException (SWIG_AdaExceptionCodes code, const char *msg) 
{
  SWIG_AdaExceptionCallback_t callback = SWIG_ada_exceptions[SWIG_AdaException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_ada_exceptions)/sizeof(SWIG_AdaExceptions_t)) {
    callback = SWIG_ada_exceptions[code].callback;
  }
  callback(msg);
}



#ifdef __cplusplus
extern "C" 
#endif

DllExport void SWIGSTDCALL SWIGRegisterExceptionCallbacks_swigg_module (SWIG_AdaExceptionCallback_t systemException,
                                                                   SWIG_AdaExceptionCallback_t outOfMemory, 
                                                                   SWIG_AdaExceptionCallback_t indexOutOfRange, 
                                                                   SWIG_AdaExceptionCallback_t divideByZero, 
                                                                   SWIG_AdaExceptionCallback_t argumentOutOfRange,
                                                                   SWIG_AdaExceptionCallback_t nullReference) 
{
  SWIG_ada_exceptions [SWIG_AdaException].callback                   = systemException;
  SWIG_ada_exceptions [SWIG_AdaOutOfMemoryException].callback        = outOfMemory;
  SWIG_ada_exceptions [SWIG_AdaIndexOutOfRangeException].callback    = indexOutOfRange;
  SWIG_ada_exceptions [SWIG_AdaDivideByZeroException].callback       = divideByZero;
  SWIG_ada_exceptions [SWIG_AdaArgumentOutOfRangeException].callback = argumentOutOfRange;
  SWIG_ada_exceptions [SWIG_AdaNullReferenceException].callback      = nullReference;
}


/* Callback for returning strings to Ada without leaking memory */

typedef char * (SWIGSTDCALL* SWIG_AdaStringHelperCallback)(const char *);
static SWIG_AdaStringHelperCallback SWIG_ada_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
DllExport void SWIGSTDCALL SWIGRegisterStringCallback_swigg_module(SWIG_AdaStringHelperCallback callback) {
  SWIG_ada_string_callback = callback;
}

/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_AdaThrowException(SWIG_AdaArgumentOutOfRangeException, msg); return nullreturn; } else


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {

  // director base class
  //
  class Director
  {
  public:

    Director () : swig_self_ (NULL)
    {}

    virtual 
   ~Director() 
    {
      // swig_self_.release (swig_acquire_jenv());
    }

    void
    swig_set_self (void*    Self)
    {
      swig_self_ = Self;
    }

    void* 
    swig_get_self () const
    {
      return swig_self_;
    }

    // Change C++ object's ownership, relative to Java
    void 
    swig_java_change_ownership (void*     Self,    
                                bool      take_or_release) 
    {
      //swig_self_.java_change_ownership(jenv, jself, take_or_release);
      ; //tbd: make appropriate ada call
    }


  protected:

    void* swig_self_;    // Ada object pointer

    // Disconnect director from Java object
    //
    void 
    swig_disconnect_director_self (const char*    disconn_method) 
    {
    ; //tbd: make appropriate ada call 
    
//      if (swig_self_ != NULL)
//      {
//        jmethodID        disconn_meth = jenv->GetMethodID (jenv->GetObjectClass (jobj),  disconn_method,  "()V");
        
//        if (disconn_meth) 
//        {
//          jenv->CallVoidMethod (jobj, disconn_meth);
//        }
//      }
    }

  };
}

#endif /* __cplusplus */



//#include "doh.h"
//#include "dohint.h"

#include "swigconfig.h"
#include "swigwarn.h"

#include "swig.h"
#include "preprocessor.h"

#include "swigtree.h"
#include "swigopt.h"
#include "swigmod.h"
#include "swigfile.h"
//#include "swigwrap.h"



  #include <execinfo.h>


  int
  runtime_call_Depth ()
  {
    //void*      the_Backtrace [5000];
    //int        Count               = backtrace (the_Backtrace, 5000);  // tbd: mem leak ?

    return 0; // Count;  
  }





  char*
  String_in (char*    the_string_Array[],
             int      at_Index)
  {
    return the_string_Array [at_Index];
  }




  String*
  c_to_doh_String (char*    c_String)
  {
    return NewStringf ("%s", c_String);
  }





  Node*
  get_attribute (Node*      node,
                 String*    key)
  {
    return Getattr (node, key);
  }



  void
  set_attribute (Node*      node,
                 String*    key,
                 String*    value)
  {
    Setattr (node, key, value);
  }





  bool
  check_attribute (Node*      node,
                   String*    key,
                   String*    value)
  {
    return checkAttribute (node, key, value);
  }

                 



  char*
  Node_to_CStr (Node*    node)
  {
    return Char (node);
  }




  DOH*
  node_Type (Node*    node)
  {
    return nodeType (node);
  }



  Node*
  parent_Node (Node*    node)
  {
    return parentNode (node);
  }





  File*
  new_File (String*    name,
            char*      mode)
  {
    return NewFile (name, mode);

  }



  void
  Print_to (String*    Self,
            char*      the_Text)
  {
    Printv (Self,  the_Text, "\n", NIL);
  }



  void
  dump (File*    from,
        File*    to)
  {
    Dump (from, to);
  }
  


  void
  close_File (File*    Self)
  {
    Close (Self);
  }
  



  void
  doh_replace_All (DOH*            Self,
                   String*         Pattern,
                   String*         Substitute)
  {
    DohReplace (Self,  Pattern, Substitute,  DOH_REPLACE_ANY);
  }





  DOH*
  doh_Copy (DOH*    Self)
  {
    return Copy (Self);
  }






  //extern int  Swig_save(const char *ns, Node *node,...);

  void
  Swig_save_1 (char*    name_Space, 
               Node*    the_Node, 
               char*    Value)
  {
    Swig_save (name_Space, the_Node, Value, NIL);
  }



  void 
  Swig_require_2 (const char*    name_Space, 
                  Node*          the_Node, 
                  String*        Value_1,
                  String*        Value_2)
  {
    Swig_require (name_Space, the_Node, Value_1, Value_2, NIL);
  }




//extern void Swig_restore(Node *node);






  void 
  Wrapper_add_local_2 (Wrapper*                 the_Wrapper, 
                       const String_or_char*    Name,
                       char*                    Item_1,
                       char*                    Item_2)
  {
    Wrapper_add_localv (the_Wrapper,  Name,  Item_1, Item_2,  NIL);
  }



  


  Node*
  first_Child (Node*   Self)
  {
    return firstChild (Self);
  }




  Node*
  next_Sibling (Node*   Self)
  {
    return nextSibling (Self);
  }





  void
  exit_with_Fail()
  {
    SWIG_exit (EXIT_FAILURE);
  }





  // doh iterators
  //


  DohIterator
  doh_First (DOH*    obj)
  {
    return DohFirst (obj);
  }


  DohIterator
  doh_Next (DohIterator    iter)
  {
    return DohNext (iter);
  }



  DOH*
  get_Item (DohIterator    Self)
  {
    return Self.item;
  }





  // the 'do_base_*' functions are a hack to overcome the swig/ada modules inability to handle calling overridden base functions.
  //


  void
  do_base_top (Language*    Self,
               Node*        node)
  {
    Self->Language::top (node);
  }



  void
  do_base_enumDeclaration (Language*    Self,
                           Node*        node)
  {
    Self->Language::enumDeclaration (node);
  }



  void
  do_base_classHandler (Language*    Self,
                        Node*        node)
  {
    Self->Language::classHandler (node);
  }




  void
  do_base_memberfunctionHandler (Language*    Self,
                                 Node*        node)
  {
    Self->Language::memberfunctionHandler (node);
  }




  void
  do_base_staticmemberfunctionHandler (Language*    Self,
                                       Node*        node)
  {
    Self->Language::staticmemberfunctionHandler (node);
  }





  void
  do_base_constructorHandler (Language*    Self,
                              Node*        node)
  {
    Self->Language::constructorHandler (node);
  }





  void
  do_base_destructorHandler (Language*    Self,
                              Node*        node)
  {
    Self->Language::destructorHandler (node);
  }





  void
  do_base_memberconstantHandler (Language*    Self,
                                 Node*        node)
  {
    Self->Language::memberconstantHandler (node);
  }


  int
  do_base_insertDirective (Language*    Self,
                           Node*        node)
  {
    return Self->Language::insertDirective (node);
  }


  int
  do_base_typemapDirective (Language*    Self,
                            Node*        node)
  {
    return Self->Language::typemapDirective (node);
  }


  void
  do_base_namespaceDeclaration (Language*    Self,
                                 Node*        node)
  {
    Self->Language::namespaceDeclaration (node);
  }



  void
  do_base_includeDirective (Language*    Self,
                            Node*        node)
  {
    Self->Language::includeDirective (node);
  }



#include "ada_proxy_c_imports.h"

/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "swigg_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

DllExport int SWIGSTDCALL Ada_runtime_call_Depth()
{
  int jresult = 0 ;
  int result;
  
  result = (int)runtime_call_Depth();
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_String_in(void * jarg1,
  int jarg2)
{
  char * jresult = 0 ;
  char **arg1 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1      = (char **) jarg1; 
  
  arg2 = (int) jarg2; 
  
  result = (char *)String_in(arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_c_to_doh_String(char * jarg1)
{
  void * jresult = 0 ;
  char *arg1 = (char *) 0 ;
  String *result = 0 ;
  
  arg1 = jarg1; 
  result = (String *)c_to_doh_String(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_get_attribute(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  result = (Node *)get_attribute(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_attribute(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  set_attribute(arg1,arg2,arg3);
}


DllExport unsigned int SWIGSTDCALL Ada_check_attribute(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  unsigned int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  result = (bool)check_attribute(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_Node_to_CStr(void * jarg1)
{
  char * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  char *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (char *)Node_to_CStr(arg1);
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_node_Type(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  DOH *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (DOH *)node_Type(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_parent_Node(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)parent_Node(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_new_File(void * jarg1,
  char * jarg2)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  File *result = 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = jarg2; 
  result = (File *)new_File(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Print_to(void * jarg1,
  char * jarg2)
{
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = jarg2; 
  Print_to(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_dump(void * jarg1,
  void * jarg2)
{
  File *arg1 = (File *) 0 ;
  File *arg2 = (File *) 0 ;
  
  arg1 = (File *)jarg1; 
  arg2 = (File *)jarg2; 
  dump(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_close_File(void * jarg1)
{
  File *arg1 = (File *) 0 ;
  
  arg1 = (File *)jarg1; 
  close_File(arg1);
}


DllExport void SWIGSTDCALL Ada_doh_replace_All(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  DOH *arg1 = (DOH *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  
  arg1 = (DOH *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  doh_replace_All(arg1,arg2,arg3);
}


DllExport void * SWIGSTDCALL Ada_doh_Copy(void * jarg1)
{
  void * jresult = 0 ;
  DOH *arg1 = (DOH *) 0 ;
  DOH *result = 0 ;
  
  arg1 = (DOH *)jarg1; 
  result = (DOH *)doh_Copy(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_save_1(char * jarg1,
  void * jarg2,
  char * jarg3)
{
  char *arg1 = (char *) 0 ;
  Node *arg2 = (Node *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = jarg3; 
  Swig_save_1(arg1,arg2,arg3);
}


DllExport void SWIGSTDCALL Ada_Swig_require_2(char * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4)
{
  char *arg1 = (char *) 0 ;
  Node *arg2 = (Node *) 0 ;
  String *arg3 = (String *) 0 ;
  String *arg4 = (String *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (String *)jarg3; 
  arg4 = (String *)jarg4; 
  Swig_require_2((char const *)arg1,arg2,arg3,arg4);
}


DllExport void SWIGSTDCALL Ada_Wrapper_add_local_2(void * jarg1,
  void * jarg2,
  char * jarg3,
  char * jarg4)
{
  Wrapper *arg1 = (Wrapper *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  Wrapper_add_local_2(arg1,(DOH const *)arg2,arg3,arg4);
}


DllExport void * SWIGSTDCALL Ada_first_Child(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)first_Child(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_next_Sibling(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)next_Sibling(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_exit_with_Fail()
{
  exit_with_Fail();
}


DllExport void * SWIGSTDCALL Ada_doh_First(void * jarg1)
{
  void * jresult = 0 ;
  DOH *arg1 = (DOH *) 0 ;
  DohIterator result;
  
  arg1 = (DOH *)jarg1; 
  result = doh_First(arg1);
  
  jresult = new DohIterator ((DohIterator &) result); 
  
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_doh_Next(void * jarg1)
{
  void * jresult = 0 ;
  DohIterator arg1 ;
  DohIterator result;
  DohIterator *argp1 ;
  
  
  argp1 = (DohIterator *) jarg1; 
  
  if (!argp1) 
  {
    SWIG_AdaThrowException (SWIG_AdaNullReferenceException, "Attempt to dereference null DohIterator");
  }
  
  arg1 = *argp1; 
  
  result = doh_Next(arg1);
  
  jresult = new DohIterator ((DohIterator &) result); 
  
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_get_Item(void * jarg1)
{
  void * jresult = 0 ;
  DohIterator arg1 ;
  DOH *result = 0 ;
  DohIterator *argp1 ;
  
  
  argp1 = (DohIterator *) jarg1; 
  
  if (!argp1) 
  {
    SWIG_AdaThrowException (SWIG_AdaNullReferenceException, "Attempt to dereference null DohIterator");
  }
  
  arg1 = *argp1; 
  
  result = (DOH *)get_Item(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_do_base_top(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  do_base_top(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_do_base_enumDeclaration(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  do_base_enumDeclaration(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_do_base_classHandler(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  do_base_classHandler(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_do_base_memberfunctionHandler(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  do_base_memberfunctionHandler(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_do_base_staticmemberfunctionHandler(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  do_base_staticmemberfunctionHandler(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_do_base_constructorHandler(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  do_base_constructorHandler(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_do_base_destructorHandler(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  do_base_destructorHandler(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_do_base_memberconstantHandler(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  do_base_memberconstantHandler(arg1,arg2);
}


DllExport int SWIGSTDCALL Ada_do_base_insertDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)do_base_insertDirective(arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_do_base_typemapDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)do_base_typemapDirective(arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_do_base_namespaceDeclaration(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  do_base_namespaceDeclaration(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_do_base_includeDirective(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  do_base_includeDirective(arg1,arg2);
}


DllExport int SWIGSTDCALL Ada_get_HAVE_BOOL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_HAVE_INTTYPES_H()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_HAVE_LIBDL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_HAVE_MEMORY_H()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_HAVE_POPEN()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_HAVE_STDINT_H()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_HAVE_STDLIB_H()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_HAVE_STRINGS_H()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_HAVE_STRING_H()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_HAVE_SYS_STAT_H()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_HAVE_SYS_TYPES_H()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_HAVE_UNISTD_H()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_PACKAGE_arg()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "swig";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_PACKAGE_BUGREPORT()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "http://www.swig.org";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_PACKAGE_NAME()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "swig";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_PACKAGE_STRING()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "swig 1.3.36";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_PACKAGE_TARNAME()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "swig";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_PACKAGE_VERSION()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "1.3.36";
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_STDC_HEADERS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_SWIG_CXX()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "g++";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_SWIG_LIB()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "/usr/local/share/swig/1.3.36";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_SWIG_LIB_WIN_UNIX()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "\0";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_SWIG_PLATFORM()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "x86_64-unknown-linux-gnu";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_VERSION()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "1.3.36";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_SWIG_LANG()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "-tcl";
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_NONE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 0;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_EXTERN()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 101;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_VAL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 102;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_OUT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 103;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_DISABLEDOC()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 104;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_ENABLEDOC()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 105;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_DOCONLY()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 106;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_STYLE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 107;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_LOCALSTYLE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 108;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_TITLE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 109;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_SECTION()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 110;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_SUBSECTION()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 111;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_SUBSUBSECTION()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 112;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_ADDMETHODS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 113;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_READONLY()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 114;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_READWRITE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 115;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_EXCEPT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 116;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_NEW()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 117;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_EXCEPT_TM()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 118;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_IGNORE_TM()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 119;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_OPTC()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 120;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_NAME()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 121;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_NOEXTERN()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 122;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_NODEFAULT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 123;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_DEPRECATED_TYPEMAP_LANG()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 124;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PP_MISSING_FILE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 201;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PP_EVALUATION()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 202;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PP_INCLUDEALL_IMPORTALL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 203;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PP_CPP_WARNING()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 204;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PP_CPP_ERROR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 205;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_CLASS_KEYWORD()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 301;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_REDEFINED()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 302;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_EXTEND_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 303;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_UNSUPPORTED_VALUE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 304;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_BAD_VALUE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 305;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_PRIVATE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 306;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_BAD_DEFAULT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 307;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_NAMESPACE_ALIAS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 308;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_PRIVATE_INHERIT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 309;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_TEMPLATE_REPEAT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 310;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_TEMPLATE_PARTIAL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 311;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_NESTED_CLASS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 312;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_UNDEFINED_EXTERN()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 313;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_KEYWORD()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 314;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_USING_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 315;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_MODULE_REPEAT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 316;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_TEMPLATE_SP_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 317;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_TEMPLATE_AMBIG()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 318;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_NO_ACCESS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 319;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_EXPLICIT_TEMPLATE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 320;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_BUILTIN_NAME()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 321;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_REDUNDANT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 322;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PARSE_REC_INHERITANCE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 323;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_NEW()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 350;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_DELETE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 351;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_PLUS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 352;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_MINUS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 353;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_MUL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 354;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_DIV()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 355;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_MOD()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 356;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_XOR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 357;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_AND()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 358;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_OR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 359;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_NOT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 360;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_LNOT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 361;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_EQ()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 362;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_LT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 363;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_GT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 364;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_PLUSEQ()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 365;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_MINUSEQ()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 366;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_MULEQ()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 367;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_DIVEQ()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 368;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_MODEQ()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 369;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_XOREQ()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 370;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_ANDEQ()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 371;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_OREQ()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 372;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_LSHIFT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 373;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_RSHIFT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 374;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_LSHIFTEQ()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 375;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_RSHIFTEQ()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 376;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_EQUALTO()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 377;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_NOTEQUAL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 378;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_LTEQUAL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 379;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_GTEQUAL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 380;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_LAND()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 381;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_LOR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 382;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_PLUSPLUS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 383;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_MINUSMINUS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 384;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_COMMA()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 385;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_ARROWSTAR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 386;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_ARROW()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 387;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_CALL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 388;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_INDEX()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 389;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_UPLUS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 390;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_UMINUS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 391;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_UMUL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 392;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_UAND()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 393;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_NEWARR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 394;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_DELARR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 395;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_IGNORE_OPERATOR_REF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 396;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPE_UNDEFINED_CLASS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 401;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPE_INCOMPLETE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 402;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPE_ABSTRACT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 403;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPE_REDEFINED()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 404;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_SOURCETARGET()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 450;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_CHARLEAK()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 451;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_SWIGTYPE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 452;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_APPLY_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 453;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_SWIGTYPELEAK()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 454;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_IN_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 460;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_OUT_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 461;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_VARIN_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 462;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_VAROUT_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 463;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_CONST_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 464;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 465;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_VAR_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 466;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_TYPECHECK()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 467;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_THROW()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 468;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_DIRECTORIN_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 469;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_THREAD_UNSAFE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 470;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_DIRECTOROUT_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 471;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_TYPECHECK_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 472;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_DIRECTOROUT_PTR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 473;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_OUT_OPTIMAL_IGNORED()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 474;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_TYPEMAP_OUT_OPTIMAL_MULTIPLE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 475;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_FRAGMENT_NOT_FOUND()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 490;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_OVERLOAD_DECL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 501;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_OVERLOAD_CONSTRUCT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 502;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_IDENTIFIER()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 503;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_RETURN_TYPE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 504;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_VARARGS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 505;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_VARARGS_KEYWORD()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 506;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_NATIVE_UNIMPL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 507;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_DEREF_SHADOW()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 508;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_OVERLOAD_SHADOW()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 509;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_FRIEND_IGNORE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 510;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_OVERLOAD_KEYWORD()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 511;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_OVERLOAD_CONST()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 512;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_CLASS_UNNAMED()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 513;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_DIRECTOR_VDESTRUCT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 514;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_DISCARD_CONST()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 515;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_OVERLOAD_IGNORED()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 516;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_DIRECTOR_ABSTRACT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 517;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_PORTABILITY_FILENAME()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 518;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_LANG_TEMPLATE_METHOD_IGNORE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 519;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_RUBY_WRONG_NAME()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 801;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_RUBY_MULTIPLE_INHERITANCE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 802;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_JNI_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 810;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_JTYPE_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 811;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_JSTYPE_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 812;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_MULTIPLE_INHERITANCE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 813;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_GETCPTR_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 814;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_CLASSMOD_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 815;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_JAVABODY_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 816;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_JAVAOUT_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 817;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_JAVAIN_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 818;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_JAVADIRECTORIN_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 819;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_JAVADIRECTOROUT_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 820;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_COVARIANT_RET()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 822;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_JAVACONSTRUCT_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 823;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_TYPEMAP_DIRECTORIN_NODESC()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 824;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_JAVA_NO_DIRECTORCONNECT_ATTR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 825;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_TYPEMAP_CTYPE_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 830;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_TYPEMAP_CSTYPE_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 831;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_TYPEMAP_CSWTYPE_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 832;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_MULTIPLE_INHERITANCE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 833;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_TYPEMAP_GETCPTR_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 834;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_TYPEMAP_CLASSMOD_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 835;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_TYPEMAP_CSBODY_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 836;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_TYPEMAP_CSOUT_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 837;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_TYPEMAP_CSIN_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 838;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_TYPEMAP_CSDIRECTORIN_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 839;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_TYPEMAP_CSDIRECTOROUT_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 840;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_COVARIANT_RET()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 842;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_TYPEMAP_CSCONSTRUCT_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 843;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_EXCODE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 844;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_CANTHROW()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 845;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_CSHARP_NO_DIRECTORCONNECT_ATTR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 846;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_MODULA3_TYPEMAP_TYPE_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 850;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_MODULA3_TYPEMAP_GETCPTR_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 851;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_MODULA3_TYPEMAP_CLASSMOD_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 852;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_MODULA3_TYPEMAP_PTRCONSTMOD_UNDEF()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 853;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_MODULA3_TYPEMAP_MULTIPLE_RETURN()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 854;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_MODULA3_MULTIPLE_INHERITANCE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 855;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_MODULA3_TYPECONSTRUCTOR_UNKNOWN()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 856;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_MODULA3_UNKNOWN_PRAGMA()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 857;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_MODULA3_BAD_ENUMERATION()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 858;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_MODULA3_DOUBLE_ID()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 859;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_MODULA3_BAD_IMPORT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 860;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PHP4_MULTIPLE_INHERITANCE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 870;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_WARN_PHP4_UNKNOWN_PRAGMA()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 871;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_SWIG_OK()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_SWIG_ERROR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 0;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_SWIG_NOWRAP()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 0;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_BOOL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_SCHAR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 2;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_UCHAR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 3;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_SHORT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 4;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_USHORT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 5;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_ENUM()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 6;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_INT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 7;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_UINT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 8;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_LONG()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 9;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_ULONG()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 10;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_LONGLONG()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 11;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_ULONGLONG()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 12;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_FLOAT()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 20;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_DOUBLE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 21;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_LONGDOUBLE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 22;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_FLTCPLX()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 23;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_DBLCPLX()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 24;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_NUMERIC()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 25;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_COMPLEX()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 24;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_CHAR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 29;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_WCHAR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 30;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_USER()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 31;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_VOID()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 32;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_STRING()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 33;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_POINTER()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 34;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_REFERENCE()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 35;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_ARRAY()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 36;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_FUNCTION()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 37;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_MPOINTER()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 38;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_VARARGS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 39;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_SYMBOL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 98;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_T_ERROR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 99;
  
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_NewSwigType(int jarg1)
{
  void * jresult = 0 ;
  int arg1 ;
  SwigType *result = 0 ;
  
  
  arg1 = (int) jarg1; 
  
  result = (SwigType *)NewSwigType(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_del_element(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_del_element(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_add_pointer(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_add_pointer(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_add_memberpointer(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (SwigType *)SwigType_add_memberpointer(arg1,(DOH const *)arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_del_memberpointer(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_del_memberpointer(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_del_pointer(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_del_pointer(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_add_array(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (SwigType *)SwigType_add_array(arg1,(DOH const *)arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_del_array(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_del_array(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_pop_arrays(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_pop_arrays(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_add_reference(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_add_reference(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_del_reference(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_del_reference(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_add_qualifier(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (SwigType *)SwigType_add_qualifier(arg1,(DOH const *)arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_del_qualifier(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_del_qualifier(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_add_function(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  result = (SwigType *)SwigType_add_function(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_add_template(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  result = (SwigType *)SwigType_add_template(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_pop_function(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_pop_function(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_function_parms(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  ParmList *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (ParmList *)SwigType_function_parms(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_split(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  List *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (List *)SwigType_split((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_pop(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (String *)SwigType_pop(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_SwigType_push(void * jarg1,
  void * jarg2)
{
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (SwigType *)jarg2; 
  SwigType_push(arg1,arg2);
}


DllExport void * SWIGSTDCALL Ada_SwigType_parmlist(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  List *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (List *)SwigType_parmlist((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_parm(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)SwigType_parm(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_str(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (String *)SwigType_str(arg1,(DOH const *)arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_lstr(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (String *)SwigType_lstr(arg1,(DOH const *)arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_rcaststr(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (String *)SwigType_rcaststr(arg1,(DOH const *)arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_lcaststr(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (String *)SwigType_lcaststr(arg1,(DOH const *)arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_manglestr(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (String *)SwigType_manglestr(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_ltype(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_ltype(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_ispointer(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_ispointer(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_ispointer_return(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_ispointer_return(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_isfunctionpointer(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_isfunctionpointer(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_ismemberpointer(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_ismemberpointer(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_isreference(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_isreference(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_isreference_return(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_isreference_return(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_isarray(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_isarray(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_prefix_is_simple_1D_array(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_prefix_is_simple_1D_array(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_isfunction(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_isfunction(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_isqualifier(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_isqualifier(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_isconst(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_isconst(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_issimple(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_issimple(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_ismutable(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_ismutable(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_isvarargs(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_isvarargs((DOH const *)arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_istemplate(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_istemplate((DOH const *)arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_isenum(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_isenum(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_check_decl(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (int)SwigType_check_decl(arg1,(DOH const *)arg2);
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_strip_qualifiers(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_strip_qualifiers(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_functionpointer_decompose(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_functionpointer_decompose(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_base(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (String *)SwigType_base((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_namestr(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (String *)SwigType_namestr((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_templateprefix(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (String *)SwigType_templateprefix((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_templatesuffix(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (String *)SwigType_templatesuffix((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_templateargs(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (String *)SwigType_templateargs((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_prefix(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (String *)SwigType_prefix((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_array_ndim(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_array_ndim(arg1);
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_array_getdim(void * jarg1,
  int jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int arg2 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  result = (String *)SwigType_array_getdim(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_SwigType_array_setdim(void * jarg1,
  int jarg2,
  void * jarg3)
{
  SwigType *arg1 = (SwigType *) 0 ;
  int arg2 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  
  arg1 = (SwigType *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  arg3 = (String_or_char *)jarg3; 
  SwigType_array_setdim(arg1,arg2,(DOH const *)arg3);
}


DllExport void * SWIGSTDCALL Ada_SwigType_array_type(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_array_type(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_default(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (String *)SwigType_default(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_SwigType_typename_replace(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  SwigType *arg1 = (SwigType *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  SwigType_typename_replace(arg1,arg2,arg3);
}


DllExport void * SWIGSTDCALL Ada_SwigType_alttype(void * jarg1,
  int jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int arg2 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  result = (SwigType *)SwigType_alttype(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_SwigType_typesystem_init()
{
  SwigType_typesystem_init();
}


DllExport int SWIGSTDCALL Ada_SwigType_typedef(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (int)SwigType_typedef(arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_typedef_class(void * jarg1)
{
  int jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  int result;
  
  arg1 = (String_or_char *)jarg1; 
  result = (int)SwigType_typedef_class(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_typedef_using(void * jarg1)
{
  int jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  int result;
  
  arg1 = (String_or_char *)jarg1; 
  result = (int)SwigType_typedef_using(arg1);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_SwigType_inherit(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4)
{
  String *arg1 = (String *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  String *arg4 = (String *) 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  arg4 = (String *)jarg4; 
  SwigType_inherit(arg1,arg2,arg3,arg4);
}


DllExport int SWIGSTDCALL Ada_SwigType_issubtype(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (SwigType *)jarg2; 
  result = (int)SwigType_issubtype(arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_SwigType_scope_alias(void * jarg1,
  void * jarg2)
{
  String *arg1 = (String *) 0 ;
  Typetab *arg2 = (Typetab *) 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = (Typetab *)jarg2; 
  SwigType_scope_alias(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_SwigType_using_scope(void * jarg1)
{
  Typetab *arg1 = (Typetab *) 0 ;
  
  arg1 = (Typetab *)jarg1; 
  SwigType_using_scope(arg1);
}


DllExport void SWIGSTDCALL Ada_SwigType_new_scope(void * jarg1)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  SwigType_new_scope((DOH const *)arg1);
}


DllExport void SWIGSTDCALL Ada_SwigType_inherit_scope(void * jarg1)
{
  Typetab *arg1 = (Typetab *) 0 ;
  
  arg1 = (Typetab *)jarg1; 
  SwigType_inherit_scope(arg1);
}


DllExport void * SWIGSTDCALL Ada_SwigType_pop_scope()
{
  void * jresult = 0 ;
  Typetab *result = 0 ;
  
  result = (Typetab *)SwigType_pop_scope();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_set_scope(void * jarg1)
{
  void * jresult = 0 ;
  Typetab *arg1 = (Typetab *) 0 ;
  Typetab *result = 0 ;
  
  arg1 = (Typetab *)jarg1; 
  result = (Typetab *)SwigType_set_scope(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_SwigType_print_scope(void * jarg1)
{
  Typetab *arg1 = (Typetab *) 0 ;
  
  arg1 = (Typetab *)jarg1; 
  SwigType_print_scope(arg1);
}


DllExport void * SWIGSTDCALL Ada_SwigType_typedef_resolve(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_typedef_resolve(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_typedef_resolve_all(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_typedef_resolve_all(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_SwigType_typedef_qualified(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)SwigType_typedef_qualified(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_istypedef(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_istypedef(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SwigType_isclass(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_isclass(arg1);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_SwigType_attach_symtab(void * jarg1)
{
  Symtab *arg1 = (Symtab *) 0 ;
  
  arg1 = (Symtab *)jarg1; 
  SwigType_attach_symtab(arg1);
}


DllExport void SWIGSTDCALL Ada_SwigType_remember(void * jarg1)
{
  SwigType *arg1 = (SwigType *) 0 ;
  
  arg1 = (SwigType *)jarg1; 
  SwigType_remember(arg1);
}


DllExport void SWIGSTDCALL Ada_SwigType_remember_clientdata(void * jarg1,
  void * jarg2)
{
  SwigType *arg1 = (SwigType *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  SwigType_remember_clientdata(arg1,(DOH const *)arg2);
}


DllExport void SWIGSTDCALL Ada_SwigType_remember_mangleddata(void * jarg1,
  void * jarg2)
{
  String *arg1 = (String *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  SwigType_remember_mangleddata(arg1,(DOH const *)arg2);
}


DllExport void * SWIGSTDCALL Ada_SwigType_remember_trace(void * jarg1)
{
  void * jresult = 0 ;
  void (*arg1)(SwigType *,String *,String *) = (void (*)(SwigType *,String *,String *)) 0 ;
  void (*result)(SwigType *,String *,String *) = 0 ;
  
  arg1 = (void (*)(SwigType *,String *,String *))jarg1; 
  result = (void (*)(SwigType *,String *,String *))SwigType_remember_trace(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_SwigType_emit_type_table(void * jarg1,
  void * jarg2)
{
  File *arg1 = (File *) 0 ;
  File *arg2 = (File *) 0 ;
  
  arg1 = (File *)jarg1; 
  arg2 = (File *)jarg2; 
  SwigType_emit_type_table(arg1,arg2);
}


DllExport int SWIGSTDCALL Ada_SwigType_type(void * jarg1)
{
  int jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int result;
  
  arg1 = (SwigType *)jarg1; 
  result = (int)SwigType_type(arg1);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_symbol_init()
{
  Swig_symbol_init();
}


DllExport void SWIGSTDCALL Ada_Swig_symbol_setscopename(void * jarg1)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  Swig_symbol_setscopename((DOH const *)arg1);
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_getscopename()
{
  void * jresult = 0 ;
  String *result = 0 ;
  
  result = (String *)Swig_symbol_getscopename();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_qualifiedscopename(void * jarg1)
{
  void * jresult = 0 ;
  Symtab *arg1 = (Symtab *) 0 ;
  String *result = 0 ;
  
  arg1 = (Symtab *)jarg1; 
  result = (String *)Swig_symbol_qualifiedscopename(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_newscope()
{
  void * jresult = 0 ;
  Symtab *result = 0 ;
  
  result = (Symtab *)Swig_symbol_newscope();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_setscope(void * jarg1)
{
  void * jresult = 0 ;
  Symtab *arg1 = (Symtab *) 0 ;
  Symtab *result = 0 ;
  
  arg1 = (Symtab *)jarg1; 
  result = (Symtab *)Swig_symbol_setscope(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_getscope(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  Symtab *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (Symtab *)Swig_symbol_getscope((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_current()
{
  void * jresult = 0 ;
  Symtab *result = 0 ;
  
  result = (Symtab *)Swig_symbol_current();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_popscope()
{
  void * jresult = 0 ;
  Symtab *result = 0 ;
  
  result = (Symtab *)Swig_symbol_popscope();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_add(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (Node *)Swig_symbol_add(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_symbol_cadd(void * jarg1,
  void * jarg2)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (Node *)jarg2; 
  Swig_symbol_cadd(arg1,arg2);
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_clookup(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  Symtab *arg2 = (Symtab *) 0 ;
  Node *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (Symtab *)jarg2; 
  result = (Node *)Swig_symbol_clookup(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_clookup_check(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  Symtab *arg2 = (Symtab *) 0 ;
  int (*arg3)(Node *) = (int (*)(Node *)) 0 ;
  Node *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (Symtab *)jarg2; 
  arg3 = (int (*)(Node *))jarg3; 
  result = (Node *)Swig_symbol_clookup_check(arg1,arg2,arg3);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_cscope(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  Symtab *arg2 = (Symtab *) 0 ;
  Symtab *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (Symtab *)jarg2; 
  result = (Symtab *)Swig_symbol_cscope(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_clookup_local(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  Symtab *arg2 = (Symtab *) 0 ;
  Node *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (Symtab *)jarg2; 
  result = (Node *)Swig_symbol_clookup_local(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_clookup_local_check(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  Symtab *arg2 = (Symtab *) 0 ;
  int (*arg3)(Node *) = (int (*)(Node *)) 0 ;
  Node *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (Symtab *)jarg2; 
  arg3 = (int (*)(Node *))jarg3; 
  result = (Node *)Swig_symbol_clookup_local_check(arg1,arg2,arg3);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_qualified(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (String *)Swig_symbol_qualified(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_isoverloaded(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)Swig_symbol_isoverloaded(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_symbol_remove(void * jarg1)
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Swig_symbol_remove(arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_symbol_alias(void * jarg1,
  void * jarg2)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  Symtab *arg2 = (Symtab *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (Symtab *)jarg2; 
  Swig_symbol_alias(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_Swig_symbol_inherit(void * jarg1)
{
  Symtab *arg1 = (Symtab *) 0 ;
  
  arg1 = (Symtab *)jarg1; 
  Swig_symbol_inherit(arg1);
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_type_qualify(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  Symtab *arg2 = (Symtab *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (Symtab *)jarg2; 
  result = (SwigType *)Swig_symbol_type_qualify((DOH const *)arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_string_qualify(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  Symtab *arg2 = (Symtab *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = (Symtab *)jarg2; 
  result = (String *)Swig_symbol_string_qualify(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_typedef_reduce(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  Symtab *arg2 = (Symtab *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (Symtab *)jarg2; 
  result = (SwigType *)Swig_symbol_typedef_reduce(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_template_defargs(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4)
{
  void * jresult = 0 ;
  Parm *arg1 = (Parm *) 0 ;
  Parm *arg2 = (Parm *) 0 ;
  Symtab *arg3 = (Symtab *) 0 ;
  Symtab *arg4 = (Symtab *) 0 ;
  ParmList *result = 0 ;
  
  arg1 = (Parm *)jarg1; 
  arg2 = (Parm *)jarg2; 
  arg3 = (Symtab *)jarg3; 
  arg4 = (Symtab *)jarg4; 
  result = (ParmList *)Swig_symbol_template_defargs(arg1,arg2,arg3,arg4);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_template_deftype(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  Symtab *arg2 = (Symtab *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (Symtab *)jarg2; 
  result = (SwigType *)Swig_symbol_template_deftype((DOH const *)arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_symbol_template_param_eval(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  Symtab *arg2 = (Symtab *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (Symtab *)jarg2; 
  result = (SwigType *)Swig_symbol_template_param_eval((DOH const *)arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_ParmList_errorstr(void * jarg1)
{
  void * jresult = 0 ;
  ParmList *arg1 = (ParmList *) 0 ;
  String *result = 0 ;
  
  arg1 = (ParmList *)jarg1; 
  result = (String *)ParmList_errorstr(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_ParmList_is_compactdefargs(void * jarg1)
{
  int jresult = 0 ;
  ParmList *arg1 = (ParmList *) 0 ;
  int result;
  
  arg1 = (ParmList *)jarg1; 
  result = (int)ParmList_is_compactdefargs(arg1);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_name_register(void * jarg1,
  void * jarg2)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  Swig_name_register((DOH const *)arg1,(DOH const *)arg2);
}


DllExport void SWIGSTDCALL Ada_Swig_name_unregister(void * jarg1)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  Swig_name_unregister((DOH const *)arg1);
}


DllExport void * SWIGSTDCALL Ada_Swig_name_mangle(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (String *)Swig_name_mangle((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_wrapper(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (String *)Swig_name_wrapper((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_member(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (String *)Swig_name_member((DOH const *)arg1,(DOH const *)arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_get(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (String *)Swig_name_get((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_set(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (String *)Swig_name_set((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_construct(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (String *)Swig_name_construct((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_copyconstructor(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (String *)Swig_name_copyconstructor((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_destroy(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (String *)Swig_name_destroy((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_disown(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (String *)Swig_name_disown((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_name_namewarn_add(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4)
{
  String *arg1 = (String *) 0 ;
  String *arg2 = (String *) 0 ;
  SwigType *arg3 = (SwigType *) 0 ;
  Hash *arg4 = (Hash *) 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (SwigType *)jarg3; 
  arg4 = (Hash *)jarg4; 
  Swig_name_namewarn_add(arg1,arg2,arg3,arg4);
}


DllExport void * SWIGSTDCALL Ada_Swig_name_namewarn_get(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  SwigType *arg4 = (SwigType *) 0 ;
  Hash *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  arg4 = (SwigType *)jarg4; 
  result = (Hash *)Swig_name_namewarn_get(arg1,arg2,arg3,arg4);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_name_rename_add(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4,
  void * jarg5)
{
  String *arg1 = (String *) 0 ;
  String *arg2 = (String *) 0 ;
  SwigType *arg3 = (SwigType *) 0 ;
  Hash *arg4 = (Hash *) 0 ;
  ParmList *arg5 = (ParmList *) 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (SwigType *)jarg3; 
  arg4 = (Hash *)jarg4; 
  arg5 = (ParmList *)jarg5; 
  Swig_name_rename_add(arg1,arg2,arg3,arg4,arg5);
}


DllExport void SWIGSTDCALL Ada_Swig_name_inherit(void * jarg1,
  void * jarg2)
{
  String *arg1 = (String *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = (String *)jarg2; 
  Swig_name_inherit(arg1,arg2);
}


DllExport int SWIGSTDCALL Ada_Swig_need_protected(void * jarg1)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)Swig_need_protected(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_need_name_warning(void * jarg1)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)Swig_need_name_warning(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_need_redefined_warn(void * jarg1,
  void * jarg2,
  int jarg3)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  
  arg3 = (int) jarg3; 
  
  result = (int)Swig_need_redefined_warn(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_make(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4,
  void * jarg5)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  SwigType *arg4 = (SwigType *) 0 ;
  String *arg5 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  arg4 = (SwigType *)jarg4; 
  arg5 = (String *)jarg5; 
  result = (String *)Swig_name_make(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_warning(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  SwigType *arg4 = (SwigType *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  arg4 = (SwigType *)jarg4; 
  result = (String *)Swig_name_warning(arg1,arg2,arg3,arg4);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_decl(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (String *)Swig_name_decl(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_name_fulldecl(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (String *)Swig_name_fulldecl(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_name_object_set(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4)
{
  Hash *arg1 = (Hash *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  SwigType *arg3 = (SwigType *) 0 ;
  DOH *arg4 = (DOH *) 0 ;
  
  arg1 = (Hash *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  arg3 = (SwigType *)jarg3; 
  arg4 = (DOH *)jarg4; 
  Swig_name_object_set(arg1,arg2,arg3,arg4);
}


DllExport void * SWIGSTDCALL Ada_Swig_name_object_get(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4)
{
  void * jresult = 0 ;
  Hash *arg1 = (Hash *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  SwigType *arg4 = (SwigType *) 0 ;
  DOH *result = 0 ;
  
  arg1 = (Hash *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  arg4 = (SwigType *)jarg4; 
  result = (DOH *)Swig_name_object_get(arg1,arg2,arg3,arg4);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_name_object_inherit(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  Hash *arg1 = (Hash *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  
  arg1 = (Hash *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  Swig_name_object_inherit(arg1,arg2,arg3);
}


DllExport void SWIGSTDCALL Ada_Swig_features_get(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4,
  void * jarg5)
{
  Hash *arg1 = (Hash *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  SwigType *arg4 = (SwigType *) 0 ;
  Node *arg5 = (Node *) 0 ;
  
  arg1 = (Hash *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  arg4 = (SwigType *)jarg4; 
  arg5 = (Node *)jarg5; 
  Swig_features_get(arg1,arg2,arg3,arg4,arg5);
}


DllExport void SWIGSTDCALL Ada_Swig_feature_set(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4,
  void * jarg5,
  void * jarg6)
{
  Hash *arg1 = (Hash *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  SwigType *arg3 = (SwigType *) 0 ;
  String_or_char *arg4 = (String_or_char *) 0 ;
  String *arg5 = (String *) 0 ;
  Hash *arg6 = (Hash *) 0 ;
  
  arg1 = (Hash *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  arg3 = (SwigType *)jarg3; 
  arg4 = (String_or_char *)jarg4; 
  arg5 = (String *)jarg5; 
  arg6 = (Hash *)jarg6; 
  Swig_feature_set(arg1,(DOH const *)arg2,arg3,(DOH const *)arg4,arg5,arg6);
}


DllExport char * SWIGSTDCALL Ada_Swig_copy_string(char * jarg1)
{
  char * jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = jarg1; 
  result = (char *)Swig_copy_string((char const *)arg1);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_set_fakeversion(char * jarg1)
{
  char *arg1 = (char *) 0 ;
  
  arg1 = jarg1; 
  Swig_set_fakeversion((char const *)arg1);
}


DllExport char * SWIGSTDCALL Ada_Swig_package_version()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *)Swig_package_version();
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_banner(void * jarg1)
{
  File *arg1 = (File *) 0 ;
  
  arg1 = (File *)jarg1; 
  Swig_banner(arg1);
}


DllExport void * SWIGSTDCALL Ada_Swig_strip_c_comments(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)Swig_strip_c_comments((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_string_escape(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)Swig_string_escape(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_string_mangle(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)Swig_string_mangle((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_scopename_split(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  String *arg1 = (String *) 0 ;
  String **arg2 = (String **) 0 ;
  String **arg3 = (String **) 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = (String **)jarg2; 
  arg3 = (String **)jarg3; 
  Swig_scopename_split(arg1,arg2,arg3);
}


DllExport void * SWIGSTDCALL Ada_Swig_scopename_prefix(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)Swig_scopename_prefix(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_scopename_last(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)Swig_scopename_last(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_scopename_first(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)Swig_scopename_first(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_scopename_suffix(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)Swig_scopename_suffix(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_scopename_check(void * jarg1)
{
  int jresult = 0 ;
  String *arg1 = (String *) 0 ;
  int result;
  
  arg1 = (String *)jarg1; 
  result = (int)Swig_scopename_check(arg1);
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_string_lower(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)Swig_string_lower(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_string_upper(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)Swig_string_upper(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_string_title(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)Swig_string_title(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_init()
{
  Swig_init();
}


DllExport void SWIGSTDCALL Ada_Swig_warn(char * jarg1,
  int jarg2,
  char * jarg3)
{
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = jarg1; 
  
  arg2 = (int) jarg2; 
  
  arg3 = jarg3; 
  Swig_warn((char const *)arg1,arg2,(char const *)arg3);
}


DllExport int SWIGSTDCALL Ada_Swig_value_wrapper_mode(int jarg1)
{
  int jresult = 0 ;
  int arg1 ;
  int result;
  
  
  arg1 = (int) jarg1; 
  
  result = (int)Swig_value_wrapper_mode(arg1);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_warning(int jarg1,
  void * jarg2,
  int jarg3,
  char * jarg4)
{
  int arg1 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  
  arg1 = (int) jarg1; 
  
  arg2 = (String_or_char *)jarg2; 
  
  arg3 = (int) jarg3; 
  
  arg4 = jarg4; 
  Swig_warning(arg1,(DOH const *)arg2,arg3,(char const *)arg4,arg5);
}


DllExport void SWIGSTDCALL Ada_Swig_error_file(void * jarg1,
  int jarg2,
  char * jarg3)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  arg3 = jarg3; 
  Swig_error((DOH const *)arg1,arg2,(char const *)arg3,arg4);
}


DllExport int SWIGSTDCALL Ada_Swig_error_count()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Swig_error_count();
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_error_silent(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Swig_error_silent(arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_warnfilter(void * jarg1,
  int jarg2)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  int arg2 ;
  
  arg1 = (String_or_char *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  Swig_warnfilter((DOH const *)arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_Swig_warnall()
{
  Swig_warnall();
}


DllExport int SWIGSTDCALL Ada_Swig_warn_count()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Swig_warn_count();
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_error_msg_format(int jarg1)
{
  ErrorMessageFormat arg1 ;
  
  arg1 = (ErrorMessageFormat) jarg1; 
  Swig_error_msg_format(arg1);
}


DllExport void * SWIGSTDCALL Ada_Swig_cparm_name(void * jarg1,
  int jarg2)
{
  void * jresult = 0 ;
  Parm *arg1 = (Parm *) 0 ;
  int arg2 ;
  String *result = 0 ;
  
  arg1 = (Parm *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  result = (String *)Swig_cparm_name(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_wrapped_var_type(void * jarg1,
  int jarg2)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  int arg2 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  result = (String *)Swig_wrapped_var_type(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_cargs(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Wrapper *arg1 = (Wrapper *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  int result;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  result = (int)Swig_cargs(arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_cresult(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  result = (String *)Swig_cresult(arg1,(DOH const *)arg2,(DOH const *)arg3);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_cfunction_call(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  result = (String *)Swig_cfunction_call(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_cconstructor_call(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (String *)Swig_cconstructor_call(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_cppconstructor_call(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  result = (String *)Swig_cppconstructor_call(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_unref_call(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (String *)Swig_unref_call(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_ref_call(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  result = (String *)Swig_ref_call(arg1,(DOH const *)arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_cdestructor_call(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (String *)Swig_cdestructor_call(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_cppdestructor_call(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (String *)Swig_cppdestructor_call(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_cmemberset_call(void * jarg1,
  void * jarg2,
  void * jarg3,
  int jarg4)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  int arg4 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (SwigType *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  
  arg4 = (int) jarg4; 
  
  result = (String *)Swig_cmemberset_call(arg1,arg2,arg3,arg4);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_cmemberget_call(void * jarg1,
  void * jarg2,
  void * jarg3,
  int jarg4)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  int arg4 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (SwigType *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  
  arg4 = (int) jarg4; 
  
  result = (String *)Swig_cmemberget_call((DOH const *)arg1,arg2,arg3,arg4);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_add_extension_code(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4,
  void * jarg5,
  int jarg6,
  void * jarg7)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  ParmList *arg3 = (ParmList *) 0 ;
  SwigType *arg4 = (SwigType *) 0 ;
  String *arg5 = (String *) 0 ;
  int arg6 ;
  String *arg7 = (String *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (ParmList *)jarg3; 
  arg4 = (SwigType *)jarg4; 
  arg5 = (String *)jarg5; 
  
  arg6 = (int) jarg6; 
  
  arg7 = (String *)jarg7; 
  result = (int)Swig_add_extension_code(arg1,(DOH const *)arg2,arg3,arg4,(DOH const *)arg5,arg6,(DOH const *)arg7);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_MethodToFunction(void * jarg1,
  void * jarg2,
  int jarg3,
  void * jarg4,
  int jarg5)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  int arg3 ;
  SwigType *arg4 = (SwigType *) 0 ;
  int arg5 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  
  arg3 = (int) jarg3; 
  
  arg4 = (SwigType *)jarg4; 
  
  arg5 = (int) jarg5; 
  
  result = (int)Swig_MethodToFunction(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_ConstructorToFunction(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4,
  int jarg5,
  int jarg6)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  String *arg4 = (String *) 0 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  arg4 = (String *)jarg4; 
  
  arg5 = (int) jarg5; 
  
  
  arg6 = (int) jarg6; 
  
  result = (int)Swig_ConstructorToFunction(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_DestructorToFunction(void * jarg1,
  void * jarg2,
  int jarg3,
  int jarg4)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  
  arg3 = (int) jarg3; 
  
  
  arg4 = (int) jarg4; 
  
  result = (int)Swig_DestructorToFunction(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_MembersetToFunction(void * jarg1,
  void * jarg2,
  int jarg3)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  
  arg3 = (int) jarg3; 
  
  result = (int)Swig_MembersetToFunction(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_MembergetToFunction(void * jarg1,
  void * jarg2,
  int jarg3)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  
  arg3 = (int) jarg3; 
  
  result = (int)Swig_MembergetToFunction(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_VargetToFunction(void * jarg1,
  int jarg2)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  result = (int)Swig_VargetToFunction(arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_VarsetToFunction(void * jarg1,
  int jarg2)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  result = (int)Swig_VarsetToFunction(arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_CWRAP_EXTEND()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 0x01;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_CWRAP_SMART_POINTER()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 0x02;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_CWRAP_NATURAL_VAR()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 0x04;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_CWRAP_DIRECTOR_ONE_CALL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 0x08;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_CWRAP_DIRECTOR_TWO_CALLS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 0x10;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_CWRAP_ALL_PROTECTED_ACCESS()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 0x20;
  
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_methodclass(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)Swig_methodclass(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_directorclass(void * jarg1)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)Swig_directorclass(arg1);
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_directormap(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  result = (Node *)Swig_directormap(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_typemap_init()
{
  Swig_typemap_init();
}


DllExport void SWIGSTDCALL Ada_Swig_typemap_register(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4,
  void * jarg5)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  ParmList *arg4 = (ParmList *) 0 ;
  ParmList *arg5 = (ParmList *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  arg4 = (ParmList *)jarg4; 
  arg5 = (ParmList *)jarg5; 
  Swig_typemap_register((DOH const *)arg1,arg2,arg3,arg4,arg5);
}


DllExport int SWIGSTDCALL Ada_Swig_typemap_copy(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  int jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  ParmList *arg3 = (ParmList *) 0 ;
  int result;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  arg3 = (ParmList *)jarg3; 
  result = (int)Swig_typemap_copy((DOH const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_typemap_clear(void * jarg1,
  void * jarg2)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  Swig_typemap_clear((DOH const *)arg1,arg2);
}


DllExport int SWIGSTDCALL Ada_Swig_typemap_apply(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  ParmList *arg1 = (ParmList *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  int result;
  
  arg1 = (ParmList *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  result = (int)Swig_typemap_apply(arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_typemap_clear_apply(void * jarg1)
{
  ParmList *arg1 = (ParmList *) 0 ;
  
  arg1 = (ParmList *)jarg1; 
  Swig_typemap_clear_apply(arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_typemap_debug()
{
  Swig_typemap_debug();
}


DllExport void * SWIGSTDCALL Ada_Swig_typemap_search(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  SwigType **arg4 = (SwigType **) 0 ;
  Hash *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (SwigType *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  arg4 = (SwigType **)jarg4; 
  result = (Hash *)Swig_typemap_search((DOH const *)arg1,arg2,(DOH const *)arg3,arg4);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_typemap_search_multi(void * jarg1,
  void * jarg2,
  int* jarg3)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  int *arg3 = (int *) 0 ;
  Hash *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  
  arg3 = (int *) jarg3;
  
  result = (Hash *)Swig_typemap_search_multi((DOH const *)arg1,arg2,arg3);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_typemap_lookup(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  Node *arg2 = (Node *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  Wrapper *arg4 = (Wrapper *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  arg4 = (Wrapper *)jarg4; 
  result = (String *)Swig_typemap_lookup((DOH const *)arg1,arg2,(DOH const *)arg3,arg4);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_typemap_lookup_out(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4,
  void * jarg5)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  Node *arg2 = (Node *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  Wrapper *arg4 = (Wrapper *) 0 ;
  String *arg5 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  arg4 = (Wrapper *)jarg4; 
  arg5 = (String *)jarg5; 
  result = (String *)Swig_typemap_lookup_out((DOH const *)arg1,arg2,(DOH const *)arg3,arg4,arg5);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_typemap_attach_kwargs(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  Hash *arg1 = (Hash *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  Parm *arg3 = (Parm *) 0 ;
  
  arg1 = (Hash *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  arg3 = (Parm *)jarg3; 
  Swig_typemap_attach_kwargs(arg1,(DOH const *)arg2,arg3);
}


DllExport void SWIGSTDCALL Ada_Swig_typemap_new_scope()
{
  Swig_typemap_new_scope();
}


DllExport void * SWIGSTDCALL Ada_Swig_typemap_pop_scope()
{
  void * jresult = 0 ;
  Hash *result = 0 ;
  
  result = (Hash *)Swig_typemap_pop_scope();
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_typemap_attach_parms(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  Wrapper *arg3 = (Wrapper *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  arg3 = (Wrapper *)jarg3; 
  Swig_typemap_attach_parms((DOH const *)arg1,arg2,arg3);
}


DllExport void SWIGSTDCALL Ada_Swig_fragment_register(void * jarg1)
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Swig_fragment_register(arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_fragment_emit(void * jarg1)
{
  String *arg1 = (String *) 0 ;
  
  arg1 = (String *)jarg1; 
  Swig_fragment_emit(arg1);
}


DllExport int SWIGSTDCALL Ada_Swig_director_mode()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Swig_director_mode();
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_director_protected_mode()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Swig_director_protected_mode();
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_all_protected_mode()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Swig_all_protected_mode();
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Wrapper_director_mode_set(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Wrapper_director_mode_set(arg1);
}


DllExport void SWIGSTDCALL Ada_Wrapper_director_protected_mode_set(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Wrapper_director_protected_mode_set(arg1);
}


DllExport void SWIGSTDCALL Ada_Wrapper_all_protected_mode_set(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Wrapper_all_protected_mode_set(arg1);
}


DllExport void SWIGSTDCALL Ada_SwigType_template_init()
{
  SwigType_template_init();
}


DllExport int SWIGSTDCALL Ada_Preprocessor_expr(void * jarg1,
  int* jarg2)
{
  int jresult = 0 ;
  String *arg1 = (String *) 0 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  arg1 = (String *)jarg1; 
  
  arg2 = (int *) jarg2;
  
  result = (int)Preprocessor_expr(arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_Preprocessor_expr_error()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *)Preprocessor_expr_error();
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Preprocessor_define(void * jarg1,
  int jarg2)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  int arg2 ;
  Hash *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  result = (Hash *)Preprocessor_define((DOH const *)arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Preprocessor_undef(void * jarg1)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  Preprocessor_undef((DOH const *)arg1);
}


DllExport void SWIGSTDCALL Ada_Preprocessor_init()
{
  Preprocessor_init();
}


DllExport void SWIGSTDCALL Ada_Preprocessor_delete()
{
  Preprocessor_delete();
}


DllExport void * SWIGSTDCALL Ada_Preprocessor_parse(void * jarg1)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  result = (String *)Preprocessor_parse(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Preprocessor_include_all(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Preprocessor_include_all(arg1);
}


DllExport void SWIGSTDCALL Ada_Preprocessor_import_all(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Preprocessor_import_all(arg1);
}


DllExport void SWIGSTDCALL Ada_Preprocessor_ignore_missing(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Preprocessor_ignore_missing(arg1);
}


DllExport void SWIGSTDCALL Ada_Preprocessor_error_as_warning(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Preprocessor_error_as_warning(arg1);
}


DllExport void * SWIGSTDCALL Ada_Preprocessor_depend()
{
  void * jresult = 0 ;
  List *result = 0 ;
  
  result = (List *)Preprocessor_depend();
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Preprocessor_expr_init()
{
  Preprocessor_expr_init();
}


DllExport void SWIGSTDCALL Ada_Preprocessor_expr_delete()
{
  Preprocessor_expr_delete();
}


DllExport int SWIGSTDCALL Ada_checkAttribute(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  result = (int)checkAttribute(arg1,(DOH const *)arg2,(DOH const *)arg3);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_appendChild(void * jarg1,
  void * jarg2)
{
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  appendChild(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_prependChild(void * jarg1,
  void * jarg2)
{
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  prependChild(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_removeNode(void * jarg1)
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  removeNode(arg1);
}


DllExport void * SWIGSTDCALL Ada_copyNode(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)copyNode(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_require(char * jarg1,
  void * jarg2)
{
  char *arg1 = (char *) 0 ;
  Node *arg2 = (Node *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = jarg1; 
  arg2 = (Node *)jarg2; 
  Swig_require((char const *)arg1,arg2,arg3);
}


DllExport void SWIGSTDCALL Ada_Swig_save(char * jarg1,
  void * jarg2)
{
  char *arg1 = (char *) 0 ;
  Node *arg2 = (Node *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = jarg1; 
  arg2 = (Node *)jarg2; 
  Swig_save((char const *)arg1,arg2,arg3);
}


DllExport void SWIGSTDCALL Ada_Swig_restore(void * jarg1)
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Swig_restore(arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_print_tags(void * jarg1,
  void * jarg2)
{
  File *arg1 = (File *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (File *)jarg1; 
  arg2 = (Node *)jarg2; 
  Swig_print_tags(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_Swig_print_tree(void * jarg1)
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Swig_print_tree(arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_print_node(void * jarg1)
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Swig_print_node(arg1);
}


DllExport void SWIGSTDCALL Ada_set_Wrapper_localh(void * jarg1,
  void * jarg2)
{
  Wrapper *arg1 = (Wrapper *) 0 ;
  Hash *arg2 = (Hash *) 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (Hash *)jarg2; 
  if (arg1) (arg1)->localh = arg2;
  
}


DllExport void * SWIGSTDCALL Ada_get_Wrapper_localh(void * jarg1)
{
  void * jresult = 0 ;
  Wrapper *arg1 = (Wrapper *) 0 ;
  Hash *result = 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  result = (Hash *) ((arg1)->localh);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Wrapper_def(void * jarg1,
  void * jarg2)
{
  Wrapper *arg1 = (Wrapper *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (String *)jarg2; 
  if (arg1) (arg1)->def = arg2;
  
}


DllExport void * SWIGSTDCALL Ada_get_Wrapper_def(void * jarg1)
{
  void * jresult = 0 ;
  Wrapper *arg1 = (Wrapper *) 0 ;
  String *result = 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  result = (String *) ((arg1)->def);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Wrapper_locals(void * jarg1,
  void * jarg2)
{
  Wrapper *arg1 = (Wrapper *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (String *)jarg2; 
  if (arg1) (arg1)->locals = arg2;
  
}


DllExport void * SWIGSTDCALL Ada_get_Wrapper_locals(void * jarg1)
{
  void * jresult = 0 ;
  Wrapper *arg1 = (Wrapper *) 0 ;
  String *result = 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  result = (String *) ((arg1)->locals);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Wrapper_code(void * jarg1,
  void * jarg2)
{
  Wrapper *arg1 = (Wrapper *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (String *)jarg2; 
  if (arg1) (arg1)->code = arg2;
  
}


DllExport void * SWIGSTDCALL Ada_get_Wrapper_code(void * jarg1)
{
  void * jresult = 0 ;
  Wrapper *arg1 = (Wrapper *) 0 ;
  String *result = 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  result = (String *) ((arg1)->code);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_new_Wrapper()
{
  void * jresult = 0 ;
  Wrapper *result = 0 ;
  
  result = (Wrapper *)new Wrapper();
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_delete_Wrapper(void * jarg1)
{
  Wrapper *arg1 = (Wrapper *) 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  delete arg1;
  
}


DllExport void * SWIGSTDCALL Ada_NewWrapper()
{
  void * jresult = 0 ;
  Wrapper *result = 0 ;
  
  result = (Wrapper *)NewWrapper();
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_DelWrapper(void * jarg1)
{
  Wrapper *arg1 = (Wrapper *) 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  DelWrapper(arg1);
}


DllExport void SWIGSTDCALL Ada_Wrapper_compact_print_mode_set(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Wrapper_compact_print_mode_set(arg1);
}


DllExport void SWIGSTDCALL Ada_Wrapper_pretty_print(void * jarg1,
  void * jarg2)
{
  String *arg1 = (String *) 0 ;
  File *arg2 = (File *) 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = (File *)jarg2; 
  Wrapper_pretty_print(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_Wrapper_compact_print(void * jarg1,
  void * jarg2)
{
  String *arg1 = (String *) 0 ;
  File *arg2 = (File *) 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = (File *)jarg2; 
  Wrapper_compact_print(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_Wrapper_print(void * jarg1,
  void * jarg2)
{
  Wrapper *arg1 = (Wrapper *) 0 ;
  File *arg2 = (File *) 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (File *)jarg2; 
  Wrapper_print(arg1,arg2);
}


DllExport int SWIGSTDCALL Ada_Wrapper_add_local(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  int jresult = 0 ;
  Wrapper *arg1 = (Wrapper *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  int result;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  result = (int)Wrapper_add_local(arg1,(DOH const *)arg2,(DOH const *)arg3);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Wrapper_add_localv(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Wrapper *arg1 = (Wrapper *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (int)Wrapper_add_localv(arg1,(DOH const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Wrapper_check_local(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Wrapper *arg1 = (Wrapper *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  int result;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (int)Wrapper_check_local(arg1,(DOH const *)arg2);
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_Wrapper_new_local(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  char * jresult = 0 ;
  Wrapper *arg1 = (Wrapper *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  char *result = 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  result = (char *)Wrapper_new_local(arg1,(DOH const *)arg2,(DOH const *)arg3);
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_Wrapper_new_localv(void * jarg1,
  void * jarg2)
{
  char * jresult = 0 ;
  Wrapper *arg1 = (Wrapper *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  void *arg3 = 0 ;
  char *result = 0 ;
  
  arg1 = (Wrapper *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  result = (char *)Wrapper_new_localv(arg1,(DOH const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_NOT_VIRTUAL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 0;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_PLAIN_VIRTUAL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 1;
  
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_get_PURE_VIRTUAL()
{
  int jresult = 0 ;
  int result;
  
  result = (int) 2;
  
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_input_file(char * jarg1)
{
  char *arg1 = (char *) 0 ;
  
  arg1 = jarg1; 
  {
    if (input_file) delete [] input_file;
    if (arg1) {
      input_file = (char *) (new char[strlen(arg1)+1]);
      strcpy((char *) input_file,arg1);
    } else {
      input_file = 0;
    }
  }
}


DllExport char * SWIGSTDCALL Ada_get_input_file()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *)input_file;
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_line_number(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  line_number = arg1;
  
}


DllExport int SWIGSTDCALL Ada_get_line_number()
{
  int jresult = 0 ;
  int result;
  
  result = (int)line_number;
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_CPlusPlus(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  CPlusPlus = arg1;
  
}


DllExport int SWIGSTDCALL Ada_get_CPlusPlus()
{
  int jresult = 0 ;
  int result;
  
  result = (int)CPlusPlus;
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Extend(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Extend = arg1;
  
}


DllExport int SWIGSTDCALL Ada_get_Extend()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Extend;
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Verbose(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Verbose = arg1;
  
}


DllExport int SWIGSTDCALL Ada_get_Verbose()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Verbose;
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_IsVirtual(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  IsVirtual = arg1;
  
}


DllExport int SWIGSTDCALL Ada_get_IsVirtual()
{
  int jresult = 0 ;
  int result;
  
  result = (int)IsVirtual;
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_ImportMode(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  ImportMode = arg1;
  
}


DllExport int SWIGSTDCALL Ada_get_ImportMode()
{
  int jresult = 0 ;
  int result;
  
  result = (int)ImportMode;
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_NoExcept(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  NoExcept = arg1;
  
}


DllExport int SWIGSTDCALL Ada_get_NoExcept()
{
  int jresult = 0 ;
  int result;
  
  result = (int)NoExcept;
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Abstract(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Abstract = arg1;
  
}


DllExport int SWIGSTDCALL Ada_get_Abstract()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Abstract;
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_SmartPointer(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  SmartPointer = arg1;
  
}


DllExport int SWIGSTDCALL Ada_get_SmartPointer()
{
  int jresult = 0 ;
  int result;
  
  result = (int)SmartPointer;
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_SwigRuntime(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  SwigRuntime = arg1;
  
}


DllExport int SWIGSTDCALL Ada_get_SwigRuntime()
{
  int jresult = 0 ;
  int result;
  
  result = (int)SwigRuntime;
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_argv_template_string(void * jarg1)
{
  String *arg1 = (String *) 0 ;
  
  arg1 = (String *)jarg1; 
  argv_template_string = arg1;
  
}


DllExport void * SWIGSTDCALL Ada_get_argv_template_string()
{
  void * jresult = 0 ;
  String *result = 0 ;
  
  result = (String *)argv_template_string;
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_argc_template_string(void * jarg1)
{
  String *arg1 = (String *) 0 ;
  
  arg1 = (String *)jarg1; 
  argc_template_string = arg1;
  
}


DllExport void * SWIGSTDCALL Ada_get_argc_template_string()
{
  void * jresult = 0 ;
  String *result = 0 ;
  
  result = (String *)argc_template_string;
  jresult = (void *) result;      
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_tab2()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "  ";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_tab4()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "    ";
  
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_tab8()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "        ";
  
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_new_Dispatcher()
{
  void * jresult = 0 ;
  Dispatcher *result = 0 ;
  
  result = (Dispatcher *)new SwigDirector_Dispatcher();
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_delete_Dispatcher(void * jarg1)
{
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  
  arg1 = (Dispatcher *)jarg1; 
  delete arg1;
  
}


DllExport int SWIGSTDCALL Ada_Dispatcher_emit_one(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->emit_one(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_emit_children(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->emit_children(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_defaultHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->defaultHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_top(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->top(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_applyDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->applyDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_clearDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->clearDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_constantDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->constantDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_extendDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->extendDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_fragmentDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->fragmentDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_importDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->importDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_includeDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->includeDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_insertDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->insertDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_moduleDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->moduleDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_nativeDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->nativeDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_pragmaDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->pragmaDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_typemapDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->typemapDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_typemapitemDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->typemapitemDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_typemapcopyDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->typemapcopyDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_typesDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->typesDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_cDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->cDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_externDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->externDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_enumDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->enumDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_enumvalueDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->enumvalueDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_enumforwardDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->enumforwardDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_classDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_classforwardDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classforwardDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_constructorDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->constructorDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_destructorDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->destructorDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_accessDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->accessDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_usingDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->usingDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_namespaceDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->namespaceDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Dispatcher_templateDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->templateDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Dispatcher_cplus_mode(void * jarg1,
  int jarg2)
{
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Dispatcher::AccessMode arg2 ;
  
  arg1 = (Dispatcher *)jarg1; 
  arg2 = (Dispatcher::AccessMode) jarg2; 
  if (arg1) (arg1)->cplus_mode = arg2;
  
}


DllExport int SWIGSTDCALL Ada_get_Dispatcher_cplus_mode(void * jarg1)
{
  int jresult = 0 ;
  Dispatcher *arg1 = (Dispatcher *) 0 ;
  Dispatcher::AccessMode result;
  
  arg1 = (Dispatcher *)jarg1; 
  result = (Dispatcher::AccessMode) ((arg1)->cplus_mode);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_swigg_c_import_Dispatcher_director_connect (void*   ada_Self,   long  objarg,   int  jswig_mem_own,   int  jweak_global)
{
  Dispatcher *obj = *((Dispatcher **)&objarg);
  SwigDirector_Dispatcher*    director = dynamic_cast<SwigDirector_Dispatcher *>(obj);
  if (director)
  {
    director->swig_connect_director (ada_Self,  jswig_mem_own,  jweak_global);
  }
}


DllExport void SWIGSTDCALL Ada_swigg_c_import_Dispatcher_change_ownership (void*   ada_Self,  long   objarg,  int   jtake_or_release)
{
  Dispatcher *obj = *((Dispatcher **)&objarg);
  SwigDirector_Dispatcher *director = dynamic_cast<SwigDirector_Dispatcher *>(obj);
  if (director) {
    director->swig_java_change_ownership(ada_Self, jtake_or_release ? true : false);
  }
}


DllExport void * SWIGSTDCALL Ada_new_Language()
{
  void * jresult = 0 ;
  Language *result = 0 ;
  
  result = (Language *)new SwigDirector_Language();
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_delete_Language(void * jarg1)
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  delete arg1;
  
}


DllExport int SWIGSTDCALL Ada_Language_emit_one(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->emit_one(arg2);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Language_main(void * jarg1,
  int jarg2,
  void * jarg3)
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  char **arg3 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  arg3      = (char **) jarg3; 
  (arg1)->main(arg2,arg3);
}


DllExport int SWIGSTDCALL Ada_Language_top(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->top(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_applyDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->applyDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_clearDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->clearDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_constantDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->constantDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_extendDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->extendDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_fragmentDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->fragmentDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_importDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->importDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_includeDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->includeDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_insertDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->insertDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_moduleDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->moduleDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_nativeDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->nativeDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_pragmaDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->pragmaDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_typemapDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->typemapDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_typemapcopyDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->typemapcopyDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_typesDirective(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->typesDirective(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_cDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->cDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_externDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->externDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_enumDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->enumDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_enumvalueDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->enumvalueDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_enumforwardDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->enumforwardDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classforwardDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classforwardDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_constructorDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->constructorDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_destructorDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->destructorDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_accessDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->accessDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_namespaceDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->namespaceDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_usingDeclaration(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->usingDeclaration(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_functionHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->functionHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_globalfunctionHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->globalfunctionHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_memberfunctionHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->memberfunctionHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_staticmemberfunctionHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->staticmemberfunctionHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_callbackfunctionHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->callbackfunctionHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_variableHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->variableHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_globalvariableHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->globalvariableHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_membervariableHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->membervariableHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_staticmembervariableHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->staticmembervariableHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_memberconstantHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->memberconstantHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_constructorHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->constructorHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_copyconstructorHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->copyconstructorHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_destructorHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->destructorHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_typedefHandler(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->typedefHandler(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_constantWrapper(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->constantWrapper(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_variableWrapper(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->variableWrapper(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_functionWrapper(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->functionWrapper(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_nativeWrapper(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->nativeWrapper(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classDirector(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classDirector(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classDirectorInit(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classDirectorInit(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classDirectorEnd(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classDirectorEnd(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_unrollVirtualMethods__SWIG_0(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4,
  int jarg5,
  void * jarg6,
  int jarg7)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *arg3 = (Node *) 0 ;
  List *arg4 = (List *) 0 ;
  int arg5 ;
  int *arg6 = 0 ;
  int arg7 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (Node *)jarg3; 
  arg4 = (List *)jarg4; 
  
  arg5 = (int) jarg5; 
  
  
  arg6 = (int *)jarg6;
  
  if (!arg6) 
  {
    SWIG_AdaThrowException (SWIG_AdaNullReferenceException, "int & reference is null");
  }
  
  
  arg7 = (int) jarg7; 
  
  result = (int)(arg1)->unrollVirtualMethods(arg2,arg3,arg4,arg5,*arg6,arg7);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_unrollVirtualMethods__SWIG_1(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4,
  int jarg5,
  void * jarg6)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *arg3 = (Node *) 0 ;
  List *arg4 = (List *) 0 ;
  int arg5 ;
  int *arg6 = 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (Node *)jarg3; 
  arg4 = (List *)jarg4; 
  
  arg5 = (int) jarg5; 
  
  
  arg6 = (int *)jarg6;
  
  if (!arg6) 
  {
    SWIG_AdaThrowException (SWIG_AdaNullReferenceException, "int & reference is null");
  }
  
  result = (int)(arg1)->unrollVirtualMethods(arg2,arg3,arg4,arg5,*arg6);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classDirectorConstructor(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classDirectorConstructor(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classDirectorDefaultConstructor(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classDirectorDefaultConstructor(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classDirectorMethod(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *arg3 = (Node *) 0 ;
  String *arg4 = (String *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (Node *)jarg3; 
  arg4 = (String *)jarg4; 
  result = (int)(arg1)->classDirectorMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classDirectorConstructors(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classDirectorConstructors(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classDirectorDestructor(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classDirectorDestructor(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classDirectorMethods(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classDirectorMethods(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_classDirectorDisown(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->classDirectorDisown(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_validIdentifier(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (String *)jarg2; 
  result = (int)(arg1)->validIdentifier(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_addSymbol(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  Node *arg3 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (Node *)jarg3; 
  result = (int)(arg1)->addSymbol((String const *)arg2,(Node const *)arg3);
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Language_symbolLookup(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (String *)jarg2; 
  result = (Node *)(arg1)->symbolLookup(arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Language_classLookup(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (SwigType *)jarg2; 
  result = (Node *)(arg1)->classLookup(arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Language_enumLookup(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (SwigType *)jarg2; 
  result = (Node *)(arg1)->enumLookup(arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_abstractClassTest(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->abstractClassTest(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_is_assignable(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->is_assignable(arg2);
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Language_runtimeCode(void * jarg1)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  result = (String *)(arg1)->runtimeCode();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Language_defaultExternalRuntimeFilename(void * jarg1)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  result = (String *)(arg1)->defaultExternalRuntimeFilename();
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Language_enable_cplus_runtime_mode(void * jarg1)
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  (arg1)->enable_cplus_runtime_mode();
}


DllExport int SWIGSTDCALL Ada_Language_cplus_runtime_mode(void * jarg1)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  result = (int)(arg1)->cplus_runtime_mode();
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Language_allow_protected_and_private_Members(void * jarg1)
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  (arg1)->allow_protected_and_private_Members();
}


DllExport void SWIGSTDCALL Ada_Language_allow_directors__SWIG_0(void * jarg1,
  int jarg2)
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  (arg1)->allow_directors(arg2);
}


DllExport void SWIGSTDCALL Ada_Language_allow_directors__SWIG_1(void * jarg1)
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  (arg1)->allow_directors();
}


DllExport int SWIGSTDCALL Ada_Language_directorsEnabled(void * jarg1)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  result = (int)((Language const *)arg1)->directorsEnabled();
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Language_allow_dirprot__SWIG_0(void * jarg1,
  int jarg2)
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  (arg1)->allow_dirprot(arg2);
}


DllExport void SWIGSTDCALL Ada_Language_allow_dirprot__SWIG_1(void * jarg1)
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  (arg1)->allow_dirprot();
}


DllExport void SWIGSTDCALL Ada_Language_allow_allprotected__SWIG_0(void * jarg1,
  int jarg2)
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  (arg1)->allow_allprotected(arg2);
}


DllExport void SWIGSTDCALL Ada_Language_allow_allprotected__SWIG_1(void * jarg1)
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  (arg1)->allow_allprotected();
}


DllExport int SWIGSTDCALL Ada_Language_dirprot_mode(void * jarg1)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  result = (int)((Language const *)arg1)->dirprot_mode();
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_need_nonpublic_ctor(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->need_nonpublic_ctor(arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_need_nonpublic_member(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)(arg1)->need_nonpublic_member(arg2);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Language_setSubclassInstanceCheck(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (String *)jarg2; 
  (arg1)->setSubclassInstanceCheck(arg2);
}


DllExport void SWIGSTDCALL Ada_Language_setOverloadResolutionTemplates(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  (arg1)->setOverloadResolutionTemplates(arg2,arg3);
}


DllExport void SWIGSTDCALL Ada_Language_allow_multiple_input__SWIG_0(void * jarg1,
  int jarg2)
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  (arg1)->allow_multiple_input(arg2);
}


DllExport void SWIGSTDCALL Ada_Language_allow_multiple_input__SWIG_1(void * jarg1)
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  (arg1)->allow_multiple_input();
}


DllExport void SWIGSTDCALL Ada_Language_allow_overloading__SWIG_0(void * jarg1,
  int jarg2)
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  (arg1)->allow_overloading(arg2);
}


DllExport void SWIGSTDCALL Ada_Language_allow_overloading__SWIG_1(void * jarg1)
{
  Language *arg1 = (Language *) 0 ;
  
  arg1 = (Language *)jarg1; 
  (arg1)->allow_overloading();
}


DllExport int SWIGSTDCALL Ada_Language_is_wrapping_class(void * jarg1)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  result = (int)(arg1)->is_wrapping_class();
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Language_getCurrentClass(void * jarg1)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  result = (Node *)((Language const *)arg1)->getCurrentClass();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Language_getClassName(void * jarg1)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  result = (String *)((Language const *)arg1)->getClassName();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Language_getClassHash(void * jarg1)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  Hash *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  result = (Hash *)((Language const *)arg1)->getClassHash();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Language_getClassPrefix(void * jarg1)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  result = (String *)((Language const *)arg1)->getClassPrefix();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Language_getClassType(void * jarg1)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  result = (String *)((Language const *)arg1)->getClassType();
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Language_is_smart_pointer(void * jarg1)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  result = (int)((Language const *)arg1)->is_smart_pointer();
  jresult = result; 
  return jresult;
}


DllExport unsigned int SWIGSTDCALL Ada_Language_extraDirectorProtectedCPPMethodsRequired(void * jarg1)
{
  unsigned int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  bool result;
  
  arg1 = (Language *)jarg1; 
  result = (bool)((Language const *)arg1)->extraDirectorProtectedCPPMethodsRequired();
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Language_none_comparison(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (String *)jarg2; 
  if (arg1) (arg1)->none_comparison = arg2;
  
}


DllExport void * SWIGSTDCALL Ada_get_Language_none_comparison(void * jarg1)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  result = (String *) ((arg1)->none_comparison);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Language_director_ctor_code(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (String *)jarg2; 
  if (arg1) (arg1)->director_ctor_code = arg2;
  
}


DllExport void * SWIGSTDCALL Ada_get_Language_director_ctor_code(void * jarg1)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  result = (String *) ((arg1)->director_ctor_code);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Language_director_prot_ctor_code(void * jarg1,
  void * jarg2)
{
  Language *arg1 = (Language *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (Language *)jarg1; 
  arg2 = (String *)jarg2; 
  if (arg1) (arg1)->director_prot_ctor_code = arg2;
  
}


DllExport void * SWIGSTDCALL Ada_get_Language_director_prot_ctor_code(void * jarg1)
{
  void * jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  String *result = 0 ;
  
  arg1 = (Language *)jarg1; 
  result = (String *) ((arg1)->director_prot_ctor_code);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Language_director_multiple_inheritance(void * jarg1,
  int jarg2)
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  if (arg1) (arg1)->director_multiple_inheritance = arg2;
  
}


DllExport int SWIGSTDCALL Ada_get_Language_director_multiple_inheritance(void * jarg1)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  result = (int) ((arg1)->director_multiple_inheritance);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_set_Language_director_language(void * jarg1,
  int jarg2)
{
  Language *arg1 = (Language *) 0 ;
  int arg2 ;
  
  arg1 = (Language *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  if (arg1) (arg1)->director_language = arg2;
  
}


DllExport int SWIGSTDCALL Ada_get_Language_director_language(void * jarg1)
{
  int jresult = 0 ;
  Language *arg1 = (Language *) 0 ;
  int result;
  
  arg1 = (Language *)jarg1; 
  result = (int) ((arg1)->director_language);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_swigg_c_import_Language_director_connect (void*   ada_Self,   long  objarg,   int  jswig_mem_own,   int  jweak_global)
{
  Language *obj = *((Language **)&objarg);
  SwigDirector_Language*    director = dynamic_cast<SwigDirector_Language *>(obj);
  if (director)
  {
    director->swig_connect_director (ada_Self,  jswig_mem_own,  jweak_global);
  }
}


DllExport void SWIGSTDCALL Ada_swigg_c_import_Language_change_ownership (void*   ada_Self,  long   objarg,  int   jtake_or_release)
{
  Language *obj = *((Language **)&objarg);
  SwigDirector_Language *director = dynamic_cast<SwigDirector_Language *>(obj);
  if (director) {
    director->swig_java_change_ownership(ada_Self, jtake_or_release ? true : false);
  }
}


DllExport void * SWIGSTDCALL Ada_Lang_CurrentClass()
{
  void * jresult = 0 ;
  Node *result = 0 ;
  
  result = (Node *)Lang_CurrentClass();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Lang_ClassName()
{
  void * jresult = 0 ;
  String *result = 0 ;
  
  result = (String *)Lang_ClassName();
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Lang_AddExtern()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Lang_AddExtern();
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Lang_ForceExtern()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Lang_ForceExtern();
  jresult = result; 
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Lang_first_nontemplate(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)Lang_first_nontemplate(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_SWIG_main(int jarg1,
  void * jarg2,
  void * jarg3)
{
  int jresult = 0 ;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  Language *arg3 = (Language *) 0 ;
  int result;
  
  
  arg1 = (int) jarg1; 
  
  arg2 = (char **)jarg2; 
  arg3 = (Language *)jarg3; 
  result = (int)SWIG_main(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_emit_parameter_variables(void * jarg1,
  void * jarg2)
{
  ParmList *arg1 = (ParmList *) 0 ;
  Wrapper *arg2 = (Wrapper *) 0 ;
  
  arg1 = (ParmList *)jarg1; 
  arg2 = (Wrapper *)jarg2; 
  emit_parameter_variables(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_emit_return_variable(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  Node *arg1 = (Node *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  Wrapper *arg3 = (Wrapper *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (SwigType *)jarg2; 
  arg3 = (Wrapper *)jarg3; 
  emit_return_variable(arg1,arg2,arg3);
}


DllExport void SWIGSTDCALL Ada_SWIG_exit(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  SWIG_exit(arg1);
}


DllExport void SWIGSTDCALL Ada_SWIG_config_file(void * jarg1)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  SWIG_config_file((DOH const *)arg1);
}


DllExport void * SWIGSTDCALL Ada_SWIG_output_directory()
{
  void * jresult = 0 ;
  String *result = 0 ;
  
  result = (String *)SWIG_output_directory();
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_SWIG_config_cppext(char * jarg1)
{
  char *arg1 = (char *) 0 ;
  
  arg1 = jarg1; 
  SWIG_config_cppext((char const *)arg1);
}


DllExport void SWIGSTDCALL Ada_SWIG_library_directory(char * jarg1)
{
  char *arg1 = (char *) 0 ;
  
  arg1 = jarg1; 
  SWIG_library_directory((char const *)arg1);
}


DllExport int SWIGSTDCALL Ada_emit_num_arguments(void * jarg1)
{
  int jresult = 0 ;
  ParmList *arg1 = (ParmList *) 0 ;
  int result;
  
  arg1 = (ParmList *)jarg1; 
  result = (int)emit_num_arguments(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_emit_num_required(void * jarg1)
{
  int jresult = 0 ;
  ParmList *arg1 = (ParmList *) 0 ;
  int result;
  
  arg1 = (ParmList *)jarg1; 
  result = (int)emit_num_required(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_emit_isvarargs(void * jarg1)
{
  int jresult = 0 ;
  ParmList *arg1 = (ParmList *) 0 ;
  int result;
  
  arg1 = (ParmList *)jarg1; 
  result = (int)emit_isvarargs(arg1);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_emit_attach_parmmaps(void * jarg1,
  void * jarg2)
{
  ParmList *arg1 = (ParmList *) 0 ;
  Wrapper *arg2 = (Wrapper *) 0 ;
  
  arg1 = (ParmList *)jarg1; 
  arg2 = (Wrapper *)jarg2; 
  emit_attach_parmmaps(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_emit_mark_varargs(void * jarg1)
{
  ParmList *arg1 = (ParmList *) 0 ;
  
  arg1 = (ParmList *)jarg1; 
  emit_mark_varargs(arg1);
}


DllExport void * SWIGSTDCALL Ada_emit_action(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (String *)emit_action(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_emit_action_code(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  result = (int)emit_action_code(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_overload_check(void * jarg1)
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Swig_overload_check(arg1);
}


DllExport void * SWIGSTDCALL Ada_Swig_overload_dispatch(void * jarg1,
  void * jarg2,
  int* jarg3)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  int *arg3 = (int *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  
  arg3 = (int *) jarg3;
  
  result = (String *)Swig_overload_dispatch(arg1,(DOH const *)arg2,arg3);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_overload_dispatch_cast(void * jarg1,
  void * jarg2,
  int* jarg3)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  int *arg3 = (int *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  
  arg3 = (int *) jarg3;
  
  result = (String *)Swig_overload_dispatch_cast(arg1,(DOH const *)arg2,arg3);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_overload_dispatch_fast(void * jarg1,
  void * jarg2,
  int* jarg3)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String_or_char *arg2 = (String_or_char *) 0 ;
  int *arg3 = (int *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String_or_char *)jarg2; 
  
  arg3 = (int *) jarg3;
  
  result = (String *)Swig_overload_dispatch_fast(arg1,(DOH const *)arg2,arg3);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_cplus_value_type(void * jarg1)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  result = (SwigType *)cplus_value_type(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_csuperclass_call(void * jarg1,
  void * jarg2,
  void * jarg3)
{
  void * jresult = 0 ;
  String *arg1 = (String *) 0 ;
  String *arg2 = (String *) 0 ;
  ParmList *arg3 = (ParmList *) 0 ;
  String *result = 0 ;
  
  arg1 = (String *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (ParmList *)jarg3; 
  result = (String *)Swig_csuperclass_call(arg1,arg2,arg3);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_class_declaration(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = (String *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (String *)jarg2; 
  result = (String *)Swig_class_declaration(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_class_name(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (String *)Swig_class_name(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_method_call(void * jarg1,
  void * jarg2)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  ParmList *arg2 = (ParmList *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (ParmList *)jarg2; 
  result = (String *)Swig_method_call(arg1,arg2);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_method_decl(void * jarg1,
  void * jarg2,
  void * jarg3,
  void * jarg4,
  int jarg5,
  int jarg6)
{
  void * jresult = 0 ;
  SwigType *arg1 = (SwigType *) 0 ;
  SwigType *arg2 = (SwigType *) 0 ;
  String_or_char *arg3 = (String_or_char *) 0 ;
  List *arg4 = (List *) 0 ;
  int arg5 ;
  int arg6 ;
  String *result = 0 ;
  
  arg1 = (SwigType *)jarg1; 
  arg2 = (SwigType *)jarg2; 
  arg3 = (String_or_char *)jarg3; 
  arg4 = (List *)jarg4; 
  
  arg5 = (int) jarg5; 
  
  
  arg6 = (int) jarg6; 
  
  result = (String *)Swig_method_decl(arg1,arg2,(DOH const *)arg3,arg4,arg5,arg6);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_director_declaration(void * jarg1)
{
  void * jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  String *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (String *)Swig_director_declaration(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_director_emit_dynamic_cast(void * jarg1,
  void * jarg2)
{
  Node *arg1 = (Node *) 0 ;
  Wrapper *arg2 = (Wrapper *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Wrapper *)jarg2; 
  Swig_director_emit_dynamic_cast(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_SWIG_typemap_lang(char * jarg1)
{
  char *arg1 = (char *) 0 ;
  
  arg1 = jarg1; 
  SWIG_typemap_lang((char const *)arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_register_module(char * jarg1,
  void * jarg2)
{
  char *arg1 = (char *) 0 ;
  ModuleFactory arg2 = (ModuleFactory) 0 ;
  
  arg1 = jarg1; 
  arg2 = (ModuleFactory)jarg2; 
  Swig_register_module((char const *)arg1,arg2);
}


DllExport void * SWIGSTDCALL Ada_Swig_find_module(char * jarg1)
{
  void * jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ModuleFactory result;
  
  arg1 = jarg1; 
  result = (ModuleFactory)Swig_find_module((char const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_is_public(void * jarg1)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)is_public(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_is_private(void * jarg1)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)is_private(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_is_protected(void * jarg1)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)is_protected(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_is_member_director__SWIG_0(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)is_member_director(arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_is_member_director__SWIG_1(void * jarg1)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)is_member_director(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_is_non_virtual_protected_access(void * jarg1)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)is_non_virtual_protected_access(arg1);
  jresult = result; 
  return jresult;
}


DllExport int SWIGSTDCALL Ada_use_naturalvar_mode(void * jarg1)
{
  int jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)use_naturalvar_mode(arg1);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Wrapper_virtual_elimination_mode_set(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Wrapper_virtual_elimination_mode_set(arg1);
}


DllExport void SWIGSTDCALL Ada_Wrapper_fast_dispatch_mode_set(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Wrapper_fast_dispatch_mode_set(arg1);
}


DllExport void SWIGSTDCALL Ada_Wrapper_cast_dispatch_mode_set(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Wrapper_cast_dispatch_mode_set(arg1);
}


DllExport void SWIGSTDCALL Ada_Wrapper_naturalvar_mode_set(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Wrapper_naturalvar_mode_set(arg1);
}


DllExport void SWIGSTDCALL Ada_clean_overloaded(void * jarg1)
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  clean_overloaded(arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_contracts(void * jarg1)
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Swig_contracts(arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_contract_mode_set(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Swig_contract_mode_set(arg1);
}


DllExport int SWIGSTDCALL Ada_Swig_contract_mode_get()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Swig_contract_mode_get();
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_browser(void * jarg1,
  int jarg2)
{
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  
  arg2 = (int) jarg2; 
  
  Swig_browser(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_Swig_default_allocators(void * jarg1)
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Swig_default_allocators(arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_process_types(void * jarg1)
{
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Swig_process_types(arg1);
}


DllExport void * SWIGSTDCALL Ada_Swig_add_directory(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  List *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (List *)Swig_add_directory((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_push_directory(void * jarg1)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  Swig_push_directory((DOH const *)arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_pop_directory()
{
  Swig_pop_directory();
}


DllExport void * SWIGSTDCALL Ada_Swig_last_file()
{
  void * jresult = 0 ;
  String *result = 0 ;
  
  result = (String *)Swig_last_file();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_search_path()
{
  void * jresult = 0 ;
  List *result = 0 ;
  
  result = (List *)Swig_search_path();
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_open(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  FILE *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (FILE *)Swig_open((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_read_file(void * jarg1)
{
  void * jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  String *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  result = (String *)Swig_read_file(arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_include(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (String *)Swig_include((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport void * SWIGSTDCALL Ada_Swig_include_sys(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  String *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (String *)Swig_include_sys((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport int SWIGSTDCALL Ada_Swig_insert_file(void * jarg1,
  void * jarg2)
{
  int jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  File *arg2 = (File *) 0 ;
  int result;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (File *)jarg2; 
  result = (int)Swig_insert_file((DOH const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_set_push_dir(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Swig_set_push_dir(arg1);
}


DllExport int SWIGSTDCALL Ada_Swig_get_push_dir()
{
  int jresult = 0 ;
  int result;
  
  result = (int)Swig_get_push_dir();
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_register_filebyname(void * jarg1,
  void * jarg2)
{
  String_or_char *arg1 = (String_or_char *) 0 ;
  File *arg2 = (File *) 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  arg2 = (File *)jarg2; 
  Swig_register_filebyname((DOH const *)arg1,arg2);
}


DllExport void * SWIGSTDCALL Ada_Swig_filebyname(void * jarg1)
{
  void * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  File *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (File *)Swig_filebyname((DOH const *)arg1);
  jresult = (void *) result;      
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_Swig_file_suffix(void * jarg1)
{
  char * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  char *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (char *)Swig_file_suffix((DOH const *)arg1);
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_Swig_file_basename(void * jarg1)
{
  char * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  char *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (char *)Swig_file_basename((DOH const *)arg1);
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_Swig_file_filename(void * jarg1)
{
  char * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  char *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (char *)Swig_file_filename((DOH const *)arg1);
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_Swig_file_dirname(void * jarg1)
{
  char * jresult = 0 ;
  String_or_char *arg1 = (String_or_char *) 0 ;
  char *result = 0 ;
  
  arg1 = (String_or_char *)jarg1; 
  result = (char *)Swig_file_dirname((DOH const *)arg1);
  jresult = result; 
  return jresult;
}


DllExport char * SWIGSTDCALL Ada_get_SWIG_FILE_DELIMITER()
{
  char * jresult = 0 ;
  char *result = 0 ;
  
  result = (char *) "/";
  
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_init_args(int jarg1,
  void * jarg2)
{
  int arg1 ;
  char **arg2 = (char **) 0 ;
  
  
  arg1 = (int) jarg1; 
  
  arg2 = (char **)jarg2; 
  Swig_init_args(arg1,arg2);
}


DllExport void SWIGSTDCALL Ada_Swig_mark_arg(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Swig_mark_arg(arg1);
}


DllExport int SWIGSTDCALL Ada_Swig_check_marked(int jarg1)
{
  int jresult = 0 ;
  int arg1 ;
  int result;
  
  
  arg1 = (int) jarg1; 
  
  result = (int)Swig_check_marked(arg1);
  jresult = result; 
  return jresult;
}


DllExport void SWIGSTDCALL Ada_Swig_check_options(int jarg1)
{
  int arg1 ;
  
  
  arg1 = (int) jarg1; 
  
  Swig_check_options(arg1);
}


DllExport void SWIGSTDCALL Ada_Swig_arg_error()
{
  Swig_arg_error();
}



DllExport Dispatcher * SWIGSTDCALL Ada_LanguageUpcast (Language *objectRef) {
    return (Dispatcher *)objectRef;
}

#ifdef __cplusplus
}
#endif
SwigDirector_Dispatcher::SwigDirector_Dispatcher(): Dispatcher(), Swig::Director() {
}


extern "C"
{
  int    SwigDirector_Dispatcher_moduleDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_moduleDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::moduleDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[0]) {
    return Dispatcher::moduleDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_moduleDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_insertDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_insertDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::insertDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[1]) {
    return Dispatcher::insertDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_insertDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_includeDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_includeDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::includeDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[2]) {
    return Dispatcher::includeDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_includeDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_importDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_importDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::importDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[3]) {
    return Dispatcher::importDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_importDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_fragmentDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_fragmentDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::fragmentDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[4]) {
    return Dispatcher::fragmentDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_fragmentDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_extendDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_extendDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::extendDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[5]) {
    return Dispatcher::extendDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_extendDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_constantDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_constantDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::constantDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[6]) {
    return Dispatcher::constantDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_constantDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_clearDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_clearDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::clearDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[7]) {
    return Dispatcher::clearDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_clearDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_applyDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_applyDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::applyDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[8]) {
    return Dispatcher::applyDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_applyDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_top (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_top_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::top(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[9]) {
    // tbd: raise an appropriate Ada exception
    //SWIG_JavaThrowException(jenv, SWIG_JavaDirectorPureVirtual,
    //      "Attempted to invoke pure virtual method Dispatcher::top.");
    return result;
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_top (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_defaultHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_defaultHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::defaultHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[10]) {
    return Dispatcher::defaultHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_defaultHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_emit_children (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_emit_children_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::emit_children(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[11]) {
    return Dispatcher::emit_children(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_emit_children (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_emit_one (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_emit_one_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::emit_one(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[12]) {
    return Dispatcher::emit_one(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_emit_one (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_nativeDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_nativeDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::nativeDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[13]) {
    return Dispatcher::nativeDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_nativeDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_pragmaDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_pragmaDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::pragmaDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[14]) {
    return Dispatcher::pragmaDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_pragmaDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_typemapDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_typemapDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::typemapDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[15]) {
    return Dispatcher::typemapDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_typemapDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_typemapitemDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_typemapitemDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::typemapitemDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[16]) {
    return Dispatcher::typemapitemDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_typemapitemDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_typemapcopyDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_typemapcopyDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::typemapcopyDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[17]) {
    return Dispatcher::typemapcopyDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_typemapcopyDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_typesDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_typesDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::typesDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[18]) {
    return Dispatcher::typesDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_typesDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_cDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_cDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::cDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[19]) {
    return Dispatcher::cDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_cDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_externDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_externDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::externDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[20]) {
    return Dispatcher::externDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_externDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_enumDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_enumDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::enumDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[21]) {
    return Dispatcher::enumDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_enumDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_enumvalueDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_enumvalueDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::enumvalueDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[22]) {
    return Dispatcher::enumvalueDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_enumvalueDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_enumforwardDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_enumforwardDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::enumforwardDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[23]) {
    return Dispatcher::enumforwardDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_enumforwardDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_classDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_classDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::classDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[24]) {
    return Dispatcher::classDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_classDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_classforwardDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_classforwardDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::classforwardDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[25]) {
    return Dispatcher::classforwardDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_classforwardDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_constructorDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_constructorDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::constructorDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[26]) {
    return Dispatcher::constructorDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_constructorDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_destructorDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_destructorDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::destructorDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[27]) {
    return Dispatcher::destructorDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_destructorDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_accessDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_accessDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::accessDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[28]) {
    return Dispatcher::accessDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_accessDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_usingDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_usingDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::usingDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[29]) {
    return Dispatcher::usingDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_usingDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_namespaceDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_namespaceDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::namespaceDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[30]) {
    return Dispatcher::namespaceDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_namespaceDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Dispatcher_templateDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Dispatcher_templateDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Dispatcher::templateDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[31]) {
    return Dispatcher::templateDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Dispatcher_templateDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}

SwigDirector_Dispatcher::~SwigDirector_Dispatcher() {
  swig_disconnect_director_self("swig_Director_disconnect");
}


void SwigDirector_Dispatcher::swig_connect_director(void*    ada_Self,  bool    swig_mem_own, bool weak_global)
{
  swig_self_ = ada_Self;
  swig_override [0] = SwigDirector_Dispatcher_moduleDirective_is_overridden_dispatch (swig_self_);
  swig_override [1] = SwigDirector_Dispatcher_insertDirective_is_overridden_dispatch (swig_self_);
  swig_override [2] = SwigDirector_Dispatcher_includeDirective_is_overridden_dispatch (swig_self_);
  swig_override [3] = SwigDirector_Dispatcher_importDirective_is_overridden_dispatch (swig_self_);
  swig_override [4] = SwigDirector_Dispatcher_fragmentDirective_is_overridden_dispatch (swig_self_);
  swig_override [5] = SwigDirector_Dispatcher_extendDirective_is_overridden_dispatch (swig_self_);
  swig_override [6] = SwigDirector_Dispatcher_constantDirective_is_overridden_dispatch (swig_self_);
  swig_override [7] = SwigDirector_Dispatcher_clearDirective_is_overridden_dispatch (swig_self_);
  swig_override [8] = SwigDirector_Dispatcher_applyDirective_is_overridden_dispatch (swig_self_);
  swig_override [9] = SwigDirector_Dispatcher_top_is_overridden_dispatch (swig_self_);
  swig_override [10] = SwigDirector_Dispatcher_defaultHandler_is_overridden_dispatch (swig_self_);
  swig_override [11] = SwigDirector_Dispatcher_emit_children_is_overridden_dispatch (swig_self_);
  swig_override [12] = SwigDirector_Dispatcher_emit_one_is_overridden_dispatch (swig_self_);
  swig_override [13] = SwigDirector_Dispatcher_nativeDirective_is_overridden_dispatch (swig_self_);
  swig_override [14] = SwigDirector_Dispatcher_pragmaDirective_is_overridden_dispatch (swig_self_);
  swig_override [15] = SwigDirector_Dispatcher_typemapDirective_is_overridden_dispatch (swig_self_);
  swig_override [16] = SwigDirector_Dispatcher_typemapitemDirective_is_overridden_dispatch (swig_self_);
  swig_override [17] = SwigDirector_Dispatcher_typemapcopyDirective_is_overridden_dispatch (swig_self_);
  swig_override [18] = SwigDirector_Dispatcher_typesDirective_is_overridden_dispatch (swig_self_);
  swig_override [19] = SwigDirector_Dispatcher_cDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [20] = SwigDirector_Dispatcher_externDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [21] = SwigDirector_Dispatcher_enumDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [22] = SwigDirector_Dispatcher_enumvalueDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [23] = SwigDirector_Dispatcher_enumforwardDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [24] = SwigDirector_Dispatcher_classDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [25] = SwigDirector_Dispatcher_classforwardDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [26] = SwigDirector_Dispatcher_constructorDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [27] = SwigDirector_Dispatcher_destructorDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [28] = SwigDirector_Dispatcher_accessDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [29] = SwigDirector_Dispatcher_usingDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [30] = SwigDirector_Dispatcher_namespaceDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [31] = SwigDirector_Dispatcher_templateDeclaration_is_overridden_dispatch (swig_self_);
}


SwigDirector_Language::SwigDirector_Language(): Language(), Swig::Director() {
}


extern "C"
{
  void *    SwigDirector_Language_defaultExternalRuntimeFilename (void*   swig_self);

  bool    SwigDirector_Language_defaultExternalRuntimeFilename_is_overridden_dispatch (void*    swig_self);
};

String *SwigDirector_Language::defaultExternalRuntimeFilename() {
  String *result = 0 ;
  void * jresult  = 0 ;
  
  if (!swig_override[0]) {
    return Language::defaultExternalRuntimeFilename();
  }
  if (swig_self_ != NULL)
  {
    jresult = (void *) SwigDirector_Language_defaultExternalRuntimeFilename (swig_self_);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = *(String **)&jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_addSymbol (void*   swig_self,void *    js,void *    jn);

  bool    SwigDirector_Language_addSymbol_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::addSymbol(String const *s, Node const *n) {
  int result ;
  int jresult  = 0 ;
  void * js = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[1]) {
    return Language::addSymbol(s,n);
  }
  if (swig_self_ != NULL)
  {
    *((String **) &js) = (String *) s; 
    
    
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_addSymbol (swig_self_, js, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  unsigned int    SwigDirector_Language_extraDirectorProtectedCPPMethodsRequired (void*   swig_self);

  bool    SwigDirector_Language_extraDirectorProtectedCPPMethodsRequired_is_overridden_dispatch (void*    swig_self);
};

bool SwigDirector_Language::extraDirectorProtectedCPPMethodsRequired() const {
  bool result ;
  unsigned int jresult  = 0 ;
  
  if (!swig_override[2]) {
    return Language::extraDirectorProtectedCPPMethodsRequired();
  }
  if (swig_self_ != NULL)
  {
    jresult = (unsigned int) SwigDirector_Language_extraDirectorProtectedCPPMethodsRequired (swig_self_);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = jresult ? true : false; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}

SwigDirector_Language::~SwigDirector_Language() {
  swig_disconnect_director_self("swig_Director_disconnect");
}



extern "C"
{
  void    SwigDirector_Language_main (void*   swig_self,int    jargc,void *    jargv);

  bool    SwigDirector_Language_main_is_overridden_dispatch (void*    swig_self);
};

void SwigDirector_Language::main(int argc, char *argv[]) {
  int jargc  ;
  void * jargv  ;
  
  if (!swig_override[3]) {
    Language::main(argc,argv);
    return;
  }
  if (swig_self_ != NULL)
  {
    jargc = argc;
    
    *((char ***) &jargv) = (char **) argv; 
    
    SwigDirector_Language_main (swig_self_, jargc, jargv);
    //if (jenv->ExceptionOccurred()) return ;
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
}


extern "C"
{
  int    SwigDirector_Language_unrollVirtualMethods_SWIG_1 (void*   swig_self,void *    jn,void *    jparent,void *    jvm,int    jdefault_director,void *    jvirtual_destructor);

  bool    SwigDirector_Language_unrollVirtualMethods_SWIG_1_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::unrollVirtualMethods(Node *n, Node *parent, List *vm, int default_director, int &virtual_destructor) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  void * jparent = 0 ;
  void * jvm = 0 ;
  int jdefault_director  ;
  void * jvirtual_destructor = 0 ;
  
  if (!swig_override[4]) {
    return Language::unrollVirtualMethods(n,parent,vm,default_director,virtual_destructor);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    
    *((Node **) &jparent) = (Node *) parent; 
    
    
    *((List **) &jvm) = (List *) vm; 
    
    jdefault_director = default_director;
    
    *(int **) &jvirtual_destructor = (int *) &virtual_destructor; 
    
    jresult = (int) SwigDirector_Language_unrollVirtualMethods_SWIG_1 (swig_self_, jn, jparent, jvm, jdefault_director, jvirtual_destructor);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_unrollVirtualMethods_SWIG_0 (void*   swig_self,void *    jn,void *    jparent,void *    jvm,int    jdefault_director,void *    jvirtual_destructor,int    jprotectedbase);

  bool    SwigDirector_Language_unrollVirtualMethods_SWIG_0_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::unrollVirtualMethods(Node *n, Node *parent, List *vm, int default_director, int &virtual_destructor, int protectedbase) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  void * jparent = 0 ;
  void * jvm = 0 ;
  int jdefault_director  ;
  void * jvirtual_destructor = 0 ;
  int jprotectedbase  ;
  
  if (!swig_override[5]) {
    return Language::unrollVirtualMethods(n,parent,vm,default_director,virtual_destructor,protectedbase);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    
    *((Node **) &jparent) = (Node *) parent; 
    
    
    *((List **) &jvm) = (List *) vm; 
    
    jdefault_director = default_director;
    
    *(int **) &jvirtual_destructor = (int *) &virtual_destructor; 
    
    jprotectedbase = protectedbase;
    jresult = (int) SwigDirector_Language_unrollVirtualMethods_SWIG_0 (swig_self_, jn, jparent, jvm, jdefault_director, jvirtual_destructor, jprotectedbase);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  void *    SwigDirector_Language_runtimeCode (void*   swig_self);

  bool    SwigDirector_Language_runtimeCode_is_overridden_dispatch (void*    swig_self);
};

String *SwigDirector_Language::runtimeCode() {
  String *result = 0 ;
  void * jresult  = 0 ;
  
  if (!swig_override[6]) {
    return Language::runtimeCode();
  }
  if (swig_self_ != NULL)
  {
    jresult = (void *) SwigDirector_Language_runtimeCode (swig_self_);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = *(String **)&jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_is_assignable (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_is_assignable_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::is_assignable(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[7]) {
    return Language::is_assignable(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_is_assignable (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_abstractClassTest (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_abstractClassTest_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::abstractClassTest(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[8]) {
    return Language::abstractClassTest(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_abstractClassTest (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  void *    SwigDirector_Language_enumLookup (void*   swig_self,void *    js);

  bool    SwigDirector_Language_enumLookup_is_overridden_dispatch (void*    swig_self);
};

Node *SwigDirector_Language::enumLookup(SwigType *s) {
  Node *result = 0 ;
  void * jresult  = 0 ;
  void * js = 0 ;
  
  if (!swig_override[9]) {
    return Language::enumLookup(s);
  }
  if (swig_self_ != NULL)
  {
    *((SwigType **) &js) = (SwigType *) s; 
    
    jresult = (void *) SwigDirector_Language_enumLookup (swig_self_, js);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = *(Node **)&jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  void *    SwigDirector_Language_classLookup (void*   swig_self,void *    js);

  bool    SwigDirector_Language_classLookup_is_overridden_dispatch (void*    swig_self);
};

Node *SwigDirector_Language::classLookup(SwigType *s) {
  Node *result = 0 ;
  void * jresult  = 0 ;
  void * js = 0 ;
  
  if (!swig_override[10]) {
    return Language::classLookup(s);
  }
  if (swig_self_ != NULL)
  {
    *((SwigType **) &js) = (SwigType *) s; 
    
    jresult = (void *) SwigDirector_Language_classLookup (swig_self_, js);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = *(Node **)&jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  void *    SwigDirector_Language_symbolLookup (void*   swig_self,void *    js);

  bool    SwigDirector_Language_symbolLookup_is_overridden_dispatch (void*    swig_self);
};

Node *SwigDirector_Language::symbolLookup(String *s) {
  Node *result = 0 ;
  void * jresult  = 0 ;
  void * js = 0 ;
  
  if (!swig_override[11]) {
    return Language::symbolLookup(s);
  }
  if (swig_self_ != NULL)
  {
    *((String **) &js) = (String *) s; 
    
    jresult = (void *) SwigDirector_Language_symbolLookup (swig_self_, js);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = *(Node **)&jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_validIdentifier (void*   swig_self,void *    js);

  bool    SwigDirector_Language_validIdentifier_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::validIdentifier(String *s) {
  int result ;
  int jresult  = 0 ;
  void * js = 0 ;
  
  if (!swig_override[12]) {
    return Language::validIdentifier(s);
  }
  if (swig_self_ != NULL)
  {
    *((String **) &js) = (String *) s; 
    
    jresult = (int) SwigDirector_Language_validIdentifier (swig_self_, js);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classDirectorDisown (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classDirectorDisown_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classDirectorDisown(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[13]) {
    return Language::classDirectorDisown(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classDirectorDisown (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classDirectorMethods (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classDirectorMethods_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classDirectorMethods(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[14]) {
    return Language::classDirectorMethods(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classDirectorMethods (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classDirectorDestructor (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classDirectorDestructor_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classDirectorDestructor(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[15]) {
    return Language::classDirectorDestructor(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classDirectorDestructor (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classDirectorConstructors (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classDirectorConstructors_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classDirectorConstructors(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[16]) {
    return Language::classDirectorConstructors(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classDirectorConstructors (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classDirectorMethod (void*   swig_self,void *    jn,void *    jparent,void *    jsuper);

  bool    SwigDirector_Language_classDirectorMethod_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classDirectorMethod(Node *n, Node *parent, String *super) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  void * jparent = 0 ;
  void * jsuper = 0 ;
  
  if (!swig_override[17]) {
    return Language::classDirectorMethod(n,parent,super);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    
    *((Node **) &jparent) = (Node *) parent; 
    
    
    *((String **) &jsuper) = (String *) super; 
    
    jresult = (int) SwigDirector_Language_classDirectorMethod (swig_self_, jn, jparent, jsuper);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classDirectorDefaultConstructor (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classDirectorDefaultConstructor_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classDirectorDefaultConstructor(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[18]) {
    return Language::classDirectorDefaultConstructor(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classDirectorDefaultConstructor (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classDirectorConstructor (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classDirectorConstructor_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classDirectorConstructor(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[19]) {
    return Language::classDirectorConstructor(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classDirectorConstructor (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classDirectorEnd (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classDirectorEnd_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classDirectorEnd(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[20]) {
    return Language::classDirectorEnd(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classDirectorEnd (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classDirectorInit (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classDirectorInit_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classDirectorInit(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[21]) {
    return Language::classDirectorInit(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classDirectorInit (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classDirector (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classDirector_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classDirector(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[22]) {
    return Language::classDirector(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classDirector (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_nativeWrapper (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_nativeWrapper_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::nativeWrapper(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[23]) {
    return Language::nativeWrapper(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_nativeWrapper (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_functionWrapper (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_functionWrapper_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::functionWrapper(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[24]) {
    return Language::functionWrapper(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_functionWrapper (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_variableWrapper (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_variableWrapper_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::variableWrapper(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[25]) {
    return Language::variableWrapper(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_variableWrapper (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_constantWrapper (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_constantWrapper_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::constantWrapper(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[26]) {
    return Language::constantWrapper(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_constantWrapper (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_typedefHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_typedefHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::typedefHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[27]) {
    return Language::typedefHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_typedefHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[28]) {
    return Language::classHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_destructorHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_destructorHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::destructorHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[29]) {
    return Language::destructorHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_destructorHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_copyconstructorHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_copyconstructorHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::copyconstructorHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[30]) {
    return Language::copyconstructorHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_copyconstructorHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_constructorHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_constructorHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::constructorHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[31]) {
    return Language::constructorHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_constructorHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_memberconstantHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_memberconstantHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::memberconstantHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[32]) {
    return Language::memberconstantHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_memberconstantHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_staticmembervariableHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_staticmembervariableHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::staticmembervariableHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[33]) {
    return Language::staticmembervariableHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_staticmembervariableHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_membervariableHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_membervariableHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::membervariableHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[34]) {
    return Language::membervariableHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_membervariableHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_globalvariableHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_globalvariableHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::globalvariableHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[35]) {
    return Language::globalvariableHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_globalvariableHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_variableHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_variableHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::variableHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[36]) {
    return Language::variableHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_variableHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_callbackfunctionHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_callbackfunctionHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::callbackfunctionHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[37]) {
    return Language::callbackfunctionHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_callbackfunctionHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_staticmemberfunctionHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_staticmemberfunctionHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::staticmemberfunctionHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[38]) {
    return Language::staticmemberfunctionHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_staticmemberfunctionHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_memberfunctionHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_memberfunctionHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::memberfunctionHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[39]) {
    return Language::memberfunctionHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_memberfunctionHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_globalfunctionHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_globalfunctionHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::globalfunctionHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[40]) {
    return Language::globalfunctionHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_globalfunctionHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_functionHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_functionHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::functionHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[41]) {
    return Language::functionHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_functionHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_usingDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_usingDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::usingDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[42]) {
    return Language::usingDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_usingDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_namespaceDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_namespaceDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::namespaceDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[43]) {
    return Language::namespaceDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_namespaceDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_accessDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_accessDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::accessDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[44]) {
    return Language::accessDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_accessDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_destructorDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_destructorDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::destructorDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[45]) {
    return Language::destructorDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_destructorDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_constructorDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_constructorDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::constructorDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[46]) {
    return Language::constructorDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_constructorDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classforwardDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classforwardDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classforwardDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[47]) {
    return Language::classforwardDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classforwardDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_classDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_classDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::classDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[48]) {
    return Language::classDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_classDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_enumforwardDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_enumforwardDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::enumforwardDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[49]) {
    return Language::enumforwardDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_enumforwardDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_enumvalueDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_enumvalueDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::enumvalueDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[50]) {
    return Language::enumvalueDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_enumvalueDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_enumDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_enumDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::enumDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[51]) {
    return Language::enumDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_enumDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_externDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_externDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::externDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[52]) {
    return Language::externDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_externDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_cDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_cDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::cDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[53]) {
    return Language::cDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_cDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_typesDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_typesDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::typesDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[54]) {
    return Language::typesDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_typesDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_typemapcopyDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_typemapcopyDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::typemapcopyDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[55]) {
    return Language::typemapcopyDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_typemapcopyDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_typemapDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_typemapDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::typemapDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[56]) {
    return Language::typemapDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_typemapDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_pragmaDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_pragmaDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::pragmaDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[57]) {
    return Language::pragmaDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_pragmaDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_nativeDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_nativeDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::nativeDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[58]) {
    return Language::nativeDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_nativeDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_moduleDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_moduleDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::moduleDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[59]) {
    return Language::moduleDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_moduleDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_insertDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_insertDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::insertDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[60]) {
    return Language::insertDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_insertDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_includeDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_includeDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::includeDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[61]) {
    return Language::includeDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_includeDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_importDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_importDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::importDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[62]) {
    return Language::importDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_importDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_fragmentDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_fragmentDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::fragmentDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[63]) {
    return Language::fragmentDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_fragmentDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_extendDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_extendDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::extendDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[64]) {
    return Language::extendDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_extendDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_constantDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_constantDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::constantDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[65]) {
    return Language::constantDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_constantDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_clearDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_clearDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::clearDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[66]) {
    return Language::clearDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_clearDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_applyDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_applyDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::applyDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[67]) {
    return Language::applyDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_applyDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_top (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_top_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::top(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[68]) {
    return Language::top(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_top (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_defaultHandler (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_defaultHandler_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::defaultHandler(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[69]) {
    return Dispatcher::defaultHandler(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_defaultHandler (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_emit_children (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_emit_children_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::emit_children(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[70]) {
    return Dispatcher::emit_children(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_emit_children (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_typemapitemDirective (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_typemapitemDirective_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::typemapitemDirective(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[71]) {
    return Dispatcher::typemapitemDirective(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_typemapitemDirective (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_templateDeclaration (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_templateDeclaration_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::templateDeclaration(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[72]) {
    return Dispatcher::templateDeclaration(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_templateDeclaration (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}


extern "C"
{
  int    SwigDirector_Language_emit_one (void*   swig_self,void *    jn);

  bool    SwigDirector_Language_emit_one_is_overridden_dispatch (void*    swig_self);
};

int SwigDirector_Language::emit_one(Node *n) {
  int result ;
  int jresult  = 0 ;
  void * jn = 0 ;
  
  if (!swig_override[73]) {
    return Language::emit_one(n);
  }
  if (swig_self_ != NULL)
  {
    *((Node **) &jn) = (Node *) n; 
    
    jresult = (int) SwigDirector_Language_emit_one (swig_self_, jn);
    //if (jenv->ExceptionOccurred()) return result;
    
    result = (int)jresult; 
    
  } else {
    ; //tbd: SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  return result;
}

void SwigDirector_Language::swig_connect_director(void*    ada_Self,  bool    swig_mem_own, bool weak_global)
{
  swig_self_ = ada_Self;
  swig_override [0] = SwigDirector_Language_defaultExternalRuntimeFilename_is_overridden_dispatch (swig_self_);
  swig_override [1] = SwigDirector_Language_addSymbol_is_overridden_dispatch (swig_self_);
  swig_override [2] = SwigDirector_Language_extraDirectorProtectedCPPMethodsRequired_is_overridden_dispatch (swig_self_);
  swig_override [3] = SwigDirector_Language_main_is_overridden_dispatch (swig_self_);
  swig_override [4] = SwigDirector_Language_unrollVirtualMethods_SWIG_1_is_overridden_dispatch (swig_self_);
  swig_override [5] = SwigDirector_Language_unrollVirtualMethods_SWIG_0_is_overridden_dispatch (swig_self_);
  swig_override [6] = SwigDirector_Language_runtimeCode_is_overridden_dispatch (swig_self_);
  swig_override [7] = SwigDirector_Language_is_assignable_is_overridden_dispatch (swig_self_);
  swig_override [8] = SwigDirector_Language_abstractClassTest_is_overridden_dispatch (swig_self_);
  swig_override [9] = SwigDirector_Language_enumLookup_is_overridden_dispatch (swig_self_);
  swig_override [10] = SwigDirector_Language_classLookup_is_overridden_dispatch (swig_self_);
  swig_override [11] = SwigDirector_Language_symbolLookup_is_overridden_dispatch (swig_self_);
  swig_override [12] = SwigDirector_Language_validIdentifier_is_overridden_dispatch (swig_self_);
  swig_override [13] = SwigDirector_Language_classDirectorDisown_is_overridden_dispatch (swig_self_);
  swig_override [14] = SwigDirector_Language_classDirectorMethods_is_overridden_dispatch (swig_self_);
  swig_override [15] = SwigDirector_Language_classDirectorDestructor_is_overridden_dispatch (swig_self_);
  swig_override [16] = SwigDirector_Language_classDirectorConstructors_is_overridden_dispatch (swig_self_);
  swig_override [17] = SwigDirector_Language_classDirectorMethod_is_overridden_dispatch (swig_self_);
  swig_override [18] = SwigDirector_Language_classDirectorDefaultConstructor_is_overridden_dispatch (swig_self_);
  swig_override [19] = SwigDirector_Language_classDirectorConstructor_is_overridden_dispatch (swig_self_);
  swig_override [20] = SwigDirector_Language_classDirectorEnd_is_overridden_dispatch (swig_self_);
  swig_override [21] = SwigDirector_Language_classDirectorInit_is_overridden_dispatch (swig_self_);
  swig_override [22] = SwigDirector_Language_classDirector_is_overridden_dispatch (swig_self_);
  swig_override [23] = SwigDirector_Language_nativeWrapper_is_overridden_dispatch (swig_self_);
  swig_override [24] = SwigDirector_Language_functionWrapper_is_overridden_dispatch (swig_self_);
  swig_override [25] = SwigDirector_Language_variableWrapper_is_overridden_dispatch (swig_self_);
  swig_override [26] = SwigDirector_Language_constantWrapper_is_overridden_dispatch (swig_self_);
  swig_override [27] = SwigDirector_Language_typedefHandler_is_overridden_dispatch (swig_self_);
  swig_override [28] = SwigDirector_Language_classHandler_is_overridden_dispatch (swig_self_);
  swig_override [29] = SwigDirector_Language_destructorHandler_is_overridden_dispatch (swig_self_);
  swig_override [30] = SwigDirector_Language_copyconstructorHandler_is_overridden_dispatch (swig_self_);
  swig_override [31] = SwigDirector_Language_constructorHandler_is_overridden_dispatch (swig_self_);
  swig_override [32] = SwigDirector_Language_memberconstantHandler_is_overridden_dispatch (swig_self_);
  swig_override [33] = SwigDirector_Language_staticmembervariableHandler_is_overridden_dispatch (swig_self_);
  swig_override [34] = SwigDirector_Language_membervariableHandler_is_overridden_dispatch (swig_self_);
  swig_override [35] = SwigDirector_Language_globalvariableHandler_is_overridden_dispatch (swig_self_);
  swig_override [36] = SwigDirector_Language_variableHandler_is_overridden_dispatch (swig_self_);
  swig_override [37] = SwigDirector_Language_callbackfunctionHandler_is_overridden_dispatch (swig_self_);
  swig_override [38] = SwigDirector_Language_staticmemberfunctionHandler_is_overridden_dispatch (swig_self_);
  swig_override [39] = SwigDirector_Language_memberfunctionHandler_is_overridden_dispatch (swig_self_);
  swig_override [40] = SwigDirector_Language_globalfunctionHandler_is_overridden_dispatch (swig_self_);
  swig_override [41] = SwigDirector_Language_functionHandler_is_overridden_dispatch (swig_self_);
  swig_override [42] = SwigDirector_Language_usingDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [43] = SwigDirector_Language_namespaceDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [44] = SwigDirector_Language_accessDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [45] = SwigDirector_Language_destructorDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [46] = SwigDirector_Language_constructorDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [47] = SwigDirector_Language_classforwardDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [48] = SwigDirector_Language_classDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [49] = SwigDirector_Language_enumforwardDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [50] = SwigDirector_Language_enumvalueDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [51] = SwigDirector_Language_enumDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [52] = SwigDirector_Language_externDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [53] = SwigDirector_Language_cDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [54] = SwigDirector_Language_typesDirective_is_overridden_dispatch (swig_self_);
  swig_override [55] = SwigDirector_Language_typemapcopyDirective_is_overridden_dispatch (swig_self_);
  swig_override [56] = SwigDirector_Language_typemapDirective_is_overridden_dispatch (swig_self_);
  swig_override [57] = SwigDirector_Language_pragmaDirective_is_overridden_dispatch (swig_self_);
  swig_override [58] = SwigDirector_Language_nativeDirective_is_overridden_dispatch (swig_self_);
  swig_override [59] = SwigDirector_Language_moduleDirective_is_overridden_dispatch (swig_self_);
  swig_override [60] = SwigDirector_Language_insertDirective_is_overridden_dispatch (swig_self_);
  swig_override [61] = SwigDirector_Language_includeDirective_is_overridden_dispatch (swig_self_);
  swig_override [62] = SwigDirector_Language_importDirective_is_overridden_dispatch (swig_self_);
  swig_override [63] = SwigDirector_Language_fragmentDirective_is_overridden_dispatch (swig_self_);
  swig_override [64] = SwigDirector_Language_extendDirective_is_overridden_dispatch (swig_self_);
  swig_override [65] = SwigDirector_Language_constantDirective_is_overridden_dispatch (swig_self_);
  swig_override [66] = SwigDirector_Language_clearDirective_is_overridden_dispatch (swig_self_);
  swig_override [67] = SwigDirector_Language_applyDirective_is_overridden_dispatch (swig_self_);
  swig_override [68] = SwigDirector_Language_top_is_overridden_dispatch (swig_self_);
  swig_override [69] = SwigDirector_Language_defaultHandler_is_overridden_dispatch (swig_self_);
  swig_override [70] = SwigDirector_Language_emit_children_is_overridden_dispatch (swig_self_);
  swig_override [71] = SwigDirector_Language_typemapitemDirective_is_overridden_dispatch (swig_self_);
  swig_override [72] = SwigDirector_Language_templateDeclaration_is_overridden_dispatch (swig_self_);
  swig_override [73] = SwigDirector_Language_emit_one_is_overridden_dispatch (swig_self_);
}



