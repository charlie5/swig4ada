--
-- This file was automatically generated by SWIG version 1.3.29
--(http://www.swig.org).
--
-- Do not make changes to this file. Modify the SWIG interface file instead.
--

with Interfaces.C.Strings; use Interfaces.C, Interfaces.C.Strings;
with Swig.Pointers;                 use Swig, Swig.Pointers;
with System;

package swigg_c_import is

   function runtime_call_Depth return  Interfaces.C.int;

   pragma Import (C, runtime_call_Depth, "Ada_runtime_call_Depth");

   function String_in
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int)
      return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, String_in, "Ada_String_in");

   function c_to_doh_String
     (jarg1 : Interfaces.C.Strings.chars_ptr)
      return  System.Address;

   pragma Import (C, c_to_doh_String, "Ada_c_to_doh_String");

   function get_attribute
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, get_attribute, "Ada_get_attribute");

   procedure set_attribute
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address);

   pragma Import (C, set_attribute, "Ada_set_attribute");

   function check_attribute
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  Boolean;

   pragma Import (C, check_attribute, "Ada_check_attribute");

   function Node_to_CStr
     (jarg1 : System.Address)
      return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, Node_to_CStr, "Ada_Node_to_CStr");

   function node_Type (jarg1 : System.Address) return System.Address;

   pragma Import (C, node_Type, "Ada_node_Type");

   function parent_Node (jarg1 : System.Address) return System.Address;

   pragma Import (C, parent_Node, "Ada_parent_Node");

   function new_File
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.Strings.chars_ptr)
      return  System.Address;

   pragma Import (C, new_File, "Ada_new_File");

   procedure Print_to
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.Strings.chars_ptr);

   pragma Import (C, Print_to, "Ada_Print_to");

   procedure dump (jarg1 : System.Address; jarg2 : System.Address);

   pragma Import (C, dump, "Ada_dump");

   procedure close_File (jarg1 : System.Address);

   pragma Import (C, close_File, "Ada_close_File");

   procedure doh_replace_All
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address);

   pragma Import (C, doh_replace_All, "Ada_doh_replace_All");

   function doh_Copy (jarg1 : System.Address) return System.Address;

   pragma Import (C, doh_Copy, "Ada_doh_Copy");

   procedure Swig_save_1
     (jarg1 : Interfaces.C.Strings.chars_ptr;
      jarg2 : System.Address;
      jarg3 : Interfaces.C.Strings.chars_ptr);

   pragma Import (C, Swig_save_1, "Ada_Swig_save_1");

   procedure Swig_require_2
     (jarg1 : Interfaces.C.Strings.chars_ptr;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address);

   pragma Import (C, Swig_require_2, "Ada_Swig_require_2");

   procedure Wrapper_add_local_2
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : Interfaces.C.Strings.chars_ptr;
      jarg4 : Interfaces.C.Strings.chars_ptr);

   pragma Import (C, Wrapper_add_local_2, "Ada_Wrapper_add_local_2");

   function first_Child (jarg1 : System.Address) return System.Address;

   pragma Import (C, first_Child, "Ada_first_Child");

   function next_Sibling (jarg1 : System.Address) return System.Address;

   pragma Import (C, next_Sibling, "Ada_next_Sibling");

   procedure exit_with_Fail;

   pragma Import (C, exit_with_Fail, "Ada_exit_with_Fail");

   function doh_First (jarg1 : System.Address) return System.Address;

   pragma Import (C, doh_First, "Ada_doh_First");

   function doh_Next (jarg1 : System.Address) return System.Address;

   pragma Import (C, doh_Next, "Ada_doh_Next");

   function get_Item (jarg1 : System.Address) return System.Address;

   pragma Import (C, get_Item, "Ada_get_Item");

   procedure do_base_top (jarg1 : System.Address; jarg2 : System.Address);

   pragma Import (C, do_base_top, "Ada_do_base_top");

   procedure do_base_enumDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, do_base_enumDeclaration, "Ada_do_base_enumDeclaration");

   procedure do_base_classHandler
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, do_base_classHandler, "Ada_do_base_classHandler");

   procedure do_base_memberfunctionHandler
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      do_base_memberfunctionHandler,
      "Ada_do_base_memberfunctionHandler");

   procedure do_base_staticmemberfunctionHandler
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      do_base_staticmemberfunctionHandler,
      "Ada_do_base_staticmemberfunctionHandler");

   procedure do_base_constructorHandler
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      do_base_constructorHandler,
      "Ada_do_base_constructorHandler");

   procedure do_base_destructorHandler
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      do_base_destructorHandler,
      "Ada_do_base_destructorHandler");

   procedure do_base_memberconstantHandler
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      do_base_memberconstantHandler,
      "Ada_do_base_memberconstantHandler");

   function do_base_insertDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, do_base_insertDirective, "Ada_do_base_insertDirective");

   function do_base_typemapDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      do_base_typemapDirective,
      "Ada_do_base_typemapDirective");

   procedure do_base_namespaceDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      do_base_namespaceDeclaration,
      "Ada_do_base_namespaceDeclaration");

   procedure do_base_includeDirective
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      do_base_includeDirective,
      "Ada_do_base_includeDirective");

   function get_HAVE_BOOL return  Interfaces.C.int;

   pragma Import (C, get_HAVE_BOOL, "Ada_get_HAVE_BOOL");

   function get_HAVE_INTTYPES_H return  Interfaces.C.int;

   pragma Import (C, get_HAVE_INTTYPES_H, "Ada_get_HAVE_INTTYPES_H");

   function get_HAVE_LIBDL return  Interfaces.C.int;

   pragma Import (C, get_HAVE_LIBDL, "Ada_get_HAVE_LIBDL");

   function get_HAVE_MEMORY_H return  Interfaces.C.int;

   pragma Import (C, get_HAVE_MEMORY_H, "Ada_get_HAVE_MEMORY_H");

   function get_HAVE_POPEN return  Interfaces.C.int;

   pragma Import (C, get_HAVE_POPEN, "Ada_get_HAVE_POPEN");

   function get_HAVE_STDINT_H return  Interfaces.C.int;

   pragma Import (C, get_HAVE_STDINT_H, "Ada_get_HAVE_STDINT_H");

   function get_HAVE_STDLIB_H return  Interfaces.C.int;

   pragma Import (C, get_HAVE_STDLIB_H, "Ada_get_HAVE_STDLIB_H");

   function get_HAVE_STRINGS_H return  Interfaces.C.int;

   pragma Import (C, get_HAVE_STRINGS_H, "Ada_get_HAVE_STRINGS_H");

   function get_HAVE_STRING_H return  Interfaces.C.int;

   pragma Import (C, get_HAVE_STRING_H, "Ada_get_HAVE_STRING_H");

   function get_HAVE_SYS_STAT_H return  Interfaces.C.int;

   pragma Import (C, get_HAVE_SYS_STAT_H, "Ada_get_HAVE_SYS_STAT_H");

   function get_HAVE_SYS_TYPES_H return  Interfaces.C.int;

   pragma Import (C, get_HAVE_SYS_TYPES_H, "Ada_get_HAVE_SYS_TYPES_H");

   function get_HAVE_UNISTD_H return  Interfaces.C.int;

   pragma Import (C, get_HAVE_UNISTD_H, "Ada_get_HAVE_UNISTD_H");

   function get_PACKAGE_arg return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_PACKAGE_arg, "Ada_get_PACKAGE_arg");

   function get_PACKAGE_BUGREPORT return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_PACKAGE_BUGREPORT, "Ada_get_PACKAGE_BUGREPORT");

   function get_PACKAGE_NAME return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_PACKAGE_NAME, "Ada_get_PACKAGE_NAME");

   function get_PACKAGE_STRING return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_PACKAGE_STRING, "Ada_get_PACKAGE_STRING");

   function get_PACKAGE_TARNAME return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_PACKAGE_TARNAME, "Ada_get_PACKAGE_TARNAME");

   function get_PACKAGE_VERSION return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_PACKAGE_VERSION, "Ada_get_PACKAGE_VERSION");

   function get_STDC_HEADERS return  Interfaces.C.int;

   pragma Import (C, get_STDC_HEADERS, "Ada_get_STDC_HEADERS");

   function get_SWIG_CXX return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_SWIG_CXX, "Ada_get_SWIG_CXX");

   function get_SWIG_LIB return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_SWIG_LIB, "Ada_get_SWIG_LIB");

   function get_SWIG_LIB_WIN_UNIX return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_SWIG_LIB_WIN_UNIX, "Ada_get_SWIG_LIB_WIN_UNIX");

   function get_SWIG_PLATFORM return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_SWIG_PLATFORM, "Ada_get_SWIG_PLATFORM");

   function get_VERSION return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_VERSION, "Ada_get_VERSION");

   function get_SWIG_LANG return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_SWIG_LANG, "Ada_get_SWIG_LANG");

   function get_WARN_NONE return  Interfaces.C.int;

   pragma Import (C, get_WARN_NONE, "Ada_get_WARN_NONE");

   function get_WARN_DEPRECATED_EXTERN return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_EXTERN,
      "Ada_get_WARN_DEPRECATED_EXTERN");

   function get_WARN_DEPRECATED_VAL return  Interfaces.C.int;

   pragma Import (C, get_WARN_DEPRECATED_VAL, "Ada_get_WARN_DEPRECATED_VAL");

   function get_WARN_DEPRECATED_OUT return  Interfaces.C.int;

   pragma Import (C, get_WARN_DEPRECATED_OUT, "Ada_get_WARN_DEPRECATED_OUT");

   function get_WARN_DEPRECATED_DISABLEDOC return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_DISABLEDOC,
      "Ada_get_WARN_DEPRECATED_DISABLEDOC");

   function get_WARN_DEPRECATED_ENABLEDOC return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_ENABLEDOC,
      "Ada_get_WARN_DEPRECATED_ENABLEDOC");

   function get_WARN_DEPRECATED_DOCONLY return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_DOCONLY,
      "Ada_get_WARN_DEPRECATED_DOCONLY");

   function get_WARN_DEPRECATED_STYLE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_STYLE,
      "Ada_get_WARN_DEPRECATED_STYLE");

   function get_WARN_DEPRECATED_LOCALSTYLE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_LOCALSTYLE,
      "Ada_get_WARN_DEPRECATED_LOCALSTYLE");

   function get_WARN_DEPRECATED_TITLE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_TITLE,
      "Ada_get_WARN_DEPRECATED_TITLE");

   function get_WARN_DEPRECATED_SECTION return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_SECTION,
      "Ada_get_WARN_DEPRECATED_SECTION");

   function get_WARN_DEPRECATED_SUBSECTION return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_SUBSECTION,
      "Ada_get_WARN_DEPRECATED_SUBSECTION");

   function get_WARN_DEPRECATED_SUBSUBSECTION return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_SUBSUBSECTION,
      "Ada_get_WARN_DEPRECATED_SUBSUBSECTION");

   function get_WARN_DEPRECATED_ADDMETHODS return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_ADDMETHODS,
      "Ada_get_WARN_DEPRECATED_ADDMETHODS");

   function get_WARN_DEPRECATED_READONLY return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_READONLY,
      "Ada_get_WARN_DEPRECATED_READONLY");

   function get_WARN_DEPRECATED_READWRITE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_READWRITE,
      "Ada_get_WARN_DEPRECATED_READWRITE");

   function get_WARN_DEPRECATED_EXCEPT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_EXCEPT,
      "Ada_get_WARN_DEPRECATED_EXCEPT");

   function get_WARN_DEPRECATED_NEW return  Interfaces.C.int;

   pragma Import (C, get_WARN_DEPRECATED_NEW, "Ada_get_WARN_DEPRECATED_NEW");

   function get_WARN_DEPRECATED_EXCEPT_TM return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_EXCEPT_TM,
      "Ada_get_WARN_DEPRECATED_EXCEPT_TM");

   function get_WARN_DEPRECATED_IGNORE_TM return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_IGNORE_TM,
      "Ada_get_WARN_DEPRECATED_IGNORE_TM");

   function get_WARN_DEPRECATED_OPTC return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_OPTC,
      "Ada_get_WARN_DEPRECATED_OPTC");

   function get_WARN_DEPRECATED_NAME return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_NAME,
      "Ada_get_WARN_DEPRECATED_NAME");

   function get_WARN_DEPRECATED_NOEXTERN return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_NOEXTERN,
      "Ada_get_WARN_DEPRECATED_NOEXTERN");

   function get_WARN_DEPRECATED_NODEFAULT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_NODEFAULT,
      "Ada_get_WARN_DEPRECATED_NODEFAULT");

   function get_WARN_DEPRECATED_TYPEMAP_LANG return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_DEPRECATED_TYPEMAP_LANG,
      "Ada_get_WARN_DEPRECATED_TYPEMAP_LANG");

   function get_WARN_PP_MISSING_FILE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PP_MISSING_FILE,
      "Ada_get_WARN_PP_MISSING_FILE");

   function get_WARN_PP_EVALUATION return  Interfaces.C.int;

   pragma Import (C, get_WARN_PP_EVALUATION, "Ada_get_WARN_PP_EVALUATION");

   function get_WARN_PP_INCLUDEALL_IMPORTALL return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PP_INCLUDEALL_IMPORTALL,
      "Ada_get_WARN_PP_INCLUDEALL_IMPORTALL");

   function get_WARN_PP_CPP_WARNING return  Interfaces.C.int;

   pragma Import (C, get_WARN_PP_CPP_WARNING, "Ada_get_WARN_PP_CPP_WARNING");

   function get_WARN_PP_CPP_ERROR return  Interfaces.C.int;

   pragma Import (C, get_WARN_PP_CPP_ERROR, "Ada_get_WARN_PP_CPP_ERROR");

   function get_WARN_PARSE_CLASS_KEYWORD return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_CLASS_KEYWORD,
      "Ada_get_WARN_PARSE_CLASS_KEYWORD");

   function get_WARN_PARSE_REDEFINED return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_REDEFINED,
      "Ada_get_WARN_PARSE_REDEFINED");

   function get_WARN_PARSE_EXTEND_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_EXTEND_UNDEF,
      "Ada_get_WARN_PARSE_EXTEND_UNDEF");

   function get_WARN_PARSE_UNSUPPORTED_VALUE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_UNSUPPORTED_VALUE,
      "Ada_get_WARN_PARSE_UNSUPPORTED_VALUE");

   function get_WARN_PARSE_BAD_VALUE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_BAD_VALUE,
      "Ada_get_WARN_PARSE_BAD_VALUE");

   function get_WARN_PARSE_PRIVATE return  Interfaces.C.int;

   pragma Import (C, get_WARN_PARSE_PRIVATE, "Ada_get_WARN_PARSE_PRIVATE");

   function get_WARN_PARSE_BAD_DEFAULT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_BAD_DEFAULT,
      "Ada_get_WARN_PARSE_BAD_DEFAULT");

   function get_WARN_PARSE_NAMESPACE_ALIAS return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_NAMESPACE_ALIAS,
      "Ada_get_WARN_PARSE_NAMESPACE_ALIAS");

   function get_WARN_PARSE_PRIVATE_INHERIT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_PRIVATE_INHERIT,
      "Ada_get_WARN_PARSE_PRIVATE_INHERIT");

   function get_WARN_PARSE_TEMPLATE_REPEAT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_TEMPLATE_REPEAT,
      "Ada_get_WARN_PARSE_TEMPLATE_REPEAT");

   function get_WARN_PARSE_TEMPLATE_PARTIAL return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_TEMPLATE_PARTIAL,
      "Ada_get_WARN_PARSE_TEMPLATE_PARTIAL");

   function get_WARN_PARSE_NESTED_CLASS return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_NESTED_CLASS,
      "Ada_get_WARN_PARSE_NESTED_CLASS");

   function get_WARN_PARSE_UNDEFINED_EXTERN return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_UNDEFINED_EXTERN,
      "Ada_get_WARN_PARSE_UNDEFINED_EXTERN");

   function get_WARN_PARSE_KEYWORD return  Interfaces.C.int;

   pragma Import (C, get_WARN_PARSE_KEYWORD, "Ada_get_WARN_PARSE_KEYWORD");

   function get_WARN_PARSE_USING_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_USING_UNDEF,
      "Ada_get_WARN_PARSE_USING_UNDEF");

   function get_WARN_PARSE_MODULE_REPEAT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_MODULE_REPEAT,
      "Ada_get_WARN_PARSE_MODULE_REPEAT");

   function get_WARN_PARSE_TEMPLATE_SP_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_TEMPLATE_SP_UNDEF,
      "Ada_get_WARN_PARSE_TEMPLATE_SP_UNDEF");

   function get_WARN_PARSE_TEMPLATE_AMBIG return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_TEMPLATE_AMBIG,
      "Ada_get_WARN_PARSE_TEMPLATE_AMBIG");

   function get_WARN_PARSE_NO_ACCESS return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_NO_ACCESS,
      "Ada_get_WARN_PARSE_NO_ACCESS");

   function get_WARN_PARSE_EXPLICIT_TEMPLATE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_EXPLICIT_TEMPLATE,
      "Ada_get_WARN_PARSE_EXPLICIT_TEMPLATE");

   function get_WARN_PARSE_BUILTIN_NAME return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_BUILTIN_NAME,
      "Ada_get_WARN_PARSE_BUILTIN_NAME");

   function get_WARN_PARSE_REDUNDANT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_REDUNDANT,
      "Ada_get_WARN_PARSE_REDUNDANT");

   function get_WARN_PARSE_REC_INHERITANCE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PARSE_REC_INHERITANCE,
      "Ada_get_WARN_PARSE_REC_INHERITANCE");

   function get_WARN_IGNORE_OPERATOR_NEW return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_NEW,
      "Ada_get_WARN_IGNORE_OPERATOR_NEW");

   function get_WARN_IGNORE_OPERATOR_DELETE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_DELETE,
      "Ada_get_WARN_IGNORE_OPERATOR_DELETE");

   function get_WARN_IGNORE_OPERATOR_PLUS return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_PLUS,
      "Ada_get_WARN_IGNORE_OPERATOR_PLUS");

   function get_WARN_IGNORE_OPERATOR_MINUS return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_MINUS,
      "Ada_get_WARN_IGNORE_OPERATOR_MINUS");

   function get_WARN_IGNORE_OPERATOR_MUL return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_MUL,
      "Ada_get_WARN_IGNORE_OPERATOR_MUL");

   function get_WARN_IGNORE_OPERATOR_DIV return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_DIV,
      "Ada_get_WARN_IGNORE_OPERATOR_DIV");

   function get_WARN_IGNORE_OPERATOR_MOD return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_MOD,
      "Ada_get_WARN_IGNORE_OPERATOR_MOD");

   function get_WARN_IGNORE_OPERATOR_XOR return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_XOR,
      "Ada_get_WARN_IGNORE_OPERATOR_XOR");

   function get_WARN_IGNORE_OPERATOR_AND return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_AND,
      "Ada_get_WARN_IGNORE_OPERATOR_AND");

   function get_WARN_IGNORE_OPERATOR_OR return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_OR,
      "Ada_get_WARN_IGNORE_OPERATOR_OR");

   function get_WARN_IGNORE_OPERATOR_NOT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_NOT,
      "Ada_get_WARN_IGNORE_OPERATOR_NOT");

   function get_WARN_IGNORE_OPERATOR_LNOT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_LNOT,
      "Ada_get_WARN_IGNORE_OPERATOR_LNOT");

   function get_WARN_IGNORE_OPERATOR_EQ return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_EQ,
      "Ada_get_WARN_IGNORE_OPERATOR_EQ");

   function get_WARN_IGNORE_OPERATOR_LT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_LT,
      "Ada_get_WARN_IGNORE_OPERATOR_LT");

   function get_WARN_IGNORE_OPERATOR_GT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_GT,
      "Ada_get_WARN_IGNORE_OPERATOR_GT");

   function get_WARN_IGNORE_OPERATOR_PLUSEQ return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_PLUSEQ,
      "Ada_get_WARN_IGNORE_OPERATOR_PLUSEQ");

   function get_WARN_IGNORE_OPERATOR_MINUSEQ return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_MINUSEQ,
      "Ada_get_WARN_IGNORE_OPERATOR_MINUSEQ");

   function get_WARN_IGNORE_OPERATOR_MULEQ return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_MULEQ,
      "Ada_get_WARN_IGNORE_OPERATOR_MULEQ");

   function get_WARN_IGNORE_OPERATOR_DIVEQ return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_DIVEQ,
      "Ada_get_WARN_IGNORE_OPERATOR_DIVEQ");

   function get_WARN_IGNORE_OPERATOR_MODEQ return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_MODEQ,
      "Ada_get_WARN_IGNORE_OPERATOR_MODEQ");

   function get_WARN_IGNORE_OPERATOR_XOREQ return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_XOREQ,
      "Ada_get_WARN_IGNORE_OPERATOR_XOREQ");

   function get_WARN_IGNORE_OPERATOR_ANDEQ return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_ANDEQ,
      "Ada_get_WARN_IGNORE_OPERATOR_ANDEQ");

   function get_WARN_IGNORE_OPERATOR_OREQ return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_OREQ,
      "Ada_get_WARN_IGNORE_OPERATOR_OREQ");

   function get_WARN_IGNORE_OPERATOR_LSHIFT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_LSHIFT,
      "Ada_get_WARN_IGNORE_OPERATOR_LSHIFT");

   function get_WARN_IGNORE_OPERATOR_RSHIFT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_RSHIFT,
      "Ada_get_WARN_IGNORE_OPERATOR_RSHIFT");

   function get_WARN_IGNORE_OPERATOR_LSHIFTEQ return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_LSHIFTEQ,
      "Ada_get_WARN_IGNORE_OPERATOR_LSHIFTEQ");

   function get_WARN_IGNORE_OPERATOR_RSHIFTEQ return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_RSHIFTEQ,
      "Ada_get_WARN_IGNORE_OPERATOR_RSHIFTEQ");

   function get_WARN_IGNORE_OPERATOR_EQUALTO return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_EQUALTO,
      "Ada_get_WARN_IGNORE_OPERATOR_EQUALTO");

   function get_WARN_IGNORE_OPERATOR_NOTEQUAL return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_NOTEQUAL,
      "Ada_get_WARN_IGNORE_OPERATOR_NOTEQUAL");

   function get_WARN_IGNORE_OPERATOR_LTEQUAL return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_LTEQUAL,
      "Ada_get_WARN_IGNORE_OPERATOR_LTEQUAL");

   function get_WARN_IGNORE_OPERATOR_GTEQUAL return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_GTEQUAL,
      "Ada_get_WARN_IGNORE_OPERATOR_GTEQUAL");

   function get_WARN_IGNORE_OPERATOR_LAND return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_LAND,
      "Ada_get_WARN_IGNORE_OPERATOR_LAND");

   function get_WARN_IGNORE_OPERATOR_LOR return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_LOR,
      "Ada_get_WARN_IGNORE_OPERATOR_LOR");

   function get_WARN_IGNORE_OPERATOR_PLUSPLUS return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_PLUSPLUS,
      "Ada_get_WARN_IGNORE_OPERATOR_PLUSPLUS");

   function get_WARN_IGNORE_OPERATOR_MINUSMINUS return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_MINUSMINUS,
      "Ada_get_WARN_IGNORE_OPERATOR_MINUSMINUS");

   function get_WARN_IGNORE_OPERATOR_COMMA return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_COMMA,
      "Ada_get_WARN_IGNORE_OPERATOR_COMMA");

   function get_WARN_IGNORE_OPERATOR_ARROWSTAR return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_ARROWSTAR,
      "Ada_get_WARN_IGNORE_OPERATOR_ARROWSTAR");

   function get_WARN_IGNORE_OPERATOR_ARROW return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_ARROW,
      "Ada_get_WARN_IGNORE_OPERATOR_ARROW");

   function get_WARN_IGNORE_OPERATOR_CALL return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_CALL,
      "Ada_get_WARN_IGNORE_OPERATOR_CALL");

   function get_WARN_IGNORE_OPERATOR_INDEX return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_INDEX,
      "Ada_get_WARN_IGNORE_OPERATOR_INDEX");

   function get_WARN_IGNORE_OPERATOR_UPLUS return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_UPLUS,
      "Ada_get_WARN_IGNORE_OPERATOR_UPLUS");

   function get_WARN_IGNORE_OPERATOR_UMINUS return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_UMINUS,
      "Ada_get_WARN_IGNORE_OPERATOR_UMINUS");

   function get_WARN_IGNORE_OPERATOR_UMUL return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_UMUL,
      "Ada_get_WARN_IGNORE_OPERATOR_UMUL");

   function get_WARN_IGNORE_OPERATOR_UAND return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_UAND,
      "Ada_get_WARN_IGNORE_OPERATOR_UAND");

   function get_WARN_IGNORE_OPERATOR_NEWARR return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_NEWARR,
      "Ada_get_WARN_IGNORE_OPERATOR_NEWARR");

   function get_WARN_IGNORE_OPERATOR_DELARR return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_DELARR,
      "Ada_get_WARN_IGNORE_OPERATOR_DELARR");

   function get_WARN_IGNORE_OPERATOR_REF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_IGNORE_OPERATOR_REF,
      "Ada_get_WARN_IGNORE_OPERATOR_REF");

   function get_WARN_TYPE_UNDEFINED_CLASS return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPE_UNDEFINED_CLASS,
      "Ada_get_WARN_TYPE_UNDEFINED_CLASS");

   function get_WARN_TYPE_INCOMPLETE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPE_INCOMPLETE,
      "Ada_get_WARN_TYPE_INCOMPLETE");

   function get_WARN_TYPE_ABSTRACT return  Interfaces.C.int;

   pragma Import (C, get_WARN_TYPE_ABSTRACT, "Ada_get_WARN_TYPE_ABSTRACT");

   function get_WARN_TYPE_REDEFINED return  Interfaces.C.int;

   pragma Import (C, get_WARN_TYPE_REDEFINED, "Ada_get_WARN_TYPE_REDEFINED");

   function get_WARN_TYPEMAP_SOURCETARGET return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_SOURCETARGET,
      "Ada_get_WARN_TYPEMAP_SOURCETARGET");

   function get_WARN_TYPEMAP_CHARLEAK return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_CHARLEAK,
      "Ada_get_WARN_TYPEMAP_CHARLEAK");

   function get_WARN_TYPEMAP_SWIGTYPE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_SWIGTYPE,
      "Ada_get_WARN_TYPEMAP_SWIGTYPE");

   function get_WARN_TYPEMAP_APPLY_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_APPLY_UNDEF,
      "Ada_get_WARN_TYPEMAP_APPLY_UNDEF");

   function get_WARN_TYPEMAP_SWIGTYPELEAK return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_SWIGTYPELEAK,
      "Ada_get_WARN_TYPEMAP_SWIGTYPELEAK");

   function get_WARN_TYPEMAP_IN_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_IN_UNDEF,
      "Ada_get_WARN_TYPEMAP_IN_UNDEF");

   function get_WARN_TYPEMAP_OUT_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_OUT_UNDEF,
      "Ada_get_WARN_TYPEMAP_OUT_UNDEF");

   function get_WARN_TYPEMAP_VARIN_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_VARIN_UNDEF,
      "Ada_get_WARN_TYPEMAP_VARIN_UNDEF");

   function get_WARN_TYPEMAP_VAROUT_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_VAROUT_UNDEF,
      "Ada_get_WARN_TYPEMAP_VAROUT_UNDEF");

   function get_WARN_TYPEMAP_CONST_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_CONST_UNDEF,
      "Ada_get_WARN_TYPEMAP_CONST_UNDEF");

   function get_WARN_TYPEMAP_UNDEF return  Interfaces.C.int;

   pragma Import (C, get_WARN_TYPEMAP_UNDEF, "Ada_get_WARN_TYPEMAP_UNDEF");

   function get_WARN_TYPEMAP_VAR_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_VAR_UNDEF,
      "Ada_get_WARN_TYPEMAP_VAR_UNDEF");

   function get_WARN_TYPEMAP_TYPECHECK return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_TYPECHECK,
      "Ada_get_WARN_TYPEMAP_TYPECHECK");

   function get_WARN_TYPEMAP_THROW return  Interfaces.C.int;

   pragma Import (C, get_WARN_TYPEMAP_THROW, "Ada_get_WARN_TYPEMAP_THROW");

   function get_WARN_TYPEMAP_DIRECTORIN_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_DIRECTORIN_UNDEF,
      "Ada_get_WARN_TYPEMAP_DIRECTORIN_UNDEF");

   function get_WARN_TYPEMAP_THREAD_UNSAFE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_THREAD_UNSAFE,
      "Ada_get_WARN_TYPEMAP_THREAD_UNSAFE");

   function get_WARN_TYPEMAP_DIRECTOROUT_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_DIRECTOROUT_UNDEF,
      "Ada_get_WARN_TYPEMAP_DIRECTOROUT_UNDEF");

   function get_WARN_TYPEMAP_TYPECHECK_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_TYPECHECK_UNDEF,
      "Ada_get_WARN_TYPEMAP_TYPECHECK_UNDEF");

   function get_WARN_TYPEMAP_DIRECTOROUT_PTR return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_DIRECTOROUT_PTR,
      "Ada_get_WARN_TYPEMAP_DIRECTOROUT_PTR");

   function get_WARN_TYPEMAP_OUT_OPTIMAL_IGNORED return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_OUT_OPTIMAL_IGNORED,
      "Ada_get_WARN_TYPEMAP_OUT_OPTIMAL_IGNORED");

   function get_WARN_TYPEMAP_OUT_OPTIMAL_MULTIPLE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_TYPEMAP_OUT_OPTIMAL_MULTIPLE,
      "Ada_get_WARN_TYPEMAP_OUT_OPTIMAL_MULTIPLE");

   function get_WARN_FRAGMENT_NOT_FOUND return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_FRAGMENT_NOT_FOUND,
      "Ada_get_WARN_FRAGMENT_NOT_FOUND");

   function get_WARN_LANG_OVERLOAD_DECL return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_OVERLOAD_DECL,
      "Ada_get_WARN_LANG_OVERLOAD_DECL");

   function get_WARN_LANG_OVERLOAD_CONSTRUCT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_OVERLOAD_CONSTRUCT,
      "Ada_get_WARN_LANG_OVERLOAD_CONSTRUCT");

   function get_WARN_LANG_IDENTIFIER return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_IDENTIFIER,
      "Ada_get_WARN_LANG_IDENTIFIER");

   function get_WARN_LANG_RETURN_TYPE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_RETURN_TYPE,
      "Ada_get_WARN_LANG_RETURN_TYPE");

   function get_WARN_LANG_VARARGS return  Interfaces.C.int;

   pragma Import (C, get_WARN_LANG_VARARGS, "Ada_get_WARN_LANG_VARARGS");

   function get_WARN_LANG_VARARGS_KEYWORD return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_VARARGS_KEYWORD,
      "Ada_get_WARN_LANG_VARARGS_KEYWORD");

   function get_WARN_LANG_NATIVE_UNIMPL return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_NATIVE_UNIMPL,
      "Ada_get_WARN_LANG_NATIVE_UNIMPL");

   function get_WARN_LANG_DEREF_SHADOW return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_DEREF_SHADOW,
      "Ada_get_WARN_LANG_DEREF_SHADOW");

   function get_WARN_LANG_OVERLOAD_SHADOW return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_OVERLOAD_SHADOW,
      "Ada_get_WARN_LANG_OVERLOAD_SHADOW");

   function get_WARN_LANG_FRIEND_IGNORE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_FRIEND_IGNORE,
      "Ada_get_WARN_LANG_FRIEND_IGNORE");

   function get_WARN_LANG_OVERLOAD_KEYWORD return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_OVERLOAD_KEYWORD,
      "Ada_get_WARN_LANG_OVERLOAD_KEYWORD");

   function get_WARN_LANG_OVERLOAD_CONST return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_OVERLOAD_CONST,
      "Ada_get_WARN_LANG_OVERLOAD_CONST");

   function get_WARN_LANG_CLASS_UNNAMED return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_CLASS_UNNAMED,
      "Ada_get_WARN_LANG_CLASS_UNNAMED");

   function get_WARN_LANG_DIRECTOR_VDESTRUCT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_DIRECTOR_VDESTRUCT,
      "Ada_get_WARN_LANG_DIRECTOR_VDESTRUCT");

   function get_WARN_LANG_DISCARD_CONST return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_DISCARD_CONST,
      "Ada_get_WARN_LANG_DISCARD_CONST");

   function get_WARN_LANG_OVERLOAD_IGNORED return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_OVERLOAD_IGNORED,
      "Ada_get_WARN_LANG_OVERLOAD_IGNORED");

   function get_WARN_LANG_DIRECTOR_ABSTRACT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_DIRECTOR_ABSTRACT,
      "Ada_get_WARN_LANG_DIRECTOR_ABSTRACT");

   function get_WARN_LANG_PORTABILITY_FILENAME return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_PORTABILITY_FILENAME,
      "Ada_get_WARN_LANG_PORTABILITY_FILENAME");

   function get_WARN_LANG_TEMPLATE_METHOD_IGNORE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_LANG_TEMPLATE_METHOD_IGNORE,
      "Ada_get_WARN_LANG_TEMPLATE_METHOD_IGNORE");

   function get_WARN_RUBY_WRONG_NAME return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_RUBY_WRONG_NAME,
      "Ada_get_WARN_RUBY_WRONG_NAME");

   function get_WARN_RUBY_MULTIPLE_INHERITANCE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_RUBY_MULTIPLE_INHERITANCE,
      "Ada_get_WARN_RUBY_MULTIPLE_INHERITANCE");

   function get_WARN_JAVA_TYPEMAP_JNI_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_JNI_UNDEF,
      "Ada_get_WARN_JAVA_TYPEMAP_JNI_UNDEF");

   function get_WARN_JAVA_TYPEMAP_JTYPE_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_JTYPE_UNDEF,
      "Ada_get_WARN_JAVA_TYPEMAP_JTYPE_UNDEF");

   function get_WARN_JAVA_TYPEMAP_JSTYPE_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_JSTYPE_UNDEF,
      "Ada_get_WARN_JAVA_TYPEMAP_JSTYPE_UNDEF");

   function get_WARN_JAVA_MULTIPLE_INHERITANCE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_MULTIPLE_INHERITANCE,
      "Ada_get_WARN_JAVA_MULTIPLE_INHERITANCE");

   function get_WARN_JAVA_TYPEMAP_GETCPTR_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_GETCPTR_UNDEF,
      "Ada_get_WARN_JAVA_TYPEMAP_GETCPTR_UNDEF");

   function get_WARN_JAVA_TYPEMAP_CLASSMOD_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_CLASSMOD_UNDEF,
      "Ada_get_WARN_JAVA_TYPEMAP_CLASSMOD_UNDEF");

   function get_WARN_JAVA_TYPEMAP_JAVABODY_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_JAVABODY_UNDEF,
      "Ada_get_WARN_JAVA_TYPEMAP_JAVABODY_UNDEF");

   function get_WARN_JAVA_TYPEMAP_JAVAOUT_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_JAVAOUT_UNDEF,
      "Ada_get_WARN_JAVA_TYPEMAP_JAVAOUT_UNDEF");

   function get_WARN_JAVA_TYPEMAP_JAVAIN_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_JAVAIN_UNDEF,
      "Ada_get_WARN_JAVA_TYPEMAP_JAVAIN_UNDEF");

   function get_WARN_JAVA_TYPEMAP_JAVADIRECTORIN_UNDEF return  Interfaces.C.
     int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_JAVADIRECTORIN_UNDEF,
      "Ada_get_WARN_JAVA_TYPEMAP_JAVADIRECTORIN_UNDEF");

   function get_WARN_JAVA_TYPEMAP_JAVADIRECTOROUT_UNDEF return
     Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_JAVADIRECTOROUT_UNDEF,
      "Ada_get_WARN_JAVA_TYPEMAP_JAVADIRECTOROUT_UNDEF");

   function get_WARN_JAVA_COVARIANT_RET return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_COVARIANT_RET,
      "Ada_get_WARN_JAVA_COVARIANT_RET");

   function get_WARN_JAVA_TYPEMAP_JAVACONSTRUCT_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_JAVACONSTRUCT_UNDEF,
      "Ada_get_WARN_JAVA_TYPEMAP_JAVACONSTRUCT_UNDEF");

   function get_WARN_JAVA_TYPEMAP_DIRECTORIN_NODESC return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_TYPEMAP_DIRECTORIN_NODESC,
      "Ada_get_WARN_JAVA_TYPEMAP_DIRECTORIN_NODESC");

   function get_WARN_JAVA_NO_DIRECTORCONNECT_ATTR return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_JAVA_NO_DIRECTORCONNECT_ATTR,
      "Ada_get_WARN_JAVA_NO_DIRECTORCONNECT_ATTR");

   function get_WARN_CSHARP_TYPEMAP_CTYPE_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_TYPEMAP_CTYPE_UNDEF,
      "Ada_get_WARN_CSHARP_TYPEMAP_CTYPE_UNDEF");

   function get_WARN_CSHARP_TYPEMAP_CSTYPE_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_TYPEMAP_CSTYPE_UNDEF,
      "Ada_get_WARN_CSHARP_TYPEMAP_CSTYPE_UNDEF");

   function get_WARN_CSHARP_TYPEMAP_CSWTYPE_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_TYPEMAP_CSWTYPE_UNDEF,
      "Ada_get_WARN_CSHARP_TYPEMAP_CSWTYPE_UNDEF");

   function get_WARN_CSHARP_MULTIPLE_INHERITANCE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_MULTIPLE_INHERITANCE,
      "Ada_get_WARN_CSHARP_MULTIPLE_INHERITANCE");

   function get_WARN_CSHARP_TYPEMAP_GETCPTR_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_TYPEMAP_GETCPTR_UNDEF,
      "Ada_get_WARN_CSHARP_TYPEMAP_GETCPTR_UNDEF");

   function get_WARN_CSHARP_TYPEMAP_CLASSMOD_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_TYPEMAP_CLASSMOD_UNDEF,
      "Ada_get_WARN_CSHARP_TYPEMAP_CLASSMOD_UNDEF");

   function get_WARN_CSHARP_TYPEMAP_CSBODY_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_TYPEMAP_CSBODY_UNDEF,
      "Ada_get_WARN_CSHARP_TYPEMAP_CSBODY_UNDEF");

   function get_WARN_CSHARP_TYPEMAP_CSOUT_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_TYPEMAP_CSOUT_UNDEF,
      "Ada_get_WARN_CSHARP_TYPEMAP_CSOUT_UNDEF");

   function get_WARN_CSHARP_TYPEMAP_CSIN_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_TYPEMAP_CSIN_UNDEF,
      "Ada_get_WARN_CSHARP_TYPEMAP_CSIN_UNDEF");

   function get_WARN_CSHARP_TYPEMAP_CSDIRECTORIN_UNDEF return  Interfaces.C.
     int;

   pragma Import
     (C,
      get_WARN_CSHARP_TYPEMAP_CSDIRECTORIN_UNDEF,
      "Ada_get_WARN_CSHARP_TYPEMAP_CSDIRECTORIN_UNDEF");

   function get_WARN_CSHARP_TYPEMAP_CSDIRECTOROUT_UNDEF return
     Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_TYPEMAP_CSDIRECTOROUT_UNDEF,
      "Ada_get_WARN_CSHARP_TYPEMAP_CSDIRECTOROUT_UNDEF");

   function get_WARN_CSHARP_COVARIANT_RET return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_COVARIANT_RET,
      "Ada_get_WARN_CSHARP_COVARIANT_RET");

   function get_WARN_CSHARP_TYPEMAP_CSCONSTRUCT_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_TYPEMAP_CSCONSTRUCT_UNDEF,
      "Ada_get_WARN_CSHARP_TYPEMAP_CSCONSTRUCT_UNDEF");

   function get_WARN_CSHARP_EXCODE return  Interfaces.C.int;

   pragma Import (C, get_WARN_CSHARP_EXCODE, "Ada_get_WARN_CSHARP_EXCODE");

   function get_WARN_CSHARP_CANTHROW return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_CANTHROW,
      "Ada_get_WARN_CSHARP_CANTHROW");

   function get_WARN_CSHARP_NO_DIRECTORCONNECT_ATTR return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_CSHARP_NO_DIRECTORCONNECT_ATTR,
      "Ada_get_WARN_CSHARP_NO_DIRECTORCONNECT_ATTR");

   function get_WARN_MODULA3_TYPEMAP_TYPE_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_MODULA3_TYPEMAP_TYPE_UNDEF,
      "Ada_get_WARN_MODULA3_TYPEMAP_TYPE_UNDEF");

   function get_WARN_MODULA3_TYPEMAP_GETCPTR_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_MODULA3_TYPEMAP_GETCPTR_UNDEF,
      "Ada_get_WARN_MODULA3_TYPEMAP_GETCPTR_UNDEF");

   function get_WARN_MODULA3_TYPEMAP_CLASSMOD_UNDEF return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_MODULA3_TYPEMAP_CLASSMOD_UNDEF,
      "Ada_get_WARN_MODULA3_TYPEMAP_CLASSMOD_UNDEF");

   function get_WARN_MODULA3_TYPEMAP_PTRCONSTMOD_UNDEF return  Interfaces.C.
     int;

   pragma Import
     (C,
      get_WARN_MODULA3_TYPEMAP_PTRCONSTMOD_UNDEF,
      "Ada_get_WARN_MODULA3_TYPEMAP_PTRCONSTMOD_UNDEF");

   function get_WARN_MODULA3_TYPEMAP_MULTIPLE_RETURN return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_MODULA3_TYPEMAP_MULTIPLE_RETURN,
      "Ada_get_WARN_MODULA3_TYPEMAP_MULTIPLE_RETURN");

   function get_WARN_MODULA3_MULTIPLE_INHERITANCE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_MODULA3_MULTIPLE_INHERITANCE,
      "Ada_get_WARN_MODULA3_MULTIPLE_INHERITANCE");

   function get_WARN_MODULA3_TYPECONSTRUCTOR_UNKNOWN return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_MODULA3_TYPECONSTRUCTOR_UNKNOWN,
      "Ada_get_WARN_MODULA3_TYPECONSTRUCTOR_UNKNOWN");

   function get_WARN_MODULA3_UNKNOWN_PRAGMA return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_MODULA3_UNKNOWN_PRAGMA,
      "Ada_get_WARN_MODULA3_UNKNOWN_PRAGMA");

   function get_WARN_MODULA3_BAD_ENUMERATION return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_MODULA3_BAD_ENUMERATION,
      "Ada_get_WARN_MODULA3_BAD_ENUMERATION");

   function get_WARN_MODULA3_DOUBLE_ID return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_MODULA3_DOUBLE_ID,
      "Ada_get_WARN_MODULA3_DOUBLE_ID");

   function get_WARN_MODULA3_BAD_IMPORT return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_MODULA3_BAD_IMPORT,
      "Ada_get_WARN_MODULA3_BAD_IMPORT");

   function get_WARN_PHP4_MULTIPLE_INHERITANCE return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PHP4_MULTIPLE_INHERITANCE,
      "Ada_get_WARN_PHP4_MULTIPLE_INHERITANCE");

   function get_WARN_PHP4_UNKNOWN_PRAGMA return  Interfaces.C.int;

   pragma Import
     (C,
      get_WARN_PHP4_UNKNOWN_PRAGMA,
      "Ada_get_WARN_PHP4_UNKNOWN_PRAGMA");

   function get_SWIG_OK return  Interfaces.C.int;

   pragma Import (C, get_SWIG_OK, "Ada_get_SWIG_OK");

   function get_SWIG_ERROR return  Interfaces.C.int;

   pragma Import (C, get_SWIG_ERROR, "Ada_get_SWIG_ERROR");

   function get_SWIG_NOWRAP return  Interfaces.C.int;

   pragma Import (C, get_SWIG_NOWRAP, "Ada_get_SWIG_NOWRAP");

   function get_T_BOOL return  Interfaces.C.int;

   pragma Import (C, get_T_BOOL, "Ada_get_T_BOOL");

   function get_T_SCHAR return  Interfaces.C.int;

   pragma Import (C, get_T_SCHAR, "Ada_get_T_SCHAR");

   function get_T_UCHAR return  Interfaces.C.int;

   pragma Import (C, get_T_UCHAR, "Ada_get_T_UCHAR");

   function get_T_SHORT return  Interfaces.C.int;

   pragma Import (C, get_T_SHORT, "Ada_get_T_SHORT");

   function get_T_USHORT return  Interfaces.C.int;

   pragma Import (C, get_T_USHORT, "Ada_get_T_USHORT");

   function get_T_ENUM return  Interfaces.C.int;

   pragma Import (C, get_T_ENUM, "Ada_get_T_ENUM");

   function get_T_INT return  Interfaces.C.int;

   pragma Import (C, get_T_INT, "Ada_get_T_INT");

   function get_T_UINT return  Interfaces.C.int;

   pragma Import (C, get_T_UINT, "Ada_get_T_UINT");

   function get_T_LONG return  Interfaces.C.int;

   pragma Import (C, get_T_LONG, "Ada_get_T_LONG");

   function get_T_ULONG return  Interfaces.C.int;

   pragma Import (C, get_T_ULONG, "Ada_get_T_ULONG");

   function get_T_LONGLONG return  Interfaces.C.int;

   pragma Import (C, get_T_LONGLONG, "Ada_get_T_LONGLONG");

   function get_T_ULONGLONG return  Interfaces.C.int;

   pragma Import (C, get_T_ULONGLONG, "Ada_get_T_ULONGLONG");

   function get_T_FLOAT return  Interfaces.C.int;

   pragma Import (C, get_T_FLOAT, "Ada_get_T_FLOAT");

   function get_T_DOUBLE return  Interfaces.C.int;

   pragma Import (C, get_T_DOUBLE, "Ada_get_T_DOUBLE");

   function get_T_LONGDOUBLE return  Interfaces.C.int;

   pragma Import (C, get_T_LONGDOUBLE, "Ada_get_T_LONGDOUBLE");

   function get_T_FLTCPLX return  Interfaces.C.int;

   pragma Import (C, get_T_FLTCPLX, "Ada_get_T_FLTCPLX");

   function get_T_DBLCPLX return  Interfaces.C.int;

   pragma Import (C, get_T_DBLCPLX, "Ada_get_T_DBLCPLX");

   function get_T_NUMERIC return  Interfaces.C.int;

   pragma Import (C, get_T_NUMERIC, "Ada_get_T_NUMERIC");

   function get_T_COMPLEX return  Interfaces.C.int;

   pragma Import (C, get_T_COMPLEX, "Ada_get_T_COMPLEX");

   function get_T_CHAR return  Interfaces.C.int;

   pragma Import (C, get_T_CHAR, "Ada_get_T_CHAR");

   function get_T_WCHAR return  Interfaces.C.int;

   pragma Import (C, get_T_WCHAR, "Ada_get_T_WCHAR");

   function get_T_USER return  Interfaces.C.int;

   pragma Import (C, get_T_USER, "Ada_get_T_USER");

   function get_T_VOID return  Interfaces.C.int;

   pragma Import (C, get_T_VOID, "Ada_get_T_VOID");

   function get_T_STRING return  Interfaces.C.int;

   pragma Import (C, get_T_STRING, "Ada_get_T_STRING");

   function get_T_POINTER return  Interfaces.C.int;

   pragma Import (C, get_T_POINTER, "Ada_get_T_POINTER");

   function get_T_REFERENCE return  Interfaces.C.int;

   pragma Import (C, get_T_REFERENCE, "Ada_get_T_REFERENCE");

   function get_T_ARRAY return  Interfaces.C.int;

   pragma Import (C, get_T_ARRAY, "Ada_get_T_ARRAY");

   function get_T_FUNCTION return  Interfaces.C.int;

   pragma Import (C, get_T_FUNCTION, "Ada_get_T_FUNCTION");

   function get_T_MPOINTER return  Interfaces.C.int;

   pragma Import (C, get_T_MPOINTER, "Ada_get_T_MPOINTER");

   function get_T_VARARGS return  Interfaces.C.int;

   pragma Import (C, get_T_VARARGS, "Ada_get_T_VARARGS");

   function get_T_SYMBOL return  Interfaces.C.int;

   pragma Import (C, get_T_SYMBOL, "Ada_get_T_SYMBOL");

   function get_T_ERROR return  Interfaces.C.int;

   pragma Import (C, get_T_ERROR, "Ada_get_T_ERROR");

   function NewSwigType (jarg1 : Interfaces.C.int) return System.Address;

   pragma Import (C, NewSwigType, "Ada_NewSwigType");

   function SwigType_del_element
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_del_element, "Ada_SwigType_del_element");

   function SwigType_add_pointer
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_add_pointer, "Ada_SwigType_add_pointer");

   function SwigType_add_memberpointer
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      SwigType_add_memberpointer,
      "Ada_SwigType_add_memberpointer");

   function SwigType_del_memberpointer
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      SwigType_del_memberpointer,
      "Ada_SwigType_del_memberpointer");

   function SwigType_del_pointer
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_del_pointer, "Ada_SwigType_del_pointer");

   function SwigType_add_array
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_add_array, "Ada_SwigType_add_array");

   function SwigType_del_array
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_del_array, "Ada_SwigType_del_array");

   function SwigType_pop_arrays
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_pop_arrays, "Ada_SwigType_pop_arrays");

   function SwigType_add_reference
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_add_reference, "Ada_SwigType_add_reference");

   function SwigType_del_reference
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_del_reference, "Ada_SwigType_del_reference");

   function SwigType_add_qualifier
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_add_qualifier, "Ada_SwigType_add_qualifier");

   function SwigType_del_qualifier
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_del_qualifier, "Ada_SwigType_del_qualifier");

   function SwigType_add_function
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_add_function, "Ada_SwigType_add_function");

   function SwigType_add_template
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_add_template, "Ada_SwigType_add_template");

   function SwigType_pop_function
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_pop_function, "Ada_SwigType_pop_function");

   function SwigType_function_parms
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_function_parms, "Ada_SwigType_function_parms");

   function SwigType_split (jarg1 : System.Address) return System.Address;

   pragma Import (C, SwigType_split, "Ada_SwigType_split");

   function SwigType_pop (jarg1 : System.Address) return System.Address;

   pragma Import (C, SwigType_pop, "Ada_SwigType_pop");

   procedure SwigType_push (jarg1 : System.Address; jarg2 : System.Address);

   pragma Import (C, SwigType_push, "Ada_SwigType_push");

   function SwigType_parmlist
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_parmlist, "Ada_SwigType_parmlist");

   function SwigType_parm (jarg1 : System.Address) return System.Address;

   pragma Import (C, SwigType_parm, "Ada_SwigType_parm");

   function SwigType_str
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_str, "Ada_SwigType_str");

   function SwigType_lstr
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_lstr, "Ada_SwigType_lstr");

   function SwigType_rcaststr
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_rcaststr, "Ada_SwigType_rcaststr");

   function SwigType_lcaststr
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_lcaststr, "Ada_SwigType_lcaststr");

   function SwigType_manglestr
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_manglestr, "Ada_SwigType_manglestr");

   function SwigType_ltype (jarg1 : System.Address) return System.Address;

   pragma Import (C, SwigType_ltype, "Ada_SwigType_ltype");

   function SwigType_ispointer
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_ispointer, "Ada_SwigType_ispointer");

   function SwigType_ispointer_return
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      SwigType_ispointer_return,
      "Ada_SwigType_ispointer_return");

   function SwigType_isfunctionpointer
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      SwigType_isfunctionpointer,
      "Ada_SwigType_isfunctionpointer");

   function SwigType_ismemberpointer
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      SwigType_ismemberpointer,
      "Ada_SwigType_ismemberpointer");

   function SwigType_isreference
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_isreference, "Ada_SwigType_isreference");

   function SwigType_isreference_return
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      SwigType_isreference_return,
      "Ada_SwigType_isreference_return");

   function SwigType_isarray
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_isarray, "Ada_SwigType_isarray");

   function SwigType_prefix_is_simple_1D_array
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      SwigType_prefix_is_simple_1D_array,
      "Ada_SwigType_prefix_is_simple_1D_array");

   function SwigType_isfunction
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_isfunction, "Ada_SwigType_isfunction");

   function SwigType_isqualifier
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_isqualifier, "Ada_SwigType_isqualifier");

   function SwigType_isconst
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_isconst, "Ada_SwigType_isconst");

   function SwigType_issimple
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_issimple, "Ada_SwigType_issimple");

   function SwigType_ismutable
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_ismutable, "Ada_SwigType_ismutable");

   function SwigType_isvarargs
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_isvarargs, "Ada_SwigType_isvarargs");

   function SwigType_istemplate
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_istemplate, "Ada_SwigType_istemplate");

   function SwigType_isenum
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_isenum, "Ada_SwigType_isenum");

   function SwigType_check_decl
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_check_decl, "Ada_SwigType_check_decl");

   function SwigType_strip_qualifiers
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      SwigType_strip_qualifiers,
      "Ada_SwigType_strip_qualifiers");

   function SwigType_functionpointer_decompose
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      SwigType_functionpointer_decompose,
      "Ada_SwigType_functionpointer_decompose");

   function SwigType_base (jarg1 : System.Address) return System.Address;

   pragma Import (C, SwigType_base, "Ada_SwigType_base");

   function SwigType_namestr (jarg1 : System.Address) return System.Address;

   pragma Import (C, SwigType_namestr, "Ada_SwigType_namestr");

   function SwigType_templateprefix
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_templateprefix, "Ada_SwigType_templateprefix");

   function SwigType_templatesuffix
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_templatesuffix, "Ada_SwigType_templatesuffix");

   function SwigType_templateargs
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_templateargs, "Ada_SwigType_templateargs");

   function SwigType_prefix (jarg1 : System.Address) return System.Address;

   pragma Import (C, SwigType_prefix, "Ada_SwigType_prefix");

   function SwigType_array_ndim
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_array_ndim, "Ada_SwigType_array_ndim");

   function SwigType_array_getdim
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int)
      return  System.Address;

   pragma Import (C, SwigType_array_getdim, "Ada_SwigType_array_getdim");

   procedure SwigType_array_setdim
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int;
      jarg3 : System.Address);

   pragma Import (C, SwigType_array_setdim, "Ada_SwigType_array_setdim");

   function SwigType_array_type
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_array_type, "Ada_SwigType_array_type");

   function SwigType_default (jarg1 : System.Address) return System.Address;

   pragma Import (C, SwigType_default, "Ada_SwigType_default");

   procedure SwigType_typename_replace
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address);

   pragma Import
     (C,
      SwigType_typename_replace,
      "Ada_SwigType_typename_replace");

   function SwigType_alttype
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int)
      return  System.Address;

   pragma Import (C, SwigType_alttype, "Ada_SwigType_alttype");

   procedure SwigType_typesystem_init;

   pragma Import
     (C,
      SwigType_typesystem_init,
      "Ada_SwigType_typesystem_init");

   function SwigType_typedef
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_typedef, "Ada_SwigType_typedef");

   function SwigType_typedef_class
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_typedef_class, "Ada_SwigType_typedef_class");

   function SwigType_typedef_using
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_typedef_using, "Ada_SwigType_typedef_using");

   procedure SwigType_inherit
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address);

   pragma Import (C, SwigType_inherit, "Ada_SwigType_inherit");

   function SwigType_issubtype
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_issubtype, "Ada_SwigType_issubtype");

   procedure SwigType_scope_alias
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, SwigType_scope_alias, "Ada_SwigType_scope_alias");

   procedure SwigType_using_scope (jarg1 : System.Address);

   pragma Import (C, SwigType_using_scope, "Ada_SwigType_using_scope");

   procedure SwigType_new_scope (jarg1 : System.Address);

   pragma Import (C, SwigType_new_scope, "Ada_SwigType_new_scope");

   procedure SwigType_inherit_scope (jarg1 : System.Address);

   pragma Import (C, SwigType_inherit_scope, "Ada_SwigType_inherit_scope");

   function SwigType_pop_scope return  System.Address;

   pragma Import (C, SwigType_pop_scope, "Ada_SwigType_pop_scope");

   function SwigType_set_scope
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_set_scope, "Ada_SwigType_set_scope");

   procedure SwigType_print_scope (jarg1 : System.Address);

   pragma Import (C, SwigType_print_scope, "Ada_SwigType_print_scope");

   function SwigType_typedef_resolve
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      SwigType_typedef_resolve,
      "Ada_SwigType_typedef_resolve");

   function SwigType_typedef_resolve_all
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      SwigType_typedef_resolve_all,
      "Ada_SwigType_typedef_resolve_all");

   function SwigType_typedef_qualified
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      SwigType_typedef_qualified,
      "Ada_SwigType_typedef_qualified");

   function SwigType_istypedef
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_istypedef, "Ada_SwigType_istypedef");

   function SwigType_isclass
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SwigType_isclass, "Ada_SwigType_isclass");

   procedure SwigType_attach_symtab (jarg1 : System.Address);

   pragma Import (C, SwigType_attach_symtab, "Ada_SwigType_attach_symtab");

   procedure SwigType_remember (jarg1 : System.Address);

   pragma Import (C, SwigType_remember, "Ada_SwigType_remember");

   procedure SwigType_remember_clientdata
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      SwigType_remember_clientdata,
      "Ada_SwigType_remember_clientdata");

   procedure SwigType_remember_mangleddata
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      SwigType_remember_mangleddata,
      "Ada_SwigType_remember_mangleddata");

   function SwigType_remember_trace
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, SwigType_remember_trace, "Ada_SwigType_remember_trace");

   procedure SwigType_emit_type_table
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      SwigType_emit_type_table,
      "Ada_SwigType_emit_type_table");

   function SwigType_type (jarg1 : System.Address) return Interfaces.C.int;

   pragma Import (C, SwigType_type, "Ada_SwigType_type");

   procedure Swig_symbol_init;

   pragma Import (C, Swig_symbol_init, "Ada_Swig_symbol_init");

   procedure Swig_symbol_setscopename (jarg1 : System.Address);

   pragma Import
     (C,
      Swig_symbol_setscopename,
      "Ada_Swig_symbol_setscopename");

   function Swig_symbol_getscopename return  System.Address;

   pragma Import
     (C,
      Swig_symbol_getscopename,
      "Ada_Swig_symbol_getscopename");

   function Swig_symbol_qualifiedscopename
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_symbol_qualifiedscopename,
      "Ada_Swig_symbol_qualifiedscopename");

   function Swig_symbol_newscope return  System.Address;

   pragma Import (C, Swig_symbol_newscope, "Ada_Swig_symbol_newscope");

   function Swig_symbol_setscope
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_symbol_setscope, "Ada_Swig_symbol_setscope");

   function Swig_symbol_getscope
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_symbol_getscope, "Ada_Swig_symbol_getscope");

   function Swig_symbol_current return  System.Address;

   pragma Import (C, Swig_symbol_current, "Ada_Swig_symbol_current");

   function Swig_symbol_popscope return  System.Address;

   pragma Import (C, Swig_symbol_popscope, "Ada_Swig_symbol_popscope");

   function Swig_symbol_add
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_symbol_add, "Ada_Swig_symbol_add");

   procedure Swig_symbol_cadd
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, Swig_symbol_cadd, "Ada_Swig_symbol_cadd");

   function Swig_symbol_clookup
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_symbol_clookup, "Ada_Swig_symbol_clookup");

   function Swig_symbol_clookup_check
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_symbol_clookup_check,
      "Ada_Swig_symbol_clookup_check");

   function Swig_symbol_cscope
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_symbol_cscope, "Ada_Swig_symbol_cscope");

   function Swig_symbol_clookup_local
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_symbol_clookup_local,
      "Ada_Swig_symbol_clookup_local");

   function Swig_symbol_clookup_local_check
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_symbol_clookup_local_check,
      "Ada_Swig_symbol_clookup_local_check");

   function Swig_symbol_qualified
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_symbol_qualified, "Ada_Swig_symbol_qualified");

   function Swig_symbol_isoverloaded
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_symbol_isoverloaded,
      "Ada_Swig_symbol_isoverloaded");

   procedure Swig_symbol_remove (jarg1 : System.Address);

   pragma Import (C, Swig_symbol_remove, "Ada_Swig_symbol_remove");

   procedure Swig_symbol_alias
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, Swig_symbol_alias, "Ada_Swig_symbol_alias");

   procedure Swig_symbol_inherit (jarg1 : System.Address);

   pragma Import (C, Swig_symbol_inherit, "Ada_Swig_symbol_inherit");

   function Swig_symbol_type_qualify
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_symbol_type_qualify,
      "Ada_Swig_symbol_type_qualify");

   function Swig_symbol_string_qualify
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_symbol_string_qualify,
      "Ada_Swig_symbol_string_qualify");

   function Swig_symbol_typedef_reduce
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_symbol_typedef_reduce,
      "Ada_Swig_symbol_typedef_reduce");

   function Swig_symbol_template_defargs
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_symbol_template_defargs,
      "Ada_Swig_symbol_template_defargs");

   function Swig_symbol_template_deftype
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_symbol_template_deftype,
      "Ada_Swig_symbol_template_deftype");

   function Swig_symbol_template_param_eval
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_symbol_template_param_eval,
      "Ada_Swig_symbol_template_param_eval");

   function ParmList_errorstr
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, ParmList_errorstr, "Ada_ParmList_errorstr");

   function ParmList_is_compactdefargs
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      ParmList_is_compactdefargs,
      "Ada_ParmList_is_compactdefargs");

   procedure Swig_name_register
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, Swig_name_register, "Ada_Swig_name_register");

   procedure Swig_name_unregister (jarg1 : System.Address);

   pragma Import (C, Swig_name_unregister, "Ada_Swig_name_unregister");

   function Swig_name_mangle (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_name_mangle, "Ada_Swig_name_mangle");

   function Swig_name_wrapper
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_name_wrapper, "Ada_Swig_name_wrapper");

   function Swig_name_member
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_name_member, "Ada_Swig_name_member");

   function Swig_name_get (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_name_get, "Ada_Swig_name_get");

   function Swig_name_set (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_name_set, "Ada_Swig_name_set");

   function Swig_name_construct
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_name_construct, "Ada_Swig_name_construct");

   function Swig_name_copyconstructor
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_name_copyconstructor,
      "Ada_Swig_name_copyconstructor");

   function Swig_name_destroy
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_name_destroy, "Ada_Swig_name_destroy");

   function Swig_name_disown (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_name_disown, "Ada_Swig_name_disown");

   procedure Swig_name_namewarn_add
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address);

   pragma Import (C, Swig_name_namewarn_add, "Ada_Swig_name_namewarn_add");

   function Swig_name_namewarn_get
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_name_namewarn_get, "Ada_Swig_name_namewarn_get");

   procedure Swig_name_rename_add
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address;
      jarg5 : System.Address);

   pragma Import (C, Swig_name_rename_add, "Ada_Swig_name_rename_add");

   procedure Swig_name_inherit
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, Swig_name_inherit, "Ada_Swig_name_inherit");

   function Swig_need_protected
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Swig_need_protected, "Ada_Swig_need_protected");

   function Swig_need_name_warning
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Swig_need_name_warning, "Ada_Swig_need_name_warning");

   function Swig_need_redefined_warn
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : Interfaces.C.int)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Swig_need_redefined_warn,
      "Ada_Swig_need_redefined_warn");

   function Swig_name_make
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address;
      jarg5 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_name_make, "Ada_Swig_name_make");

   function Swig_name_warning
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_name_warning, "Ada_Swig_name_warning");

   function Swig_name_decl (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_name_decl, "Ada_Swig_name_decl");

   function Swig_name_fulldecl
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_name_fulldecl, "Ada_Swig_name_fulldecl");

   procedure Swig_name_object_set
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address);

   pragma Import (C, Swig_name_object_set, "Ada_Swig_name_object_set");

   function Swig_name_object_get
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_name_object_get, "Ada_Swig_name_object_get");

   procedure Swig_name_object_inherit
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address);

   pragma Import
     (C,
      Swig_name_object_inherit,
      "Ada_Swig_name_object_inherit");

   procedure Swig_features_get
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address;
      jarg5 : System.Address);

   pragma Import (C, Swig_features_get, "Ada_Swig_features_get");

   procedure Swig_feature_set
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address;
      jarg5 : System.Address;
      jarg6 : System.Address);

   pragma Import (C, Swig_feature_set, "Ada_Swig_feature_set");

   function Swig_copy_string
     (jarg1 : Interfaces.C.Strings.chars_ptr)
      return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, Swig_copy_string, "Ada_Swig_copy_string");

   procedure Swig_set_fakeversion (jarg1 : Interfaces.C.Strings.chars_ptr);

   pragma Import (C, Swig_set_fakeversion, "Ada_Swig_set_fakeversion");

   function Swig_package_version return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, Swig_package_version, "Ada_Swig_package_version");

   procedure Swig_banner (jarg1 : System.Address);

   pragma Import (C, Swig_banner, "Ada_Swig_banner");

   function Swig_strip_c_comments
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_strip_c_comments, "Ada_Swig_strip_c_comments");

   function Swig_string_escape
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_string_escape, "Ada_Swig_string_escape");

   function Swig_string_mangle
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_string_mangle, "Ada_Swig_string_mangle");

   procedure Swig_scopename_split
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address);

   pragma Import (C, Swig_scopename_split, "Ada_Swig_scopename_split");

   function Swig_scopename_prefix
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_scopename_prefix, "Ada_Swig_scopename_prefix");

   function Swig_scopename_last
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_scopename_last, "Ada_Swig_scopename_last");

   function Swig_scopename_first
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_scopename_first, "Ada_Swig_scopename_first");

   function Swig_scopename_suffix
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_scopename_suffix, "Ada_Swig_scopename_suffix");

   function Swig_scopename_check
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Swig_scopename_check, "Ada_Swig_scopename_check");

   function Swig_string_lower
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_string_lower, "Ada_Swig_string_lower");

   function Swig_string_upper
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_string_upper, "Ada_Swig_string_upper");

   function Swig_string_title
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_string_title, "Ada_Swig_string_title");

   procedure Swig_init;

   pragma Import (C, Swig_init, "Ada_Swig_init");

   procedure Swig_warn
     (jarg1 : Interfaces.C.Strings.chars_ptr;
      jarg2 : Interfaces.C.int;
      jarg3 : Interfaces.C.Strings.chars_ptr);

   pragma Import (C, Swig_warn, "Ada_Swig_warn");

   function Swig_value_wrapper_mode
     (jarg1 : Interfaces.C.int)
      return  Interfaces.C.int;

   pragma Import (C, Swig_value_wrapper_mode, "Ada_Swig_value_wrapper_mode");

   procedure Swig_warning
     (jarg1 : Interfaces.C.int;
      jarg2 : System.Address;
      jarg3 : Interfaces.C.int;
      jarg4 : Interfaces.C.Strings.chars_ptr);

   pragma Import (C, Swig_warning, "Ada_Swig_warning");

   procedure Swig_error_file
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int;
      jarg3 : Interfaces.C.Strings.chars_ptr);

   pragma Import (C, Swig_error_file, "Ada_Swig_error_file");

   function Swig_error_count return  Interfaces.C.int;

   pragma Import (C, Swig_error_count, "Ada_Swig_error_count");

   procedure Swig_error_silent (jarg1 : Interfaces.C.int);

   pragma Import (C, Swig_error_silent, "Ada_Swig_error_silent");

   procedure Swig_warnfilter
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int);

   pragma Import (C, Swig_warnfilter, "Ada_Swig_warnfilter");

   procedure Swig_warnall;

   pragma Import (C, Swig_warnall, "Ada_Swig_warnall");

   function Swig_warn_count return  Interfaces.C.int;

   pragma Import (C, Swig_warn_count, "Ada_Swig_warn_count");

   procedure Swig_error_msg_format (jarg1 : Interfaces.C.int);

   pragma Import (C, Swig_error_msg_format, "Ada_Swig_error_msg_format");

   function Swig_cparm_name
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int)
      return  System.Address;

   pragma Import (C, Swig_cparm_name, "Ada_Swig_cparm_name");

   function Swig_wrapped_var_type
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int)
      return  System.Address;

   pragma Import (C, Swig_wrapped_var_type, "Ada_Swig_wrapped_var_type");

   function Swig_cargs
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Swig_cargs, "Ada_Swig_cargs");

   function Swig_cresult
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_cresult, "Ada_Swig_cresult");

   function Swig_cfunction_call
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_cfunction_call, "Ada_Swig_cfunction_call");

   function Swig_cconstructor_call
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_cconstructor_call, "Ada_Swig_cconstructor_call");

   function Swig_cppconstructor_call
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_cppconstructor_call,
      "Ada_Swig_cppconstructor_call");

   function Swig_unref_call (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_unref_call, "Ada_Swig_unref_call");

   function Swig_ref_call
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_ref_call, "Ada_Swig_ref_call");

   function Swig_cdestructor_call
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_cdestructor_call, "Ada_Swig_cdestructor_call");

   function Swig_cppdestructor_call
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_cppdestructor_call, "Ada_Swig_cppdestructor_call");

   function Swig_cmemberset_call
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : Interfaces.C.int)
      return  System.Address;

   pragma Import (C, Swig_cmemberset_call, "Ada_Swig_cmemberset_call");

   function Swig_cmemberget_call
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : Interfaces.C.int)
      return  System.Address;

   pragma Import (C, Swig_cmemberget_call, "Ada_Swig_cmemberget_call");

   function Swig_add_extension_code
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address;
      jarg5 : System.Address;
      jarg6 : Interfaces.C.int;
      jarg7 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Swig_add_extension_code, "Ada_Swig_add_extension_code");

   function Swig_MethodToFunction
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : Interfaces.C.int;
      jarg4 : System.Address;
      jarg5 : Interfaces.C.int)
      return  Interfaces.C.int;

   pragma Import (C, Swig_MethodToFunction, "Ada_Swig_MethodToFunction");

   function Swig_ConstructorToFunction
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address;
      jarg5 : Interfaces.C.int;
      jarg6 : Interfaces.C.int)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Swig_ConstructorToFunction,
      "Ada_Swig_ConstructorToFunction");

   function Swig_DestructorToFunction
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : Interfaces.C.int;
      jarg4 : Interfaces.C.int)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Swig_DestructorToFunction,
      "Ada_Swig_DestructorToFunction");

   function Swig_MembersetToFunction
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : Interfaces.C.int)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Swig_MembersetToFunction,
      "Ada_Swig_MembersetToFunction");

   function Swig_MembergetToFunction
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : Interfaces.C.int)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Swig_MembergetToFunction,
      "Ada_Swig_MembergetToFunction");

   function Swig_VargetToFunction
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int)
      return  Interfaces.C.int;

   pragma Import (C, Swig_VargetToFunction, "Ada_Swig_VargetToFunction");

   function Swig_VarsetToFunction
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int)
      return  Interfaces.C.int;

   pragma Import (C, Swig_VarsetToFunction, "Ada_Swig_VarsetToFunction");

   function get_CWRAP_EXTEND return  Interfaces.C.int;

   pragma Import (C, get_CWRAP_EXTEND, "Ada_get_CWRAP_EXTEND");

   function get_CWRAP_SMART_POINTER return  Interfaces.C.int;

   pragma Import (C, get_CWRAP_SMART_POINTER, "Ada_get_CWRAP_SMART_POINTER");

   function get_CWRAP_NATURAL_VAR return  Interfaces.C.int;

   pragma Import (C, get_CWRAP_NATURAL_VAR, "Ada_get_CWRAP_NATURAL_VAR");

   function get_CWRAP_DIRECTOR_ONE_CALL return  Interfaces.C.int;

   pragma Import
     (C,
      get_CWRAP_DIRECTOR_ONE_CALL,
      "Ada_get_CWRAP_DIRECTOR_ONE_CALL");

   function get_CWRAP_DIRECTOR_TWO_CALLS return  Interfaces.C.int;

   pragma Import
     (C,
      get_CWRAP_DIRECTOR_TWO_CALLS,
      "Ada_get_CWRAP_DIRECTOR_TWO_CALLS");

   function get_CWRAP_ALL_PROTECTED_ACCESS return  Interfaces.C.int;

   pragma Import
     (C,
      get_CWRAP_ALL_PROTECTED_ACCESS,
      "Ada_get_CWRAP_ALL_PROTECTED_ACCESS");

   function Swig_methodclass (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_methodclass, "Ada_Swig_methodclass");

   function Swig_directorclass
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Swig_directorclass, "Ada_Swig_directorclass");

   function Swig_directormap
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_directormap, "Ada_Swig_directormap");

   procedure Swig_typemap_init;

   pragma Import (C, Swig_typemap_init, "Ada_Swig_typemap_init");

   procedure Swig_typemap_register
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address;
      jarg5 : System.Address);

   pragma Import (C, Swig_typemap_register, "Ada_Swig_typemap_register");

   function Swig_typemap_copy
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Swig_typemap_copy, "Ada_Swig_typemap_copy");

   procedure Swig_typemap_clear
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, Swig_typemap_clear, "Ada_Swig_typemap_clear");

   function Swig_typemap_apply
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Swig_typemap_apply, "Ada_Swig_typemap_apply");

   procedure Swig_typemap_clear_apply (jarg1 : System.Address);

   pragma Import
     (C,
      Swig_typemap_clear_apply,
      "Ada_Swig_typemap_clear_apply");

   procedure Swig_typemap_debug;

   pragma Import (C, Swig_typemap_debug, "Ada_Swig_typemap_debug");

   function Swig_typemap_search
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_typemap_search, "Ada_Swig_typemap_search");

   function Swig_typemap_search_multi
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : Swig.pointers.int_Pointer)
      return  System.Address;

   pragma Import
     (C,
      Swig_typemap_search_multi,
      "Ada_Swig_typemap_search_multi");

   function Swig_typemap_lookup
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_typemap_lookup, "Ada_Swig_typemap_lookup");

   function Swig_typemap_lookup_out
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address;
      jarg5 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_typemap_lookup_out, "Ada_Swig_typemap_lookup_out");

   procedure Swig_typemap_attach_kwargs
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address);

   pragma Import
     (C,
      Swig_typemap_attach_kwargs,
      "Ada_Swig_typemap_attach_kwargs");

   procedure Swig_typemap_new_scope;

   pragma Import (C, Swig_typemap_new_scope, "Ada_Swig_typemap_new_scope");

   function Swig_typemap_pop_scope return  System.Address;

   pragma Import (C, Swig_typemap_pop_scope, "Ada_Swig_typemap_pop_scope");

   procedure Swig_typemap_attach_parms
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address);

   pragma Import
     (C,
      Swig_typemap_attach_parms,
      "Ada_Swig_typemap_attach_parms");

   procedure Swig_fragment_register (jarg1 : System.Address);

   pragma Import (C, Swig_fragment_register, "Ada_Swig_fragment_register");

   procedure Swig_fragment_emit (jarg1 : System.Address);

   pragma Import (C, Swig_fragment_emit, "Ada_Swig_fragment_emit");

   function Swig_director_mode return  Interfaces.C.int;

   pragma Import (C, Swig_director_mode, "Ada_Swig_director_mode");

   function Swig_director_protected_mode return  Interfaces.C.int;

   pragma Import
     (C,
      Swig_director_protected_mode,
      "Ada_Swig_director_protected_mode");

   function Swig_all_protected_mode return  Interfaces.C.int;

   pragma Import (C, Swig_all_protected_mode, "Ada_Swig_all_protected_mode");

   procedure Wrapper_director_mode_set (jarg1 : Interfaces.C.int);

   pragma Import
     (C,
      Wrapper_director_mode_set,
      "Ada_Wrapper_director_mode_set");

   procedure Wrapper_director_protected_mode_set (jarg1 : Interfaces.C.int);

   pragma Import
     (C,
      Wrapper_director_protected_mode_set,
      "Ada_Wrapper_director_protected_mode_set");

   procedure Wrapper_all_protected_mode_set (jarg1 : Interfaces.C.int);

   pragma Import
     (C,
      Wrapper_all_protected_mode_set,
      "Ada_Wrapper_all_protected_mode_set");

   procedure SwigType_template_init;

   pragma Import (C, SwigType_template_init, "Ada_SwigType_template_init");

   function Preprocessor_expr
     (jarg1 : System.Address;
      jarg2 : Swig.pointers.int_Pointer)
      return  Interfaces.C.int;

   pragma Import (C, Preprocessor_expr, "Ada_Preprocessor_expr");

   function Preprocessor_expr_error return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, Preprocessor_expr_error, "Ada_Preprocessor_expr_error");

   function Preprocessor_define
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int)
      return  System.Address;

   pragma Import (C, Preprocessor_define, "Ada_Preprocessor_define");

   procedure Preprocessor_undef (jarg1 : System.Address);

   pragma Import (C, Preprocessor_undef, "Ada_Preprocessor_undef");

   procedure Preprocessor_init;

   pragma Import (C, Preprocessor_init, "Ada_Preprocessor_init");

   procedure Preprocessor_delete;

   pragma Import (C, Preprocessor_delete, "Ada_Preprocessor_delete");

   function Preprocessor_parse
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Preprocessor_parse, "Ada_Preprocessor_parse");

   procedure Preprocessor_include_all (jarg1 : Interfaces.C.int);

   pragma Import
     (C,
      Preprocessor_include_all,
      "Ada_Preprocessor_include_all");

   procedure Preprocessor_import_all (jarg1 : Interfaces.C.int);

   pragma Import (C, Preprocessor_import_all, "Ada_Preprocessor_import_all");

   procedure Preprocessor_ignore_missing (jarg1 : Interfaces.C.int);

   pragma Import
     (C,
      Preprocessor_ignore_missing,
      "Ada_Preprocessor_ignore_missing");

   procedure Preprocessor_error_as_warning (jarg1 : Interfaces.C.int);

   pragma Import
     (C,
      Preprocessor_error_as_warning,
      "Ada_Preprocessor_error_as_warning");

   function Preprocessor_depend return  System.Address;

   pragma Import (C, Preprocessor_depend, "Ada_Preprocessor_depend");

   procedure Preprocessor_expr_init;

   pragma Import (C, Preprocessor_expr_init, "Ada_Preprocessor_expr_init");

   procedure Preprocessor_expr_delete;

   pragma Import
     (C,
      Preprocessor_expr_delete,
      "Ada_Preprocessor_expr_delete");

   function checkAttribute
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, checkAttribute, "Ada_checkAttribute");

   procedure appendChild (jarg1 : System.Address; jarg2 : System.Address);

   pragma Import (C, appendChild, "Ada_appendChild");

   procedure prependChild (jarg1 : System.Address; jarg2 : System.Address);

   pragma Import (C, prependChild, "Ada_prependChild");

   procedure removeNode (jarg1 : System.Address);

   pragma Import (C, removeNode, "Ada_removeNode");

   function copyNode (jarg1 : System.Address) return System.Address;

   pragma Import (C, copyNode, "Ada_copyNode");

   procedure Swig_require
     (jarg1 : Interfaces.C.Strings.chars_ptr;
      jarg2 : System.Address);

   pragma Import (C, Swig_require, "Ada_Swig_require");

   procedure Swig_save
     (jarg1 : Interfaces.C.Strings.chars_ptr;
      jarg2 : System.Address);

   pragma Import (C, Swig_save, "Ada_Swig_save");

   procedure Swig_restore (jarg1 : System.Address);

   pragma Import (C, Swig_restore, "Ada_Swig_restore");

   procedure Swig_print_tags
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, Swig_print_tags, "Ada_Swig_print_tags");

   procedure Swig_print_tree (jarg1 : System.Address);

   pragma Import (C, Swig_print_tree, "Ada_Swig_print_tree");

   procedure Swig_print_node (jarg1 : System.Address);

   pragma Import (C, Swig_print_node, "Ada_Swig_print_node");

   procedure set_Wrapper_localh
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, set_Wrapper_localh, "Ada_set_Wrapper_localh");

   function get_Wrapper_localh
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, get_Wrapper_localh, "Ada_get_Wrapper_localh");

   procedure set_Wrapper_def
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, set_Wrapper_def, "Ada_set_Wrapper_def");

   function get_Wrapper_def (jarg1 : System.Address) return System.Address;

   pragma Import (C, get_Wrapper_def, "Ada_get_Wrapper_def");

   procedure set_Wrapper_locals
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, set_Wrapper_locals, "Ada_set_Wrapper_locals");

   function get_Wrapper_locals
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, get_Wrapper_locals, "Ada_get_Wrapper_locals");

   procedure set_Wrapper_code
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, set_Wrapper_code, "Ada_set_Wrapper_code");

   function get_Wrapper_code (jarg1 : System.Address) return System.Address;

   pragma Import (C, get_Wrapper_code, "Ada_get_Wrapper_code");

   function new_Wrapper return  System.Address;

   pragma Import (C, new_Wrapper, "Ada_new_Wrapper");

   procedure delete_Wrapper (jarg1 : System.Address);

   pragma Import (C, delete_Wrapper, "Ada_delete_Wrapper");

   function NewWrapper return  System.Address;

   pragma Import (C, NewWrapper, "Ada_NewWrapper");

   procedure DelWrapper (jarg1 : System.Address);

   pragma Import (C, DelWrapper, "Ada_DelWrapper");

   procedure Wrapper_compact_print_mode_set (jarg1 : Interfaces.C.int);

   pragma Import
     (C,
      Wrapper_compact_print_mode_set,
      "Ada_Wrapper_compact_print_mode_set");

   procedure Wrapper_pretty_print
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, Wrapper_pretty_print, "Ada_Wrapper_pretty_print");

   procedure Wrapper_compact_print
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, Wrapper_compact_print, "Ada_Wrapper_compact_print");

   procedure Wrapper_print (jarg1 : System.Address; jarg2 : System.Address);

   pragma Import (C, Wrapper_print, "Ada_Wrapper_print");

   function Wrapper_add_local
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Wrapper_add_local, "Ada_Wrapper_add_local");

   function Wrapper_add_localv
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Wrapper_add_localv, "Ada_Wrapper_add_localv");

   function Wrapper_check_local
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Wrapper_check_local, "Ada_Wrapper_check_local");

   function Wrapper_new_local
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, Wrapper_new_local, "Ada_Wrapper_new_local");

   function Wrapper_new_localv
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, Wrapper_new_localv, "Ada_Wrapper_new_localv");

   function get_NOT_VIRTUAL return  Interfaces.C.int;

   pragma Import (C, get_NOT_VIRTUAL, "Ada_get_NOT_VIRTUAL");

   function get_PLAIN_VIRTUAL return  Interfaces.C.int;

   pragma Import (C, get_PLAIN_VIRTUAL, "Ada_get_PLAIN_VIRTUAL");

   function get_PURE_VIRTUAL return  Interfaces.C.int;

   pragma Import (C, get_PURE_VIRTUAL, "Ada_get_PURE_VIRTUAL");

   procedure set_input_file (jarg1 : Interfaces.C.Strings.chars_ptr);

   pragma Import (C, set_input_file, "Ada_set_input_file");

   function get_input_file return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_input_file, "Ada_get_input_file");

   procedure set_line_number (jarg1 : Interfaces.C.int);

   pragma Import (C, set_line_number, "Ada_set_line_number");

   function get_line_number return  Interfaces.C.int;

   pragma Import (C, get_line_number, "Ada_get_line_number");

   procedure set_CPlusPlus (jarg1 : Interfaces.C.int);

   pragma Import (C, set_CPlusPlus, "Ada_set_CPlusPlus");

   function get_CPlusPlus return  Interfaces.C.int;

   pragma Import (C, get_CPlusPlus, "Ada_get_CPlusPlus");

   procedure set_Extend (jarg1 : Interfaces.C.int);

   pragma Import (C, set_Extend, "Ada_set_Extend");

   function get_Extend return  Interfaces.C.int;

   pragma Import (C, get_Extend, "Ada_get_Extend");

   procedure set_Verbose (jarg1 : Interfaces.C.int);

   pragma Import (C, set_Verbose, "Ada_set_Verbose");

   function get_Verbose return  Interfaces.C.int;

   pragma Import (C, get_Verbose, "Ada_get_Verbose");

   procedure set_IsVirtual (jarg1 : Interfaces.C.int);

   pragma Import (C, set_IsVirtual, "Ada_set_IsVirtual");

   function get_IsVirtual return  Interfaces.C.int;

   pragma Import (C, get_IsVirtual, "Ada_get_IsVirtual");

   procedure set_ImportMode (jarg1 : Interfaces.C.int);

   pragma Import (C, set_ImportMode, "Ada_set_ImportMode");

   function get_ImportMode return  Interfaces.C.int;

   pragma Import (C, get_ImportMode, "Ada_get_ImportMode");

   procedure set_NoExcept (jarg1 : Interfaces.C.int);

   pragma Import (C, set_NoExcept, "Ada_set_NoExcept");

   function get_NoExcept return  Interfaces.C.int;

   pragma Import (C, get_NoExcept, "Ada_get_NoExcept");

   procedure set_Abstract (jarg1 : Interfaces.C.int);

   pragma Import (C, set_Abstract, "Ada_set_Abstract");

   function get_Abstract return  Interfaces.C.int;

   pragma Import (C, get_Abstract, "Ada_get_Abstract");

   procedure set_SmartPointer (jarg1 : Interfaces.C.int);

   pragma Import (C, set_SmartPointer, "Ada_set_SmartPointer");

   function get_SmartPointer return  Interfaces.C.int;

   pragma Import (C, get_SmartPointer, "Ada_get_SmartPointer");

   procedure set_SwigRuntime (jarg1 : Interfaces.C.int);

   pragma Import (C, set_SwigRuntime, "Ada_set_SwigRuntime");

   function get_SwigRuntime return  Interfaces.C.int;

   pragma Import (C, get_SwigRuntime, "Ada_get_SwigRuntime");

   procedure set_argv_template_string (jarg1 : System.Address);

   pragma Import
     (C,
      set_argv_template_string,
      "Ada_set_argv_template_string");

   function get_argv_template_string return  System.Address;

   pragma Import
     (C,
      get_argv_template_string,
      "Ada_get_argv_template_string");

   procedure set_argc_template_string (jarg1 : System.Address);

   pragma Import
     (C,
      set_argc_template_string,
      "Ada_set_argc_template_string");

   function get_argc_template_string return  System.Address;

   pragma Import
     (C,
      get_argc_template_string,
      "Ada_get_argc_template_string");

   function get_tab2 return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_tab2, "Ada_get_tab2");

   function get_tab4 return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_tab4, "Ada_get_tab4");

   function get_tab8 return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_tab8, "Ada_get_tab8");

   function new_Dispatcher return  System.Address;

   pragma Import (C, new_Dispatcher, "Ada_new_Dispatcher");

   procedure delete_Dispatcher (jarg1 : System.Address);

   pragma Import (C, delete_Dispatcher, "Ada_delete_Dispatcher");

   function Dispatcher_emit_one
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Dispatcher_emit_one, "Ada_Dispatcher_emit_one");

   function Dispatcher_emit_children
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_emit_children,
      "Ada_Dispatcher_emit_children");

   function Dispatcher_defaultHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_defaultHandler,
      "Ada_Dispatcher_defaultHandler");

   function Dispatcher_top
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Dispatcher_top, "Ada_Dispatcher_top");

   function Dispatcher_applyDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_applyDirective,
      "Ada_Dispatcher_applyDirective");

   function Dispatcher_clearDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_clearDirective,
      "Ada_Dispatcher_clearDirective");

   function Dispatcher_constantDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_constantDirective,
      "Ada_Dispatcher_constantDirective");

   function Dispatcher_extendDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_extendDirective,
      "Ada_Dispatcher_extendDirective");

   function Dispatcher_fragmentDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_fragmentDirective,
      "Ada_Dispatcher_fragmentDirective");

   function Dispatcher_importDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_importDirective,
      "Ada_Dispatcher_importDirective");

   function Dispatcher_includeDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_includeDirective,
      "Ada_Dispatcher_includeDirective");

   function Dispatcher_insertDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_insertDirective,
      "Ada_Dispatcher_insertDirective");

   function Dispatcher_moduleDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_moduleDirective,
      "Ada_Dispatcher_moduleDirective");

   function Dispatcher_nativeDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_nativeDirective,
      "Ada_Dispatcher_nativeDirective");

   function Dispatcher_pragmaDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_pragmaDirective,
      "Ada_Dispatcher_pragmaDirective");

   function Dispatcher_typemapDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_typemapDirective,
      "Ada_Dispatcher_typemapDirective");

   function Dispatcher_typemapitemDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_typemapitemDirective,
      "Ada_Dispatcher_typemapitemDirective");

   function Dispatcher_typemapcopyDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_typemapcopyDirective,
      "Ada_Dispatcher_typemapcopyDirective");

   function Dispatcher_typesDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_typesDirective,
      "Ada_Dispatcher_typesDirective");

   function Dispatcher_cDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Dispatcher_cDeclaration, "Ada_Dispatcher_cDeclaration");

   function Dispatcher_externDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_externDeclaration,
      "Ada_Dispatcher_externDeclaration");

   function Dispatcher_enumDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_enumDeclaration,
      "Ada_Dispatcher_enumDeclaration");

   function Dispatcher_enumvalueDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_enumvalueDeclaration,
      "Ada_Dispatcher_enumvalueDeclaration");

   function Dispatcher_enumforwardDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_enumforwardDeclaration,
      "Ada_Dispatcher_enumforwardDeclaration");

   function Dispatcher_classDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_classDeclaration,
      "Ada_Dispatcher_classDeclaration");

   function Dispatcher_classforwardDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_classforwardDeclaration,
      "Ada_Dispatcher_classforwardDeclaration");

   function Dispatcher_constructorDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_constructorDeclaration,
      "Ada_Dispatcher_constructorDeclaration");

   function Dispatcher_destructorDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_destructorDeclaration,
      "Ada_Dispatcher_destructorDeclaration");

   function Dispatcher_accessDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_accessDeclaration,
      "Ada_Dispatcher_accessDeclaration");

   function Dispatcher_usingDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_usingDeclaration,
      "Ada_Dispatcher_usingDeclaration");

   function Dispatcher_namespaceDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_namespaceDeclaration,
      "Ada_Dispatcher_namespaceDeclaration");

   function Dispatcher_templateDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Dispatcher_templateDeclaration,
      "Ada_Dispatcher_templateDeclaration");

   procedure set_Dispatcher_cplus_mode
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int);

   pragma Import
     (C,
      set_Dispatcher_cplus_mode,
      "Ada_set_Dispatcher_cplus_mode");

   function get_Dispatcher_cplus_mode
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      get_Dispatcher_cplus_mode,
      "Ada_get_Dispatcher_cplus_mode");

   procedure Dispatcher_director_connect
     (Dispatcher_address : System.Address;
      cptr               : System.Address;
      mem_own            : Boolean;
      weak_global        : Boolean);

   pragma Import
     (C,
      Dispatcher_director_connect,
      "Ada_swigg_c_import_Dispatcher_director_connect");

   procedure Dispatcher_change_ownership
     (Dispatcher_address : System.Address;
      cptr               : System.Address;
      take_or_release    : Boolean);

   pragma Import
     (C,
      Dispatcher_change_ownership,
      "Ada_swigg_c_import_Dispatcher_change_ownership");

   function new_Language return  System.Address;

   pragma Import (C, new_Language, "Ada_new_Language");

   procedure delete_Language (jarg1 : System.Address);

   pragma Import (C, delete_Language, "Ada_delete_Language");

   function Language_emit_one
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_emit_one, "Ada_Language_emit_one");

   procedure Language_main
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int;
      jarg3 : System.Address);

   pragma Import (C, Language_main, "Ada_Language_main");

   function Language_top
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_top, "Ada_Language_top");

   function Language_applyDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_applyDirective, "Ada_Language_applyDirective");

   function Language_clearDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_clearDirective, "Ada_Language_clearDirective");

   function Language_constantDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_constantDirective,
      "Ada_Language_constantDirective");

   function Language_extendDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_extendDirective,
      "Ada_Language_extendDirective");

   function Language_fragmentDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_fragmentDirective,
      "Ada_Language_fragmentDirective");

   function Language_importDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_importDirective,
      "Ada_Language_importDirective");

   function Language_includeDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_includeDirective,
      "Ada_Language_includeDirective");

   function Language_insertDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_insertDirective,
      "Ada_Language_insertDirective");

   function Language_moduleDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_moduleDirective,
      "Ada_Language_moduleDirective");

   function Language_nativeDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_nativeDirective,
      "Ada_Language_nativeDirective");

   function Language_pragmaDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_pragmaDirective,
      "Ada_Language_pragmaDirective");

   function Language_typemapDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_typemapDirective,
      "Ada_Language_typemapDirective");

   function Language_typemapcopyDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_typemapcopyDirective,
      "Ada_Language_typemapcopyDirective");

   function Language_typesDirective
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_typesDirective, "Ada_Language_typesDirective");

   function Language_cDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_cDeclaration, "Ada_Language_cDeclaration");

   function Language_externDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_externDeclaration,
      "Ada_Language_externDeclaration");

   function Language_enumDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_enumDeclaration,
      "Ada_Language_enumDeclaration");

   function Language_enumvalueDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_enumvalueDeclaration,
      "Ada_Language_enumvalueDeclaration");

   function Language_enumforwardDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_enumforwardDeclaration,
      "Ada_Language_enumforwardDeclaration");

   function Language_classDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_classDeclaration,
      "Ada_Language_classDeclaration");

   function Language_classforwardDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_classforwardDeclaration,
      "Ada_Language_classforwardDeclaration");

   function Language_constructorDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_constructorDeclaration,
      "Ada_Language_constructorDeclaration");

   function Language_destructorDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_destructorDeclaration,
      "Ada_Language_destructorDeclaration");

   function Language_accessDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_accessDeclaration,
      "Ada_Language_accessDeclaration");

   function Language_namespaceDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_namespaceDeclaration,
      "Ada_Language_namespaceDeclaration");

   function Language_usingDeclaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_usingDeclaration,
      "Ada_Language_usingDeclaration");

   function Language_functionHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_functionHandler,
      "Ada_Language_functionHandler");

   function Language_globalfunctionHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_globalfunctionHandler,
      "Ada_Language_globalfunctionHandler");

   function Language_memberfunctionHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_memberfunctionHandler,
      "Ada_Language_memberfunctionHandler");

   function Language_staticmemberfunctionHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_staticmemberfunctionHandler,
      "Ada_Language_staticmemberfunctionHandler");

   function Language_callbackfunctionHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_callbackfunctionHandler,
      "Ada_Language_callbackfunctionHandler");

   function Language_variableHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_variableHandler,
      "Ada_Language_variableHandler");

   function Language_globalvariableHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_globalvariableHandler,
      "Ada_Language_globalvariableHandler");

   function Language_membervariableHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_membervariableHandler,
      "Ada_Language_membervariableHandler");

   function Language_staticmembervariableHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_staticmembervariableHandler,
      "Ada_Language_staticmembervariableHandler");

   function Language_memberconstantHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_memberconstantHandler,
      "Ada_Language_memberconstantHandler");

   function Language_constructorHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_constructorHandler,
      "Ada_Language_constructorHandler");

   function Language_copyconstructorHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_copyconstructorHandler,
      "Ada_Language_copyconstructorHandler");

   function Language_destructorHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_destructorHandler,
      "Ada_Language_destructorHandler");

   function Language_classHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_classHandler, "Ada_Language_classHandler");

   function Language_typedefHandler
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_typedefHandler, "Ada_Language_typedefHandler");

   function Language_constantWrapper
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_constantWrapper,
      "Ada_Language_constantWrapper");

   function Language_variableWrapper
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_variableWrapper,
      "Ada_Language_variableWrapper");

   function Language_functionWrapper
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_functionWrapper,
      "Ada_Language_functionWrapper");

   function Language_nativeWrapper
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_nativeWrapper, "Ada_Language_nativeWrapper");

   function Language_classDirector
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_classDirector, "Ada_Language_classDirector");

   function Language_classDirectorInit
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_classDirectorInit,
      "Ada_Language_classDirectorInit");

   function Language_classDirectorEnd
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_classDirectorEnd,
      "Ada_Language_classDirectorEnd");

   function Language_unrollVirtualMethods_SWIG_0
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address;
      jarg5 : Interfaces.C.int;
      jarg6 : System.Address;
      jarg7 : Interfaces.C.int)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_unrollVirtualMethods_SWIG_0,
      "Ada_Language_unrollVirtualMethods__SWIG_0");

   function Language_unrollVirtualMethods_SWIG_1
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address;
      jarg5 : Interfaces.C.int;
      jarg6 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_unrollVirtualMethods_SWIG_1,
      "Ada_Language_unrollVirtualMethods__SWIG_1");

   function Language_classDirectorConstructor
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_classDirectorConstructor,
      "Ada_Language_classDirectorConstructor");

   function Language_classDirectorDefaultConstructor
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_classDirectorDefaultConstructor,
      "Ada_Language_classDirectorDefaultConstructor");

   function Language_classDirectorMethod
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_classDirectorMethod,
      "Ada_Language_classDirectorMethod");

   function Language_classDirectorConstructors
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_classDirectorConstructors,
      "Ada_Language_classDirectorConstructors");

   function Language_classDirectorDestructor
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_classDirectorDestructor,
      "Ada_Language_classDirectorDestructor");

   function Language_classDirectorMethods
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_classDirectorMethods,
      "Ada_Language_classDirectorMethods");

   function Language_classDirectorDisown
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_classDirectorDisown,
      "Ada_Language_classDirectorDisown");

   function Language_validIdentifier
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_validIdentifier,
      "Ada_Language_validIdentifier");

   function Language_addSymbol
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_addSymbol, "Ada_Language_addSymbol");

   function Language_symbolLookup
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Language_symbolLookup, "Ada_Language_symbolLookup");

   function Language_classLookup
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Language_classLookup, "Ada_Language_classLookup");

   function Language_enumLookup
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Language_enumLookup, "Ada_Language_enumLookup");

   function Language_abstractClassTest
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_abstractClassTest,
      "Ada_Language_abstractClassTest");

   function Language_is_assignable
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_is_assignable, "Ada_Language_is_assignable");

   function Language_runtimeCode
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Language_runtimeCode, "Ada_Language_runtimeCode");

   function Language_defaultExternalRuntimeFilename
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Language_defaultExternalRuntimeFilename,
      "Ada_Language_defaultExternalRuntimeFilename");

   procedure Language_enable_cplus_runtime_mode (jarg1 : System.Address);

   pragma Import
     (C,
      Language_enable_cplus_runtime_mode,
      "Ada_Language_enable_cplus_runtime_mode");

   function Language_cplus_runtime_mode
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_cplus_runtime_mode,
      "Ada_Language_cplus_runtime_mode");

   procedure Language_allow_protected_and_private_Members
     (jarg1 : System.Address);

   pragma Import
     (C,
      Language_allow_protected_and_private_Members,
      "Ada_Language_allow_protected_and_private_Members");

   procedure Language_allow_directors_SWIG_0
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int);

   pragma Import
     (C,
      Language_allow_directors_SWIG_0,
      "Ada_Language_allow_directors__SWIG_0");

   procedure Language_allow_directors_SWIG_1 (jarg1 : System.Address);

   pragma Import
     (C,
      Language_allow_directors_SWIG_1,
      "Ada_Language_allow_directors__SWIG_1");

   function Language_directorsEnabled
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_directorsEnabled,
      "Ada_Language_directorsEnabled");

   procedure Language_allow_dirprot_SWIG_0
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int);

   pragma Import
     (C,
      Language_allow_dirprot_SWIG_0,
      "Ada_Language_allow_dirprot__SWIG_0");

   procedure Language_allow_dirprot_SWIG_1 (jarg1 : System.Address);

   pragma Import
     (C,
      Language_allow_dirprot_SWIG_1,
      "Ada_Language_allow_dirprot__SWIG_1");

   procedure Language_allow_allprotected_SWIG_0
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int);

   pragma Import
     (C,
      Language_allow_allprotected_SWIG_0,
      "Ada_Language_allow_allprotected__SWIG_0");

   procedure Language_allow_allprotected_SWIG_1 (jarg1 : System.Address);

   pragma Import
     (C,
      Language_allow_allprotected_SWIG_1,
      "Ada_Language_allow_allprotected__SWIG_1");

   function Language_dirprot_mode
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Language_dirprot_mode, "Ada_Language_dirprot_mode");

   function Language_need_nonpublic_ctor
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_need_nonpublic_ctor,
      "Ada_Language_need_nonpublic_ctor");

   function Language_need_nonpublic_member
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_need_nonpublic_member,
      "Ada_Language_need_nonpublic_member");

   procedure Language_setSubclassInstanceCheck
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      Language_setSubclassInstanceCheck,
      "Ada_Language_setSubclassInstanceCheck");

   procedure Language_setOverloadResolutionTemplates
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address);

   pragma Import
     (C,
      Language_setOverloadResolutionTemplates,
      "Ada_Language_setOverloadResolutionTemplates");

   procedure Language_allow_multiple_input_SWIG_0
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int);

   pragma Import
     (C,
      Language_allow_multiple_input_SWIG_0,
      "Ada_Language_allow_multiple_input__SWIG_0");

   procedure Language_allow_multiple_input_SWIG_1 (jarg1 : System.Address);

   pragma Import
     (C,
      Language_allow_multiple_input_SWIG_1,
      "Ada_Language_allow_multiple_input__SWIG_1");

   procedure Language_allow_overloading_SWIG_0
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int);

   pragma Import
     (C,
      Language_allow_overloading_SWIG_0,
      "Ada_Language_allow_overloading__SWIG_0");

   procedure Language_allow_overloading_SWIG_1 (jarg1 : System.Address);

   pragma Import
     (C,
      Language_allow_overloading_SWIG_1,
      "Ada_Language_allow_overloading__SWIG_1");

   function Language_is_wrapping_class
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_is_wrapping_class,
      "Ada_Language_is_wrapping_class");

   function Language_getCurrentClass
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Language_getCurrentClass,
      "Ada_Language_getCurrentClass");

   function Language_getClassName
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Language_getClassName, "Ada_Language_getClassName");

   function Language_getClassHash
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Language_getClassHash, "Ada_Language_getClassHash");

   function Language_getClassPrefix
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Language_getClassPrefix, "Ada_Language_getClassPrefix");

   function Language_getClassType
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Language_getClassType, "Ada_Language_getClassType");

   function Language_is_smart_pointer
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      Language_is_smart_pointer,
      "Ada_Language_is_smart_pointer");

   function Language_extraDirectorProtectedCPPMethodsRequired
     (jarg1 : System.Address)
      return  Boolean;

   pragma Import
     (C,
      Language_extraDirectorProtectedCPPMethodsRequired,
      "Ada_Language_extraDirectorProtectedCPPMethodsRequired");

   procedure set_Language_none_comparison
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      set_Language_none_comparison,
      "Ada_set_Language_none_comparison");

   function get_Language_none_comparison
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      get_Language_none_comparison,
      "Ada_get_Language_none_comparison");

   procedure set_Language_director_ctor_code
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      set_Language_director_ctor_code,
      "Ada_set_Language_director_ctor_code");

   function get_Language_director_ctor_code
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      get_Language_director_ctor_code,
      "Ada_get_Language_director_ctor_code");

   procedure set_Language_director_prot_ctor_code
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      set_Language_director_prot_ctor_code,
      "Ada_set_Language_director_prot_ctor_code");

   function get_Language_director_prot_ctor_code
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      get_Language_director_prot_ctor_code,
      "Ada_get_Language_director_prot_ctor_code");

   procedure set_Language_director_multiple_inheritance
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int);

   pragma Import
     (C,
      set_Language_director_multiple_inheritance,
      "Ada_set_Language_director_multiple_inheritance");

   function get_Language_director_multiple_inheritance
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      get_Language_director_multiple_inheritance,
      "Ada_get_Language_director_multiple_inheritance");

   procedure set_Language_director_language
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int);

   pragma Import
     (C,
      set_Language_director_language,
      "Ada_set_Language_director_language");

   function get_Language_director_language
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      get_Language_director_language,
      "Ada_get_Language_director_language");

   procedure Language_director_connect
     (Language_address : System.Address;
      cptr             : System.Address;
      mem_own          : Boolean;
      weak_global      : Boolean);

   pragma Import
     (C,
      Language_director_connect,
      "Ada_swigg_c_import_Language_director_connect");

   procedure Language_change_ownership
     (Language_address : System.Address;
      cptr             : System.Address;
      take_or_release  : Boolean);

   pragma Import
     (C,
      Language_change_ownership,
      "Ada_swigg_c_import_Language_change_ownership");

   function Lang_CurrentClass return  System.Address;

   pragma Import (C, Lang_CurrentClass, "Ada_Lang_CurrentClass");

   function Lang_ClassName return  System.Address;

   pragma Import (C, Lang_ClassName, "Ada_Lang_ClassName");

   function Lang_AddExtern return  Interfaces.C.int;

   pragma Import (C, Lang_AddExtern, "Ada_Lang_AddExtern");

   function Lang_ForceExtern return  Interfaces.C.int;

   pragma Import (C, Lang_ForceExtern, "Ada_Lang_ForceExtern");

   function Lang_first_nontemplate
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Lang_first_nontemplate, "Ada_Lang_first_nontemplate");

   function SWIG_main
     (jarg1 : Interfaces.C.int;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, SWIG_main, "Ada_SWIG_main");

   procedure emit_parameter_variables
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      emit_parameter_variables,
      "Ada_emit_parameter_variables");

   procedure emit_return_variable
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address);

   pragma Import (C, emit_return_variable, "Ada_emit_return_variable");

   procedure SWIG_exit (jarg1 : Interfaces.C.int);

   pragma Import (C, SWIG_exit, "Ada_SWIG_exit");

   procedure SWIG_config_file (jarg1 : System.Address);

   pragma Import (C, SWIG_config_file, "Ada_SWIG_config_file");

   function SWIG_output_directory return  System.Address;

   pragma Import (C, SWIG_output_directory, "Ada_SWIG_output_directory");

   procedure SWIG_config_cppext (jarg1 : Interfaces.C.Strings.chars_ptr);

   pragma Import (C, SWIG_config_cppext, "Ada_SWIG_config_cppext");

   procedure SWIG_library_directory
     (jarg1 : Interfaces.C.Strings.chars_ptr);

   pragma Import (C, SWIG_library_directory, "Ada_SWIG_library_directory");

   function emit_num_arguments
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, emit_num_arguments, "Ada_emit_num_arguments");

   function emit_num_required
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, emit_num_required, "Ada_emit_num_required");

   function emit_isvarargs (jarg1 : System.Address) return Interfaces.C.int;

   pragma Import (C, emit_isvarargs, "Ada_emit_isvarargs");

   procedure emit_attach_parmmaps
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import (C, emit_attach_parmmaps, "Ada_emit_attach_parmmaps");

   procedure emit_mark_varargs (jarg1 : System.Address);

   pragma Import (C, emit_mark_varargs, "Ada_emit_mark_varargs");

   function emit_action (jarg1 : System.Address) return System.Address;

   pragma Import (C, emit_action, "Ada_emit_action");

   function emit_action_code
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, emit_action_code, "Ada_emit_action_code");

   procedure Swig_overload_check (jarg1 : System.Address);

   pragma Import (C, Swig_overload_check, "Ada_Swig_overload_check");

   function Swig_overload_dispatch
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : Swig.pointers.int_Pointer)
      return  System.Address;

   pragma Import (C, Swig_overload_dispatch, "Ada_Swig_overload_dispatch");

   function Swig_overload_dispatch_cast
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : Swig.pointers.int_Pointer)
      return  System.Address;

   pragma Import
     (C,
      Swig_overload_dispatch_cast,
      "Ada_Swig_overload_dispatch_cast");

   function Swig_overload_dispatch_fast
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : Swig.pointers.int_Pointer)
      return  System.Address;

   pragma Import
     (C,
      Swig_overload_dispatch_fast,
      "Ada_Swig_overload_dispatch_fast");

   function cplus_value_type (jarg1 : System.Address) return System.Address;

   pragma Import (C, cplus_value_type, "Ada_cplus_value_type");

   function Swig_csuperclass_call
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_csuperclass_call, "Ada_Swig_csuperclass_call");

   function Swig_class_declaration
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_class_declaration, "Ada_Swig_class_declaration");

   function Swig_class_name (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_class_name, "Ada_Swig_class_name");

   function Swig_method_call
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_method_call, "Ada_Swig_method_call");

   function Swig_method_decl
     (jarg1 : System.Address;
      jarg2 : System.Address;
      jarg3 : System.Address;
      jarg4 : System.Address;
      jarg5 : Interfaces.C.int;
      jarg6 : Interfaces.C.int)
      return  System.Address;

   pragma Import (C, Swig_method_decl, "Ada_Swig_method_decl");

   function Swig_director_declaration
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import
     (C,
      Swig_director_declaration,
      "Ada_Swig_director_declaration");

   procedure Swig_director_emit_dynamic_cast
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      Swig_director_emit_dynamic_cast,
      "Ada_Swig_director_emit_dynamic_cast");

   procedure SWIG_typemap_lang (jarg1 : Interfaces.C.Strings.chars_ptr);

   pragma Import (C, SWIG_typemap_lang, "Ada_SWIG_typemap_lang");

   procedure Swig_register_module
     (jarg1 : Interfaces.C.Strings.chars_ptr;
      jarg2 : System.Address);

   pragma Import (C, Swig_register_module, "Ada_Swig_register_module");

   function Swig_find_module
     (jarg1 : Interfaces.C.Strings.chars_ptr)
      return  System.Address;

   pragma Import (C, Swig_find_module, "Ada_Swig_find_module");

   function is_public (jarg1 : System.Address) return Interfaces.C.int;

   pragma Import (C, is_public, "Ada_is_public");

   function is_private (jarg1 : System.Address) return Interfaces.C.int;

   pragma Import (C, is_private, "Ada_is_private");

   function is_protected (jarg1 : System.Address) return Interfaces.C.int;

   pragma Import (C, is_protected, "Ada_is_protected");

   function is_member_director_SWIG_0
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      is_member_director_SWIG_0,
      "Ada_is_member_director__SWIG_0");

   function is_member_director_SWIG_1
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      is_member_director_SWIG_1,
      "Ada_is_member_director__SWIG_1");

   function is_non_virtual_protected_access
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import
     (C,
      is_non_virtual_protected_access,
      "Ada_is_non_virtual_protected_access");

   function use_naturalvar_mode
     (jarg1 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, use_naturalvar_mode, "Ada_use_naturalvar_mode");

   procedure Wrapper_virtual_elimination_mode_set
     (jarg1 : Interfaces.C.int);

   pragma Import
     (C,
      Wrapper_virtual_elimination_mode_set,
      "Ada_Wrapper_virtual_elimination_mode_set");

   procedure Wrapper_fast_dispatch_mode_set (jarg1 : Interfaces.C.int);

   pragma Import
     (C,
      Wrapper_fast_dispatch_mode_set,
      "Ada_Wrapper_fast_dispatch_mode_set");

   procedure Wrapper_cast_dispatch_mode_set (jarg1 : Interfaces.C.int);

   pragma Import
     (C,
      Wrapper_cast_dispatch_mode_set,
      "Ada_Wrapper_cast_dispatch_mode_set");

   procedure Wrapper_naturalvar_mode_set (jarg1 : Interfaces.C.int);

   pragma Import
     (C,
      Wrapper_naturalvar_mode_set,
      "Ada_Wrapper_naturalvar_mode_set");

   procedure clean_overloaded (jarg1 : System.Address);

   pragma Import (C, clean_overloaded, "Ada_clean_overloaded");

   procedure Swig_contracts (jarg1 : System.Address);

   pragma Import (C, Swig_contracts, "Ada_Swig_contracts");

   procedure Swig_contract_mode_set (jarg1 : Interfaces.C.int);

   pragma Import (C, Swig_contract_mode_set, "Ada_Swig_contract_mode_set");

   function Swig_contract_mode_get return  Interfaces.C.int;

   pragma Import (C, Swig_contract_mode_get, "Ada_Swig_contract_mode_get");

   procedure Swig_browser
     (jarg1 : System.Address;
      jarg2 : Interfaces.C.int);

   pragma Import (C, Swig_browser, "Ada_Swig_browser");

   procedure Swig_default_allocators (jarg1 : System.Address);

   pragma Import (C, Swig_default_allocators, "Ada_Swig_default_allocators");

   procedure Swig_process_types (jarg1 : System.Address);

   pragma Import (C, Swig_process_types, "Ada_Swig_process_types");

   function Swig_add_directory
     (jarg1 : System.Address)
      return  System.Address;

   pragma Import (C, Swig_add_directory, "Ada_Swig_add_directory");

   procedure Swig_push_directory (jarg1 : System.Address);

   pragma Import (C, Swig_push_directory, "Ada_Swig_push_directory");

   procedure Swig_pop_directory;

   pragma Import (C, Swig_pop_directory, "Ada_Swig_pop_directory");

   function Swig_last_file return  System.Address;

   pragma Import (C, Swig_last_file, "Ada_Swig_last_file");

   function Swig_search_path return  System.Address;

   pragma Import (C, Swig_search_path, "Ada_Swig_search_path");

   function Swig_open (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_open, "Ada_Swig_open");

   function Swig_read_file (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_read_file, "Ada_Swig_read_file");

   function Swig_include (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_include, "Ada_Swig_include");

   function Swig_include_sys (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_include_sys, "Ada_Swig_include_sys");

   function Swig_insert_file
     (jarg1 : System.Address;
      jarg2 : System.Address)
      return  Interfaces.C.int;

   pragma Import (C, Swig_insert_file, "Ada_Swig_insert_file");

   procedure Swig_set_push_dir (jarg1 : Interfaces.C.int);

   pragma Import (C, Swig_set_push_dir, "Ada_Swig_set_push_dir");

   function Swig_get_push_dir return  Interfaces.C.int;

   pragma Import (C, Swig_get_push_dir, "Ada_Swig_get_push_dir");

   procedure Swig_register_filebyname
     (jarg1 : System.Address;
      jarg2 : System.Address);

   pragma Import
     (C,
      Swig_register_filebyname,
      "Ada_Swig_register_filebyname");

   function Swig_filebyname (jarg1 : System.Address) return System.Address;

   pragma Import (C, Swig_filebyname, "Ada_Swig_filebyname");

   function Swig_file_suffix
     (jarg1 : System.Address)
      return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, Swig_file_suffix, "Ada_Swig_file_suffix");

   function Swig_file_basename
     (jarg1 : System.Address)
      return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, Swig_file_basename, "Ada_Swig_file_basename");

   function Swig_file_filename
     (jarg1 : System.Address)
      return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, Swig_file_filename, "Ada_Swig_file_filename");

   function Swig_file_dirname
     (jarg1 : System.Address)
      return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, Swig_file_dirname, "Ada_Swig_file_dirname");

   function get_SWIG_FILE_DELIMITER return  Interfaces.C.Strings.chars_ptr;

   pragma Import (C, get_SWIG_FILE_DELIMITER, "Ada_get_SWIG_FILE_DELIMITER");

   procedure Swig_init_args
     (jarg1 : Interfaces.C.int;
      jarg2 : System.Address);

   pragma Import (C, Swig_init_args, "Ada_Swig_init_args");

   procedure Swig_mark_arg (jarg1 : Interfaces.C.int);

   pragma Import (C, Swig_mark_arg, "Ada_Swig_mark_arg");

   function Swig_check_marked
     (jarg1 : Interfaces.C.int)
      return  Interfaces.C.int;

   pragma Import (C, Swig_check_marked, "Ada_Swig_check_marked");

   procedure Swig_check_options (jarg1 : Interfaces.C.int);

   pragma Import (C, Swig_check_options, "Ada_Swig_check_options");

   procedure Swig_arg_error;

   pragma Import (C, Swig_arg_error, "Ada_Swig_arg_error");

   function LanguageUpcast
     (objectRef : in System.Address)
      return      System.Address;

   pragma Import (C, LanguageUpcast, "Ada_LanguageUpcast");

end swigg_c_import;
